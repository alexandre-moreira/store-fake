%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Shop with the sign We are open - up-01.eps
%%Creator: Adobe Illustrator(R) 24.0
%%For: Ayib Makmun B9
%%CreationDate: 5/12/2020
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.0.1 x341 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: font Yellowtail
%%+ font Oswald-DemiBold
%%+ font Oswald-ExtraLight
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: Yellowtail
%%+ Oswald-DemiBold
%%+ Oswald-ExtraLight
%%DocumentNeededFonts: Yellowtail
%%+ Oswald-DemiBold
%%+ Oswald-ExtraLight
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c148 79.164050, 2019/10/01-18:03:16        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Shop with the sign We are open - up-01</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2020-05-12T17:03:51+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2020-05-12T17:03:51+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2020-05-12T17:03:51+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator 24.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+ICQElDQ19QUk9GSUxFAAEBAAACMEFEQkUCEAAAbW50clJHQiBYWVogB88ABgAD&#xA;AAAAAAAAYWNzcEFQUEwAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1BREJFAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKY3BydAAAAPwAAAAy&#xA;ZGVzYwAAATAAAABrd3RwdAAAAZwAAAAUYmtwdAAAAbAAAAAUclRSQwAAAcQAAAAOZ1RSQwAAAdQA&#xA;AAAOYlRSQwAAAeQAAAAOclhZWgAAAfQAAAAUZ1hZWgAAAggAAAAUYlhZWgAAAhwAAAAUdGV4dAAA&#xA;AABDb3B5cmlnaHQgMTk5OSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZAAAAGRlc2MAAAAAAAAA&#xA;EUFkb2JlIFJHQiAoMTk5OCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA&#xA;ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABjdXJ2AAAAAAAAAAECMwAAY3VydgAAAAAAAAABAjMAAGN1&#xA;cnYAAAAAAAAAAQIzAABYWVogAAAAAAAAnBgAAE+lAAAE/FhZWiAAAAAAAAA0jQAAoCwAAA+VWFla&#xA;IAAAAAAAACYxAAAQLwAAvpz/7gAOQWRvYmUAZMAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYG&#xA;CAsMCgoLCgoMEAwMDAwMDBAMDg8QDw4MExMUFBMTHBsbGxwfHx8fHx8fHx8fAQcHBw0MDRgQEBga&#xA;FREVGh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx//wAAR&#xA;CAEAAQADAREAAhEBAxEB/8QBogAAAAcBAQEBAQAAAAAAAAAABAUDAgYBAAcICQoLAQACAgMBAQEB&#xA;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&#xA;ud+hdL/3wPvb+uPGV8OPc79C6X/vgfe39ceMr4ce536F0v8A3wPvb+uPGV8OPc79C6X/AL4H3t/X&#xA;HjK+HHud+hdL/wB8D72/rjxlfDj3O/Qul/74H3t/XHjK+HHud+hdL/3wPvb+uPGV8OPc79C6X/vg&#xA;fe39ceMr4ce536F0v/fA+9v648ZXw49zv0Lpf++B97f1x4yvhx7nfoXS/wDfA+9v648ZXw49zv0L&#xA;pf8Avgfe39ceMr4ce5dHpOnRyLIkIV1NVNTsR9OPEVGOIReRZuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:903a55ef-5703-7242-a59b-d5065b2af9f3</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:903a55ef-5703-7242-a59b-d5065b2af9f3</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:6b82a2a1-0828-4e18-9909-271784549779</stRef:instanceID>
            <stRef:documentID>xmp.did:d9baed6d-4771-684d-9175-210872642060</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:903a55ef-5703-7242-a59b-d5065b2af9f3</stEvt:instanceID>
                  <stEvt:when>2020-05-12T17:03:51+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>Adobe Illustrator</illustrator:CreatorSubTool>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Oswald-DemiBold</stFnt:fontName>
                  <stFnt:fontFamily>Oswald</stFnt:fontFamily>
                  <stFnt:fontFace>DemiBold</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>3.0; ttfautohint (v0.95) -l 8 -r 50 -G 200 -x 0 -w "G" -W -c</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Oswald-DemiBold.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Oswald-ExtraLight</stFnt:fontName>
                  <stFnt:fontFamily>Oswald</stFnt:fontFamily>
                  <stFnt:fontFace>ExtraLight</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>3.0; ttfautohint (v0.95) -l 8 -r 50 -G 200 -x 0 -w "G" -W -c</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Oswald-ExtraLight.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Yellowtail</stFnt:fontName>
                  <stFnt:fontFamily>Yellowtail</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.000</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Yellowtail-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=147 G=185 B=198 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>185</xmpG:green>
                           <xmpG:blue>198</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 8</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=195 G=211 B=221</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>195</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>221</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=220 G=232 B=239</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>220</xmpG:red>
                           <xmpG:green>232</xmpG:green>
                           <xmpG:blue>239</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=240 G=245 B=247</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>240</xmpG:red>
                           <xmpG:green>245</xmpG:green>
                           <xmpG:blue>247</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=251 B=252 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>251</xmpG:green>
                           <xmpG:blue>252</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 5</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=209 B=91 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>209</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=236 G=130 B=125</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>236</xmpG:red>
                           <xmpG:green>130</xmpG:green>
                           <xmpG:blue>125</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=190 G=225 B=244</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>190</xmpG:red>
                           <xmpG:green>225</xmpG:green>
                           <xmpG:blue>244</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 G=107 B=241</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>107</xmpG:green>
                           <xmpG:blue>241</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=135 G=140 B=240</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>135</xmpG:red>
                           <xmpG:green>140</xmpG:green>
                           <xmpG:blue>240</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=177 G=178 B=243</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>177</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>243</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Kulit orang</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>200</xmpG:green>
                           <xmpG:blue>175</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>65</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>88</xmpG:red>
                           <xmpG:green>89</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>109</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>113</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>130</xmpG:green>
                           <xmpG:blue>133</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>152</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>167</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>172</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>192</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>212</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>231</xmpG:green>
                           <xmpG:blue>232</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.976471 .984314 .988235 rgb
f
395.502 418.895 mo
101.359 418.895 li
79.9741 418.895 62.6377 401.56 62.6377 380.175 cv
62.6377 354.632 li
62.6377 333.247 79.9741 315.911 101.359 315.911 cv
395.502 315.911 li
416.888 315.911 434.224 333.247 434.224 354.632 cv
434.224 380.175 li
434.224 401.56 416.888 418.895 395.502 418.895 cv
.862745 .909804 .937255 rgb
f
395.502 270.109 mo
101.359 270.109 li
79.9741 270.109 62.6377 252.772 62.6377 231.388 cv
62.6377 205.845 li
62.6377 184.46 79.9741 167.124 101.359 167.124 cv
395.502 167.124 li
416.888 167.124 434.224 184.46 434.224 205.845 cv
434.224 231.388 li
434.224 252.772 416.888 270.109 395.502 270.109 cv
f
332.595 190.456 mo
122.787 190.456 li
107.533 190.456 95.167 178.09 95.167 162.836 cv
95.167 144.618 li
95.167 129.364 107.533 116.998 122.787 116.998 cv
332.595 116.998 li
347.848 116.998 360.214 129.364 360.214 144.618 cv
360.214 162.836 li
360.214 178.09 347.848 190.456 332.595 190.456 cv
f
407.744 327.442 mo
113.601 327.442 li
92.2158 327.442 74.8794 310.106 74.8794 288.722 cv
74.8794 267.336 92.2158 250 113.601 250 cv
407.744 250 li
429.129 250 446.466 267.336 446.466 288.722 cv
446.466 310.106 429.129 327.442 407.744 327.442 cv
f
372.457 412.59 mo
365.951 398.258 363.667 390.466 365.605 389.214 cv
365.791 389.094 366.015 389.034 366.278 389.034 cv
368.185 389.034 372.125 392.183 378.1 398.483 cv
378.476 396.317 379.164 392.519 380.102 388.384 cv
396.718 388.384 li
396.992 389.686 397.235 390.922 397.445 392.035 cv
397.62 390.782 397.796 389.565 397.971 388.384 cv
405.322 388.384 li
405.322 386.76 li
405.322 386.04 li
405.322 379.56 li
405.322 378.84 li
405.322 372.36 li
405.322 371.64 li
405.322 365.16 li
405.322 364.44 li
405.322 360.113 li
405.785 359.633 406.249 359.392 406.714 359.39 cv
406.716 359.39 406.718 359.39 406.72 359.39 cv
408.318 359.39 409.929 362.211 411.551 367.853 cv
415.706 360.558 418.786 356.911 420.792 356.911 cv
420.942 356.911 421.086 356.931 421.224 356.972 cv
423.924 357.767 424.327 366.365 422.433 382.766 cv
423.96 380.477 429.853 371.809 434.224 369.493 cv
434.913 369.128 435.564 368.92 436.154 368.92 cv
436.43 368.92 436.694 368.966 436.942 369.063 cv
442.087 371.066 437.265 393.772 436.942 395.259 cv
441.118 393.033 445.183 392.132 448.624 392.132 cv
453.298 392.132 456.82 393.796 457.899 396.065 cv
459.626 399.696 456.098 406.977 448.227 411.783 cv
437.952 411.892 427.678 412.002 417.403 412.111 cv
402.421 412.271 387.439 412.431 372.457 412.59 cv
level3{
gsave
clp
[33.2023 57.5081 -57.5081 33.2023 393.472 366.719 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.164706 .133333 .466667 ]
/C1 [.356863 .164706 .552941 ]
/N 2.19931 
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[33.2023 57.5081 -57.5081 33.2023 393.472 366.719 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~>?Y35=]ed.='&F'<`N.!<)cdp;GpCi;,L.d:JXb]:/4MX9h\5S91qoM8kMZH8OuBC7n6'=7Rfg8779O3
6pj=/6:+")5s[e%5X7S!5<h=q5!D+m4Ztni4?P\e4$,Ja3]];^3B9)Z3&ilW2`EZS2E!HO2Dm?L2)R6J
1c.$G1G^gC1G^dA1,:U?0ekC;0ekC:0JG170JG.50/"t30/"q1/hSb//hSb./M/P+/M/P+/M&G(/1`>'
/1`>'/1W5$.k<,#.k<,#.k<,#.k3"u.Olnt.Olnt.Olnt.Olnt.Olnt.Olnt.Olnt.Olnt.Olnt.Olnt
~>
<~.Oceq.4H\p.4H\p.4H\p-n$Jl-n$Jl-n$Jl-n$Jl-RU8h-RU8h-RU8h-RU8h-RU5f-71&d-71&d-71&d
-71&d-71#b,pai`,pai`,pai`,pai`,pai`,pX`],U=W\,U=W\,U=W\,U=W\,U=W\,U=W\,9nEX,9nEX
,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9e<U+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T
+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T
~>
<~NJrgTN/W[QMi3LNMMd:KMM[1HM2@(FLkpkCLkgb@LPLY>L5(G;L4t>8KnY57KS5#3KS5#2K7ef/K7ec-
JqAT+JqAQ)JUrB'JUr?%J:N0#J:N-!It)rtIt)rsIXZ`pIXZ`pI=6NlI=6NlI=6NkI!g<hI!g<hI!g9f
H[C*dH[C*dH[C*cH?sm`H?sm`H?sm`H?jd]H$O[\H$O[\H$O[\H$OXZG^+IXG^+IXG^+IXG^+IXG^+IX
G^+FVGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7T
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
49.1905 412.59 mo
42.6835 398.258 40.3998 390.466 42.3389 389.214 cv
42.5244 389.094 42.7485 389.034 43.0114 389.034 cv
44.9178 389.034 48.8582 392.183 54.8325 398.483 cv
55.7835 393.018 58.7167 377.162 62.6377 371.724 cv
63.4801 370.556 64.3684 369.868 65.2921 369.868 cv
65.2985 369.868 65.3052 369.868 65.3115 369.868 cv
69.501 369.912 72.6816 384.095 74.1783 392.035 cv
77.2216 370.284 80.3115 359.403 83.4477 359.39 cv
83.4497 359.39 83.4516 359.39 83.4535 359.39 cv
85.0517 359.39 86.6617 362.211 88.2842 367.853 cv
90.8137 363.411 92.945 360.322 94.6783 358.585 cv
94.6783 388.384 li
114.941 388.384 li
114.376 391.978 113.781 394.769 113.675 395.259 cv
117.851 393.033 121.916 392.132 125.357 392.132 cv
130.032 392.132 133.554 393.796 134.633 396.065 cv
136.359 399.696 132.831 406.977 124.96 411.783 cv
109.868 411.944 94.7757 412.104 79.6841 412.265 cv
69.5193 412.374 59.3552 412.482 49.1905 412.59 cv
level3{
gsave
clp
[33.2023 57.5081 -57.5081 33.2023 70.2052 366.719 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[33.2023 57.5081 -57.5081 33.2023 70.2052 366.719 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
303.938 234.887 mo
303.938 242.379 li
300.386 242.379 li
199.614 242.379 li
196.062 242.379 li
196.062 234.887 li
303.938 234.887 li
.529412 .54902 .941176 rgb
f
411.633 388.384 mo
411.633 412.59 li
300.386 412.59 li
300.386 388.384 li
405.322 388.384 li
411.633 388.384 li
cp
f
199.614 388.384 mo
199.614 412.59 li
88.3667 412.59 li
88.3667 388.384 li
94.6782 388.384 li
199.614 388.384 li
cp
f
411.633 388.384 mo
411.633 390.518 li
300.386 390.518 li
300.386 388.384 li
405.322 388.384 li
411.633 388.384 li
cp
.694118 .698039 .952941 rgb
f
199.614 388.384 mo
199.614 390.518 li
88.3667 390.518 li
88.3667 388.384 li
94.6782 388.384 li
199.614 388.384 li
cp
f
187.292 234.887 mo
187.292 242.379 li
182.826 242.379 li
108.75 242.379 li
104.285 242.379 li
104.285 234.887 li
187.292 234.887 li
.529412 .54902 .941176 rgb
f
395.715 234.887 mo
395.715 242.379 li
391.249 242.379 li
317.174 242.379 li
312.708 242.379 li
312.708 234.887 li
395.715 234.887 li
f
300.386 388.384 mo
300.386 412.59 li
291.863 412.59 li
291.863 249.915 li
208.137 249.915 li
208.137 412.59 li
199.614 412.59 li
199.614 388.384 li
199.614 242.379 li
300.386 242.379 li
300.386 388.384 li
.694118 .698039 .952941 rgb
f
317.454 140.465 mo
182.546 140.465 li
176.016 140.465 170.673 135.122 170.673 128.591 cv
170.673 106.293 li
170.673 99.7622 176.016 94.4194 182.546 94.4194 cv
317.454 94.4194 li
323.984 94.4194 329.327 99.7622 329.327 106.293 cv
329.327 128.591 li
329.327 135.122 323.984 140.465 317.454 140.465 cv
cp
.376471 .419608 .945098 rgb
f
176.928 134.7 mo
176.7 134.513 176.482 134.313 176.276 134.101 cv
175.892 133.704 175.258 133.695 174.862 134.079 cv
174.466 134.464 174.456 135.097 174.841 135.494 cv
175.099 135.76 175.373 136.011 175.66 136.247 cv
176.087 136.597 176.717 136.535 177.067 136.108 cv
177.418 135.681 177.355 135.051 176.928 134.7 cv
cp
174.238 130.239 mo
174.18 129.952 174.139 129.66 174.114 129.363 cv
174.068 128.813 173.584 128.404 173.034 128.45 cv
172.483 128.496 172.075 128.98 172.121 129.53 cv
172.152 129.904 172.205 130.272 172.277 130.633 cv
172.386 131.174 172.913 131.525 173.455 131.416 cv
173.996 131.307 174.347 130.78 174.238 130.239 cv
cp
174.086 124.448 mo
174.086 123.448 li
174.086 122.895 173.639 122.448 173.086 122.448 cv
172.534 122.448 172.086 122.895 172.086 123.448 cv
172.086 124.448 li
172.086 125 172.534 125.448 173.086 125.448 cv
173.639 125.448 174.086 125 174.086 124.448 cv
cp
174.086 118.448 mo
174.086 117.448 li
174.086 116.895 173.639 116.448 173.086 116.448 cv
172.534 116.448 172.086 116.895 172.086 117.448 cv
172.086 118.448 li
172.086 119 172.534 119.448 173.086 119.448 cv
173.639 119.448 174.086 119 174.086 118.448 cv
cp
174.086 112.448 mo
174.086 111.448 li
174.086 110.895 173.639 110.448 173.086 110.448 cv
172.534 110.448 172.086 110.895 172.086 111.448 cv
172.086 112.448 li
172.086 113 172.534 113.448 173.086 113.448 cv
173.639 113.448 174.086 113 174.086 112.448 cv
cp
174.086 106.448 mo
174.086 106.175 li
174.086 105.958 174.095 105.743 174.113 105.531 cv
174.158 104.981 173.749 104.498 173.198 104.452 cv
172.648 104.407 172.165 104.816 172.12 105.367 cv
172.098 105.633 172.086 105.903 172.086 106.175 cv
172.086 106.448 li
172.086 107 172.534 107.448 173.086 107.448 cv
173.639 107.448 174.086 107 174.086 106.448 cv
cp
175.69 101.461 mo
175.87 101.227 176.064 101.003 176.269 100.791 cv
176.653 100.394 176.643 99.7608 176.246 99.3767 cv
175.849 98.9925 175.216 99.0028 174.832 99.3996 cv
174.574 99.666 174.331 99.9471 174.105 100.242 cv
173.768 100.679 173.85 101.307 174.287 101.644 cv
174.725 101.981 175.353 101.899 175.69 101.461 cv
cp
180.065 98.6321 mo
180.35 98.5655 180.641 98.5146 180.937 98.4805 cv
181.485 98.4172 181.879 97.9211 181.815 97.3724 cv
181.752 96.8238 181.256 96.4303 180.707 96.4937 cv
180.335 96.5366 179.968 96.6007 179.61 96.6847 cv
179.072 96.8106 178.738 97.3485 178.864 97.8863 cv
178.99 98.424 179.528 98.7579 180.065 98.6321 cv
cp
185.819 98.4292 mo
186.819 98.4292 li
187.372 98.4292 187.819 97.9815 187.819 97.4292 cv
187.819 96.8769 187.372 96.4292 186.819 96.4292 cv
185.819 96.4292 li
185.267 96.4292 184.819 96.8769 184.819 97.4292 cv
184.819 97.9815 185.267 98.4292 185.819 98.4292 cv
cp
191.819 98.4292 mo
192.819 98.4292 li
193.372 98.4292 193.819 97.9815 193.819 97.4292 cv
193.819 96.8769 193.372 96.4292 192.819 96.4292 cv
191.819 96.4292 li
191.267 96.4292 190.819 96.8769 190.819 97.4292 cv
190.819 97.9815 191.267 98.4292 191.819 98.4292 cv
cp
197.819 98.4292 mo
198.819 98.4292 li
199.372 98.4292 199.819 97.9815 199.819 97.4292 cv
199.819 96.8769 199.372 96.4292 198.819 96.4292 cv
197.819 96.4292 li
197.267 96.4292 196.819 96.8769 196.819 97.4292 cv
196.819 97.9815 197.267 98.4292 197.819 98.4292 cv
cp
203.819 98.4292 mo
204.819 98.4292 li
205.372 98.4292 205.819 97.9815 205.819 97.4292 cv
205.819 96.8769 205.372 96.4292 204.819 96.4292 cv
203.819 96.4292 li
203.267 96.4292 202.819 96.8769 202.819 97.4292 cv
202.819 97.9815 203.267 98.4292 203.819 98.4292 cv
cp
209.819 98.4292 mo
210.819 98.4292 li
211.372 98.4292 211.819 97.9815 211.819 97.4292 cv
211.819 96.8769 211.372 96.4292 210.819 96.4292 cv
209.819 96.4292 li
209.267 96.4292 208.819 96.8769 208.819 97.4292 cv
208.819 97.9815 209.267 98.4292 209.819 98.4292 cv
cp
215.819 98.4292 mo
216.819 98.4292 li
217.372 98.4292 217.819 97.9815 217.819 97.4292 cv
217.819 96.8769 217.372 96.4292 216.819 96.4292 cv
215.819 96.4292 li
215.267 96.4292 214.819 96.8769 214.819 97.4292 cv
214.819 97.9815 215.267 98.4292 215.819 98.4292 cv
cp
221.819 98.4292 mo
222.819 98.4292 li
223.372 98.4292 223.819 97.9815 223.819 97.4292 cv
223.819 96.8769 223.372 96.4292 222.819 96.4292 cv
221.819 96.4292 li
221.267 96.4292 220.819 96.8769 220.819 97.4292 cv
220.819 97.9815 221.267 98.4292 221.819 98.4292 cv
cp
227.819 98.4292 mo
228.819 98.4292 li
229.372 98.4292 229.819 97.9815 229.819 97.4292 cv
229.819 96.8769 229.372 96.4292 228.819 96.4292 cv
227.819 96.4292 li
227.267 96.4292 226.819 96.8769 226.819 97.4292 cv
226.819 97.9815 227.267 98.4292 227.819 98.4292 cv
cp
233.819 98.4292 mo
234.819 98.4292 li
235.372 98.4292 235.819 97.9815 235.819 97.4292 cv
235.819 96.8769 235.372 96.4292 234.819 96.4292 cv
233.819 96.4292 li
233.267 96.4292 232.819 96.8769 232.819 97.4292 cv
232.819 97.9815 233.267 98.4292 233.819 98.4292 cv
cp
239.819 98.4292 mo
240.819 98.4292 li
241.372 98.4292 241.819 97.9815 241.819 97.4292 cv
241.819 96.8769 241.372 96.4292 240.819 96.4292 cv
239.819 96.4292 li
239.267 96.4292 238.819 96.8769 238.819 97.4292 cv
238.819 97.9815 239.267 98.4292 239.819 98.4292 cv
cp
245.819 98.4292 mo
246.819 98.4292 li
247.372 98.4292 247.819 97.9815 247.819 97.4292 cv
247.819 96.8769 247.372 96.4292 246.819 96.4292 cv
245.819 96.4292 li
245.267 96.4292 244.819 96.8769 244.819 97.4292 cv
244.819 97.9815 245.267 98.4292 245.819 98.4292 cv
cp
251.819 98.4292 mo
252.819 98.4292 li
253.372 98.4292 253.819 97.9815 253.819 97.4292 cv
253.819 96.8769 253.372 96.4292 252.819 96.4292 cv
251.819 96.4292 li
251.267 96.4292 250.819 96.8769 250.819 97.4292 cv
250.819 97.9815 251.267 98.4292 251.819 98.4292 cv
cp
257.819 98.4292 mo
258.819 98.4292 li
259.372 98.4292 259.819 97.9815 259.819 97.4292 cv
259.819 96.8769 259.372 96.4292 258.819 96.4292 cv
257.819 96.4292 li
257.267 96.4292 256.819 96.8769 256.819 97.4292 cv
256.819 97.9815 257.267 98.4292 257.819 98.4292 cv
cp
263.819 98.4292 mo
264.819 98.4292 li
265.372 98.4292 265.819 97.9815 265.819 97.4292 cv
265.819 96.8769 265.372 96.4292 264.819 96.4292 cv
263.819 96.4292 li
263.267 96.4292 262.819 96.8769 262.819 97.4292 cv
262.819 97.9815 263.267 98.4292 263.819 98.4292 cv
cp
269.819 98.4292 mo
270.819 98.4292 li
271.372 98.4292 271.819 97.9815 271.819 97.4292 cv
271.819 96.8769 271.372 96.4292 270.819 96.4292 cv
269.819 96.4292 li
269.267 96.4292 268.819 96.8769 268.819 97.4292 cv
268.819 97.9815 269.267 98.4292 269.819 98.4292 cv
cp
275.819 98.4292 mo
276.819 98.4292 li
277.372 98.4292 277.819 97.9815 277.819 97.4292 cv
277.819 96.8769 277.372 96.4292 276.819 96.4292 cv
275.819 96.4292 li
275.267 96.4292 274.819 96.8769 274.819 97.4292 cv
274.819 97.9815 275.267 98.4292 275.819 98.4292 cv
cp
281.819 98.4292 mo
282.819 98.4292 li
283.372 98.4292 283.819 97.9815 283.819 97.4292 cv
283.819 96.8769 283.372 96.4292 282.819 96.4292 cv
281.819 96.4292 li
281.267 96.4292 280.819 96.8769 280.819 97.4292 cv
280.819 97.9815 281.267 98.4292 281.819 98.4292 cv
cp
287.819 98.4292 mo
288.819 98.4292 li
289.372 98.4292 289.819 97.9815 289.819 97.4292 cv
289.819 96.8769 289.372 96.4292 288.819 96.4292 cv
287.819 96.4292 li
287.267 96.4292 286.819 96.8769 286.819 97.4292 cv
286.819 97.9815 287.267 98.4292 287.819 98.4292 cv
cp
293.819 98.4292 mo
294.819 98.4292 li
295.371 98.4292 295.819 97.9815 295.819 97.4292 cv
295.819 96.8769 295.371 96.4292 294.819 96.4292 cv
293.819 96.4292 li
293.267 96.4292 292.819 96.8769 292.819 97.4292 cv
292.819 97.9815 293.267 98.4292 293.819 98.4292 cv
cp
299.819 98.4292 mo
300.819 98.4292 li
301.371 98.4292 301.819 97.9815 301.819 97.4292 cv
301.819 96.8769 301.371 96.4292 300.819 96.4292 cv
299.819 96.4292 li
299.267 96.4292 298.819 96.8769 298.819 97.4292 cv
298.819 97.9815 299.267 98.4292 299.819 98.4292 cv
cp
305.819 98.4292 mo
306.819 98.4292 li
307.371 98.4292 307.819 97.9815 307.819 97.4292 cv
307.819 96.8769 307.371 96.4292 306.819 96.4292 cv
305.819 96.4292 li
305.267 96.4292 304.819 96.8769 304.819 97.4292 cv
304.819 97.9815 305.267 98.4292 305.819 98.4292 cv
cp
311.819 98.4292 mo
312.819 98.4292 li
313.371 98.4292 313.819 97.9815 313.819 97.4292 cv
313.819 96.8769 313.371 96.4292 312.819 96.4292 cv
311.819 96.4292 li
311.267 96.4292 310.819 96.8769 310.819 97.4292 cv
310.819 97.9815 311.267 98.4292 311.819 98.4292 cv
cp
317.819 98.4292 mo
318.169 98.4292 li
318.363 98.4292 318.555 98.4363 318.745 98.4503 cv
319.296 98.491 319.775 98.0774 319.816 97.5266 cv
319.856 96.9758 319.443 96.4964 318.892 96.4558 cv
318.653 96.4381 318.412 96.4292 318.169 96.4292 cv
317.819 96.4292 li
317.267 96.4292 316.819 96.8769 316.819 97.4292 cv
316.819 97.9815 317.267 98.4292 317.819 98.4292 cv
cp
322.828 99.9917 mo
323.064 100.17 323.29 100.362 323.503 100.565 cv
323.904 100.946 324.536 100.93 324.917 100.53 cv
325.298 100.13 325.282 99.4971 324.882 99.1164 cv
324.614 98.8607 324.331 98.6202 324.034 98.3962 cv
323.593 98.0632 322.966 98.1504 322.633 98.591 cv
322.3 99.0316 322.388 99.6587 322.828 99.9917 cv
cp
325.695 104.343 mo
325.764 104.627 325.817 104.917 325.854 105.213 cv
325.922 105.761 326.422 106.15 326.97 106.082 cv
327.518 106.014 327.907 105.514 327.839 104.966 cv
327.793 104.594 327.725 104.228 327.638 103.87 cv
327.508 103.334 326.967 103.004 326.43 103.135 cv
325.894 103.266 325.564 103.806 325.695 104.343 cv
cp
325.914 110.086 mo
325.914 111.086 li
325.914 111.639 326.361 112.086 326.914 112.086 cv
327.466 112.086 327.914 111.639 327.914 111.086 cv
327.914 110.086 li
327.914 109.534 327.466 109.086 326.914 109.086 cv
326.361 109.086 325.914 109.534 325.914 110.086 cv
cp
325.914 116.086 mo
325.914 117.086 li
325.914 117.639 326.361 118.086 326.914 118.086 cv
327.466 118.086 327.914 117.639 327.914 117.086 cv
327.914 116.086 li
327.914 115.534 327.466 115.086 326.914 115.086 cv
326.361 115.086 325.914 115.534 325.914 116.086 cv
cp
325.914 122.086 mo
325.914 123.086 li
325.914 123.639 326.361 124.086 326.914 124.086 cv
327.466 124.086 327.914 123.639 327.914 123.086 cv
327.914 122.086 li
327.914 121.534 327.466 121.086 326.914 121.086 cv
326.361 121.086 325.914 121.534 325.914 122.086 cv
cp
325.914 128.086 mo
325.914 128.709 li
325.914 128.821 325.911 128.933 325.906 129.043 cv
325.883 129.595 326.311 130.062 326.863 130.085 cv
327.415 130.109 327.881 129.68 327.905 129.129 cv
327.911 128.989 327.914 128.85 327.914 128.709 cv
327.914 128.086 li
327.914 127.534 327.466 127.086 326.914 127.086 cv
326.361 127.086 325.914 127.534 325.914 128.086 cv
cp
324.494 133.173 mo
324.323 133.415 324.139 133.646 323.942 133.866 cv
323.574 134.278 323.609 134.91 324.021 135.278 cv
324.433 135.646 325.065 135.611 325.433 135.199 cv
325.68 134.923 325.912 134.632 326.126 134.329 cv
326.446 133.878 326.339 133.254 325.888 132.935 cv
325.437 132.616 324.813 132.723 324.494 133.173 cv
cp
320.234 136.175 mo
319.952 136.253 319.664 136.316 319.37 136.362 cv
318.824 136.447 318.451 136.958 318.536 137.504 cv
318.622 138.05 319.133 138.423 319.679 138.338 cv
320.049 138.28 320.412 138.201 320.768 138.103 cv
321.3 137.955 321.612 137.404 321.465 136.872 cv
321.317 136.34 320.766 136.028 320.234 136.175 cv
cp
314.53 136.455 mo
313.53 136.455 li
312.978 136.455 312.53 136.902 312.53 137.455 cv
312.53 138.007 312.978 138.455 313.53 138.455 cv
314.53 138.455 li
315.082 138.455 315.53 138.007 315.53 137.455 cv
315.53 136.902 315.082 136.455 314.53 136.455 cv
cp
308.53 136.455 mo
307.53 136.455 li
306.978 136.455 306.53 136.902 306.53 137.455 cv
306.53 138.007 306.978 138.455 307.53 138.455 cv
308.53 138.455 li
309.082 138.455 309.53 138.007 309.53 137.455 cv
309.53 136.902 309.082 136.455 308.53 136.455 cv
cp
302.53 136.455 mo
301.53 136.455 li
300.978 136.455 300.53 136.902 300.53 137.455 cv
300.53 138.007 300.978 138.455 301.53 138.455 cv
302.53 138.455 li
303.082 138.455 303.53 138.007 303.53 137.455 cv
303.53 136.902 303.082 136.455 302.53 136.455 cv
cp
296.53 136.455 mo
295.53 136.455 li
294.978 136.455 294.53 136.902 294.53 137.455 cv
294.53 138.007 294.978 138.455 295.53 138.455 cv
296.53 138.455 li
297.082 138.455 297.53 138.007 297.53 137.455 cv
297.53 136.902 297.082 136.455 296.53 136.455 cv
cp
290.53 136.455 mo
289.53 136.455 li
288.978 136.455 288.53 136.902 288.53 137.455 cv
288.53 138.007 288.978 138.455 289.53 138.455 cv
290.53 138.455 li
291.082 138.455 291.53 138.007 291.53 137.455 cv
291.53 136.902 291.082 136.455 290.53 136.455 cv
cp
284.53 136.455 mo
283.53 136.455 li
282.978 136.455 282.53 136.902 282.53 137.455 cv
282.53 138.007 282.978 138.455 283.53 138.455 cv
284.53 138.455 li
285.082 138.455 285.53 138.007 285.53 137.455 cv
285.53 136.902 285.082 136.455 284.53 136.455 cv
cp
278.53 136.455 mo
277.53 136.455 li
276.978 136.455 276.53 136.902 276.53 137.455 cv
276.53 138.007 276.978 138.455 277.53 138.455 cv
278.53 138.455 li
279.082 138.455 279.53 138.007 279.53 137.455 cv
279.53 136.902 279.082 136.455 278.53 136.455 cv
cp
272.53 136.455 mo
271.53 136.455 li
270.978 136.455 270.53 136.902 270.53 137.455 cv
270.53 138.007 270.978 138.455 271.53 138.455 cv
272.53 138.455 li
273.082 138.455 273.53 138.007 273.53 137.455 cv
273.53 136.902 273.082 136.455 272.53 136.455 cv
cp
266.53 136.455 mo
265.53 136.455 li
264.978 136.455 264.53 136.902 264.53 137.455 cv
264.53 138.007 264.978 138.455 265.53 138.455 cv
266.53 138.455 li
267.082 138.455 267.53 138.007 267.53 137.455 cv
267.53 136.902 267.082 136.455 266.53 136.455 cv
cp
260.53 136.455 mo
259.53 136.455 li
258.978 136.455 258.53 136.902 258.53 137.455 cv
258.53 138.007 258.978 138.455 259.53 138.455 cv
260.53 138.455 li
261.082 138.455 261.53 138.007 261.53 137.455 cv
261.53 136.902 261.082 136.455 260.53 136.455 cv
cp
254.53 136.455 mo
253.53 136.455 li
252.978 136.455 252.53 136.902 252.53 137.455 cv
252.53 138.007 252.978 138.455 253.53 138.455 cv
254.53 138.455 li
255.082 138.455 255.53 138.007 255.53 137.455 cv
255.53 136.902 255.082 136.455 254.53 136.455 cv
cp
248.53 136.455 mo
247.53 136.455 li
246.978 136.455 246.53 136.902 246.53 137.455 cv
246.53 138.007 246.978 138.455 247.53 138.455 cv
248.53 138.455 li
249.082 138.455 249.53 138.007 249.53 137.455 cv
249.53 136.902 249.082 136.455 248.53 136.455 cv
cp
242.53 136.455 mo
241.53 136.455 li
240.978 136.455 240.53 136.902 240.53 137.455 cv
240.53 138.007 240.978 138.455 241.53 138.455 cv
242.53 138.455 li
243.082 138.455 243.53 138.007 243.53 137.455 cv
243.53 136.902 243.082 136.455 242.53 136.455 cv
cp
236.53 136.455 mo
235.53 136.455 li
234.978 136.455 234.53 136.902 234.53 137.455 cv
234.53 138.007 234.978 138.455 235.53 138.455 cv
236.53 138.455 li
237.082 138.455 237.53 138.007 237.53 137.455 cv
237.53 136.902 237.082 136.455 236.53 136.455 cv
cp
230.53 136.455 mo
229.53 136.455 li
228.978 136.455 228.53 136.902 228.53 137.455 cv
228.53 138.007 228.978 138.455 229.53 138.455 cv
230.53 138.455 li
231.082 138.455 231.53 138.007 231.53 137.455 cv
231.53 136.902 231.082 136.455 230.53 136.455 cv
cp
224.53 136.455 mo
223.53 136.455 li
222.978 136.455 222.53 136.902 222.53 137.455 cv
222.53 138.007 222.978 138.455 223.53 138.455 cv
224.53 138.455 li
225.082 138.455 225.53 138.007 225.53 137.455 cv
225.53 136.902 225.082 136.455 224.53 136.455 cv
cp
218.53 136.455 mo
217.53 136.455 li
216.978 136.455 216.53 136.902 216.53 137.455 cv
216.53 138.007 216.978 138.455 217.53 138.455 cv
218.53 138.455 li
219.082 138.455 219.53 138.007 219.53 137.455 cv
219.53 136.902 219.082 136.455 218.53 136.455 cv
cp
212.53 136.455 mo
211.53 136.455 li
210.978 136.455 210.53 136.902 210.53 137.455 cv
210.53 138.007 210.978 138.455 211.53 138.455 cv
212.53 138.455 li
213.082 138.455 213.53 138.007 213.53 137.455 cv
213.53 136.902 213.082 136.455 212.53 136.455 cv
cp
206.53 136.455 mo
205.53 136.455 li
204.978 136.455 204.53 136.902 204.53 137.455 cv
204.53 138.007 204.978 138.455 205.53 138.455 cv
206.53 138.455 li
207.082 138.455 207.53 138.007 207.53 137.455 cv
207.53 136.902 207.082 136.455 206.53 136.455 cv
cp
200.53 136.455 mo
199.53 136.455 li
198.978 136.455 198.53 136.902 198.53 137.455 cv
198.53 138.007 198.978 138.455 199.53 138.455 cv
200.53 138.455 li
201.082 138.455 201.53 138.007 201.53 137.455 cv
201.53 136.902 201.082 136.455 200.53 136.455 cv
cp
194.53 136.455 mo
193.53 136.455 li
192.978 136.455 192.53 136.902 192.53 137.455 cv
192.53 138.007 192.978 138.455 193.53 138.455 cv
194.53 138.455 li
195.082 138.455 195.53 138.007 195.53 137.455 cv
195.53 136.902 195.082 136.455 194.53 136.455 cv
cp
188.53 136.455 mo
187.53 136.455 li
186.978 136.455 186.53 136.902 186.53 137.455 cv
186.53 138.007 186.978 138.455 187.53 138.455 cv
188.53 138.455 li
189.082 138.455 189.53 138.007 189.53 137.455 cv
189.53 136.902 189.082 136.455 188.53 136.455 cv
cp
182.53 136.455 mo
181.831 136.455 li
181.532 136.455 181.237 136.438 180.947 136.404 cv
180.398 136.342 179.903 136.736 179.84 137.285 cv
179.777 137.833 180.172 138.329 180.72 138.392 cv
181.085 138.433 181.456 138.455 181.831 138.455 cv
182.53 138.455 li
183.083 138.455 183.53 138.007 183.53 137.455 cv
183.53 136.902 183.083 136.455 182.53 136.455 cv
cp
.694118 .698039 .952941 rgb
f
182.546 135.465 mo
178.756 135.465 175.673 132.381 175.673 128.591 cv
175.673 106.293 li
175.673 102.503 178.756 99.4194 182.546 99.4194 cv
317.454 99.4194 li
321.244 99.4194 324.327 102.503 324.327 106.293 cv
324.327 128.591 li
324.327 132.381 321.244 135.465 317.454 135.465 cv
182.546 135.465 li
cp
level3{
gsave
clp
[50.2544 87.0432 -87.0432 50.2544 224.873 73.9205 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[50.2544 87.0432 -87.0432 50.2544 224.873 73.9205 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
.976471 .984314 .988235 rgb
%%IncludeResource: font Oswald-ExtraLight
/QRCIQH+Oswald-ExtraLight /Oswald-ExtraLight findfont ct_VMDictPut
/QRCIQH+Oswald-ExtraLight*1 
[32{/.notdef}rp /space 36{/.notdef}rp /E 6{/.notdef}rp /L /M /.notdef 
/O 2{/.notdef}rp /R /S /T 171{/.notdef}rp]
QRCIQH+Oswald-ExtraLight nf
QRCIQH+Oswald-ExtraLight*1 [26.6174 0 0 -26.6174 0 0 ]msf
185.322 129.014 mo
(LOREM )sh
254.816 129.014 mo
(STORE)sh
300.402 148.231 mo
308.169 148.231 li
308.169 140.465 li
300.402 140.465 li
300.402 148.231 li
cp
level3{
gsave
clp
[5.30473 9.18806 -9.18806 5.30473 301.633 139.754 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.30473 9.18806 -9.18806 5.30473 301.633 139.754 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
191.831 148.231 mo
199.598 148.231 li
199.598 140.465 li
191.831 140.465 li
191.831 148.231 li
cp
level3{
gsave
clp
[5.30473 9.18806 -9.18806 5.30473 193.062 139.754 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.30473 9.18806 -9.18806 5.30473 193.062 139.754 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
411.633 144.348 mo
411.633 153.727 li
405.322 153.727 li
94.6782 153.727 li
88.3667 153.727 li
88.3667 144.348 li
411.633 144.348 li
cp
.694118 .698039 .952941 rgb
f
405.322 153.727 mo
405.322 164.729 li
94.6783 164.729 li
94.6783 153.727 li
405.322 153.727 li
.376471 .419608 .945098 rgb
f
405.322 156.931 mo
94.6783 156.931 li
94.6783 153.727 li
405.322 153.727 li
405.322 156.931 li
.309804 .34902 .784314 rgb
f
405.322 170.225 mo
405.322 181.217 li
374.257 181.217 li
343.193 181.217 li
312.129 181.217 li
281.064 181.217 li
250 181.217 li
218.936 181.217 li
187.871 181.217 li
156.807 181.217 li
125.743 181.217 li
94.6782 181.217 li
94.6782 170.225 li
405.322 170.225 li
cp
.376471 .419608 .945098 rgb
f
402.586 170.225 mo
359.214 170.225 li
97.4136 170.225 li
97.4136 164.729 li
360.15 164.729 li
402.586 164.729 li
97.4136 164.729 li
97.4136 166.345 li
402.586 166.345 li
402.586 167.771 li
402.586 170.225 li
level3{
gsave
clp
[78.6729 136.265 -136.265 78.6729 210.664 99.3447 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.937255 .811765 .392157 ]
/C1 [.964706 .654902 .372549 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[78.6729 136.265 -136.265 78.6729 210.664 99.3447 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*oi9nF5r:nF5r:nF5r:nF5r:nF5r:nF5r:
nF5r:nF5r:nF5u<naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ2@o()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ACoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSGo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJp%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"N
~>
<~cd'h]cHa_[c-=MXc-4DUbfn;TbKJ)PbKJ&Nb0%lLb/qcIaiVZGaN2HDaN)?Aa2c6@`l?$<`l?!:`Pog8
`Pf^5`5KU3_o'C0_ns:-_SX1,_83t(_83q&^qdb$^q[Y!^V@Ot^:q=q^:h4n]tM+m]Y(ni]Y(kg]=Y\e
]=PSb]"5J`\[f8]\[]/Z\@B&Y\$riU\$rfS[^NWQ[^ENN[C*EL['[3I['R*FZa7!EZEgdAZEga?Z*CR=
Z*:I:Yct@8YHP.5YHG%2Y-+q1Xf\_-Xf\\+XK8M)XK/D&X/i;$WiE)!Wi;tsWMukrW2QYnW2QVlVl-Gj
~>
<~A7K+Z@q0"Y@q0"Y@q0"Y@q0"Y@q0"Y@q0"Y@q0"Y@q0"Y@q0"Y@q0"Y@q0"Y@q0"Y@U`eU@U`eU@U`eU
@U`eU@U`eU@U`eU@U`eU@U`eU@U`eU@U`eU@U`eU@U`eU@U`eT@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<PO?smAM?smAM?smAM?smAM?smAM?smAM?smAM?smAM?smAM
?smAM?smAM?smAM?sd8J?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
402.586 166.345 mo
97.4136 166.345 li
97.4136 164.729 li
402.586 164.729 li
402.586 166.345 li
level3{
gsave
clp
[78.6729 136.265 -136.265 78.6729 210.664 99.3447 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`2chTW`-j9;oG\7`2Q\SWDgd7;oP\5`MZVQVGbC1;T5J1`MHJOV,G=/;T>J0`hQGOU/K"*;T>D-`h?8L
Ti&h&;9#5*`h-,JSl*Lu;9#/(`gfoGS5I:r;9#)&a.#rHRSh+n;9,)%a-]`EQr1nj;9,##a-TZEQ;P_g
;95#"aHTQCP>K>a:rneraHBB@P#08_:s"hracK?@O&3rZ:s"_oac0-=NDIZU:WeYmb)B-=MbhKR:WePj
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[78.6729 136.265 -136.265 78.6729 210.664 99.3447 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~_o'C0_o'C0_o'C0_o'C0_o0L3`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5T^7`Pog8`Pog8
`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Poj:
`l?$<`l?$<`l?$<`l?$<`l?$<`l?$<`l?$<`l?$<`l?$=a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@
a2c6@a2c6@aN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaiVZHaiVZHaiVZHaiVZHaiVZH
~>
<~WiE)!Wi;tsWMukrWMukrWMlboW2QYnW2HPkVl-GjVl$>gVPU,cV5:#bV50o_Unjf^Unjf^Una][US=KW
U8"BVU8"?TTqS0RTqS-PTV.sNTV.sNTV.pLT:_^HSt;OFSt;LDSXl:@S=H+>S=H(<S"#n:S"#n:S"#k8
R[T\6R[T\5R@0J1R$a8.R$a8-Q^=&*Q^=&)QBmi&QBmi&QBmi%Q'IW!Pa%DsPa%DrPEV2nP*1ukP*1uj
OcbcgOcbcgOcbcgOH>QcOH>QcO,o?_NfK-[NfK-[NK&pWN/W^SN/W^SN/W^SN/W^SMi3LOMMd:KMMd:K
~>
<~;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;Gg:g;,L1f;,L1f;,L1f;,L1f;,L1f;,L1f;,L1f;,L1f
;,L1f;,L1f;,L1f;,L.d:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb
:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'ta:JXb^:JXb^
:JXb^:JXb^:JXb^:JXb^:JXb^:JXb^:JXb^:JXb^:JXb^:JXb^:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
374.257 181.217 mo
384.358 209.05 li
350.76 209.05 li
343.193 181.217 li
374.257 181.217 li
cp
.941176 .960784 .968627 rgb
f
125.743 181.217 mo
115.642 209.05 li
82.0552 209.05 li
94.6782 181.217 li
125.743 181.217 li
cp
f
187.871 181.217 mo
182.826 209.05 li
149.239 209.05 li
156.807 181.217 li
187.871 181.217 li
cp
f
250 181.217 mo
250 209.05 li
216.413 209.05 li
218.936 181.217 li
250 181.217 li
cp
f
312.129 181.217 mo
317.174 209.05 li
283.587 209.05 li
281.064 181.217 li
312.129 181.217 li
cp
f
115.642 209.05 mo
115.642 213.451 li
115.642 222.726 108.128 230.239 98.854 230.239 cv
97.4478 230.239 96.0845 230.068 94.7856 229.746 cv
87.4755 227.921 82.0551 221.319 82.0551 213.451 cv
82.0551 209.05 li
115.642 209.05 li
.764706 .827451 .866667 rgb
f
182.826 209.05 mo
182.826 213.451 li
182.826 222.726 175.302 230.239 166.027 230.239 cv
156.753 230.239 149.239 222.726 149.239 213.451 cv
149.239 209.05 li
182.826 209.05 li
f
250 209.05 mo
250 213.451 li
250 222.726 242.486 230.239 233.201 230.239 cv
223.927 230.239 216.413 222.726 216.413 213.451 cv
216.413 209.05 li
250 209.05 li
f
317.174 209.05 mo
317.174 213.451 li
317.174 222.726 309.66 230.239 300.386 230.239 cv
291.111 230.239 283.587 222.726 283.587 213.451 cv
283.587 209.05 li
317.174 209.05 li
f
384.358 209.05 mo
384.358 213.451 li
384.358 222.726 376.833 230.239 367.559 230.239 cv
358.285 230.239 350.76 222.726 350.76 213.451 cv
350.76 209.05 li
384.358 209.05 li
f
405.322 181.217 mo
417.945 209.05 li
384.358 209.05 li
374.257 181.217 li
405.322 181.217 li
cp
.956863 .596078 .596078 rgb
f
343.193 181.217 mo
350.76 209.05 li
317.174 209.05 li
312.129 181.217 li
343.193 181.217 li
cp
f
281.064 181.217 mo
283.587 209.05 li
250 209.05 li
250 181.217 li
281.064 181.217 li
cp
f
218.936 181.217 mo
216.413 209.05 li
182.826 209.05 li
187.871 181.217 li
218.936 181.217 li
cp
f
401.146 230.239 mo
391.872 230.239 384.358 222.726 384.358 213.451 cv
384.358 209.05 li
417.945 209.05 li
417.945 213.451 li
417.945 221.319 412.524 227.921 405.214 229.746 cv
403.916 230.068 402.552 230.239 401.146 230.239 cv
level3{
gsave
clp
[14.4987 25.1124 -25.1124 14.4987 395.025 202.892 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.92549 .509804 .490196 ]
/C1 [.839216 .341176 .470588 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[14.4987 25.1124 -25.1124 14.4987 395.025 202.892 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~m-F!'lg*m&lg*m&lK[["lK[["lK[["l07Hsl07Hsl07Hrkih6okih6okih6nkND$kkND$kkND$jk2tgg
k2tggk2tdejlPUcjlPUcjlPRajQ,C_jQ,C_jQ,@]j5]1[j5]1[j5T(Xio8tWio8tWio/kTiSibSiSibS
iS`YPi8EPOi8EPOhr!>Khr!>Khr!>KhVR,GhVR,GhVR,Fh;-oCh;-oCh;-oBgt^]?gt^]?gt^]>gY:K;
gY:K;gY:H9g=k97g=k97g=k65g"G'3g"G'3g"G$1f\"j/f\"j/f[na,f@SX+f@SX+f@JO(f%/F'f%/F'
~>
<~Jq8K(JUr?%J:N0#It)rtIt)orIXZ`pI=6NlI=6KjI!g<hH[C*dH[C'bH?sm`H$O[\H$OXZG^+IXGB\7T
GB\4RG'8%PF`hhLF`heJFEDVHF)uDDF)uABEcQ2@EH,u<EH,r:E,]c8Df9Q4Df9N2DJj?0D/F-,D/F**
Ci!p'CMR^$CMIU!C2.KtBk_9qBkV0nBP;'lB4kjiB4bafAnGXdAS#FaARo=^A7T4\@q0"Y@q&nV@U`eT
@:<SQ@:3JN?smAL?XI/I?X@&F?=$rD?!U`A?!LW>>[1N<>?b<9>?Y36>$>*4=]nm1=]ed.=BJ[,='&I)
~>
<~I=-EiI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hH[C*dH[C*dH[C*d
H[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*cH?sm`H?sm`H?sm`H?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sj^H$O[\H$O[\H$O[\H$O[\H$O[\H$O[\H$O[\H$O[\H$O[\
H$O[\H$O[\H$O[\H$FRYG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IX
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
187.292 350.343 mo
187.292 342.851 li
182.826 342.851 li
182.826 242.379 li
187.292 242.379 li
187.292 234.887 li
104.285 234.887 li
104.285 242.379 li
108.75 242.379 li
108.75 342.851 li
104.285 342.851 li
104.285 350.343 li
187.292 350.343 li
395.715 350.343 mo
395.715 342.851 li
391.249 342.851 li
391.249 242.379 li
395.715 242.379 li
395.715 234.887 li
312.708 234.887 li
312.708 242.379 li
317.174 242.379 li
317.174 342.851 li
312.708 342.851 li
312.708 350.343 li
395.715 350.343 li
405.322 230.239 mo
405.322 388.384 li
300.386 388.384 li
300.386 242.379 li
303.938 242.379 li
303.938 234.887 li
196.062 234.887 li
196.062 242.379 li
199.614 242.379 li
199.614 388.384 li
94.6783 388.384 li
94.6783 230.239 li
94.7856 229.746 li
96.0845 230.068 97.4478 230.239 98.854 230.239 cv
108.128 230.239 115.642 222.726 115.642 213.451 cv
115.642 222.726 123.167 230.239 132.441 230.239 cv
141.715 230.239 149.239 222.726 149.239 213.451 cv
149.239 222.726 156.753 230.239 166.027 230.239 cv
175.302 230.239 182.826 222.726 182.826 213.451 cv
182.826 222.726 190.34 230.239 199.614 230.239 cv
208.889 230.239 216.413 222.726 216.413 213.451 cv
216.413 222.726 223.927 230.239 233.201 230.239 cv
242.486 230.239 250 222.726 250 213.451 cv
250 222.726 257.514 230.239 266.799 230.239 cv
276.073 230.239 283.587 222.726 283.587 213.451 cv
283.587 222.726 291.111 230.239 300.386 230.239 cv
309.66 230.239 317.174 222.726 317.174 213.451 cv
317.174 222.726 324.698 230.239 333.973 230.239 cv
343.247 230.239 350.76 222.726 350.76 213.451 cv
350.76 222.726 358.285 230.239 367.559 230.239 cv
376.833 230.239 384.358 222.726 384.358 213.451 cv
384.358 222.726 391.872 230.239 401.146 230.239 cv
402.552 230.239 403.916 230.068 405.214 229.746 cv
405.322 230.239 li
.376471 .419608 .945098 rgb
f
gsave
187.292 350.343 mo
187.292 342.851 li
182.826 342.851 li
182.826 242.379 li
187.292 242.379 li
187.292 234.887 li
104.285 234.887 li
104.285 242.379 li
108.75 242.379 li
108.75 342.851 li
104.285 342.851 li
104.285 350.343 li
187.292 350.343 li
395.715 350.343 mo
395.715 342.851 li
391.249 342.851 li
391.249 242.379 li
395.715 242.379 li
395.715 234.887 li
312.708 234.887 li
312.708 242.379 li
317.174 242.379 li
317.174 342.851 li
312.708 342.851 li
312.708 350.343 li
395.715 350.343 li
405.322 230.239 mo
405.322 388.384 li
300.386 388.384 li
300.386 242.379 li
303.938 242.379 li
303.938 234.887 li
196.062 234.887 li
196.062 242.379 li
199.614 242.379 li
199.614 388.384 li
94.6783 388.384 li
94.6783 230.239 li
94.7856 229.746 li
96.0845 230.068 97.4478 230.239 98.854 230.239 cv
108.128 230.239 115.642 222.726 115.642 213.451 cv
115.642 222.726 123.167 230.239 132.441 230.239 cv
141.715 230.239 149.239 222.726 149.239 213.451 cv
149.239 222.726 156.753 230.239 166.027 230.239 cv
175.302 230.239 182.826 222.726 182.826 213.451 cv
182.826 222.726 190.34 230.239 199.614 230.239 cv
208.889 230.239 216.413 222.726 216.413 213.451 cv
216.413 222.726 223.927 230.239 233.201 230.239 cv
242.486 230.239 250 222.726 250 213.451 cv
250 222.726 257.514 230.239 266.799 230.239 cv
276.073 230.239 283.587 222.726 283.587 213.451 cv
283.587 222.726 291.111 230.239 300.386 230.239 cv
309.66 230.239 317.174 222.726 317.174 213.451 cv
317.174 222.726 324.698 230.239 333.973 230.239 cv
343.247 230.239 350.76 222.726 350.76 213.451 cv
350.76 222.726 358.285 230.239 367.559 230.239 cv
376.833 230.239 384.358 222.726 384.358 213.451 cv
384.358 222.726 391.872 230.239 401.146 230.239 cv
402.552 230.239 403.916 230.068 405.214 229.746 cv
405.322 230.239 li
clp
gsave
70.9999 426 mo
143 426 li
143 354 li
70.9999 354 li
70.9999 426 li
clp
143 379.56 mo
94.6783 379.56 li
94.6783 378.84 li
142.75 378.84 li
143 378.84 li
143 379.56 li
.333333 .384314 .905882 rgb
f
143 365.16 mo
94.6783 365.16 li
94.6783 364.44 li
142.75 364.44 li
143 364.44 li
143 365.16 li
f
143 386.76 mo
94.6783 386.76 li
94.6783 386.04 li
142.75 386.04 li
143 386.04 li
143 386.76 li
f
143 372.36 mo
94.6783 372.36 li
94.6783 371.64 li
142.75 371.64 li
143 371.64 li
143 372.36 li
f
143 357.96 mo
94.6783 357.96 li
94.6783 357.24 li
142.75 357.24 li
143 357.24 li
143 357.96 li
f
grestore
gsave
143 426 mo
215 426 li
215 354 li
143 354 li
143 426 li
clp
199.614 379.56 mo
143.25 379.56 li
143.25 378.84 li
143 378.84 li
199.614 378.84 li
199.614 379.56 li
.333333 .384314 .905882 rgb
f
199.614 365.16 mo
143.25 365.16 li
143.25 364.44 li
143 364.44 li
199.614 364.44 li
199.614 365.16 li
f
199.614 386.76 mo
143.25 386.76 li
143.25 386.04 li
143 386.04 li
199.614 386.04 li
199.614 386.76 li
f
199.614 372.36 mo
143.25 372.36 li
143.25 371.64 li
143 371.64 li
199.614 371.64 li
199.614 372.36 li
f
199.614 357.96 mo
143.25 357.96 li
143.25 357.24 li
143 357.24 li
199.614 357.24 li
199.614 357.96 li
f
143.25 379.56 mo
143 379.56 li
143 378.84 li
143.25 378.84 li
143.25 379.56 li
f
143.25 365.16 mo
143 365.16 li
143 364.44 li
143.25 364.44 li
143.25 365.16 li
f
143.25 386.76 mo
143 386.76 li
143 386.04 li
143.25 386.04 li
143.25 386.76 li
f
143.25 372.36 mo
143 372.36 li
143 371.64 li
143.25 371.64 li
143.25 372.36 li
f
143.25 357.96 mo
143 357.96 li
143 357.24 li
143.25 357.24 li
143.25 357.96 li
f
grestore
gsave
287 426 mo
359 426 li
359 354 li
287 354 li
287 426 li
clp
359 379.56 mo
300.386 379.56 li
300.386 378.84 li
358.75 378.84 li
359 378.84 li
359 379.56 li
.333333 .384314 .905882 rgb
f
359 365.16 mo
300.386 365.16 li
300.386 364.44 li
358.75 364.44 li
359 364.44 li
359 365.16 li
f
359 386.76 mo
300.386 386.76 li
300.386 386.04 li
358.75 386.04 li
359 386.04 li
359 386.76 li
f
359 372.36 mo
300.386 372.36 li
300.386 371.64 li
358.75 371.64 li
359 371.64 li
359 372.36 li
f
359 357.96 mo
300.386 357.96 li
300.386 357.24 li
358.75 357.24 li
359 357.24 li
359 357.96 li
f
grestore
gsave
359 426 mo
431 426 li
431 354 li
359 354 li
359 426 li
clp
405.322 379.56 mo
359.25 379.56 li
359.25 378.84 li
359 378.84 li
405.322 378.84 li
405.322 379.56 li
.333333 .384314 .905882 rgb
f
405.322 365.16 mo
359.25 365.16 li
359.25 364.44 li
359 364.44 li
405.322 364.44 li
405.322 365.16 li
f
405.322 386.76 mo
359.25 386.76 li
359.25 386.04 li
359 386.04 li
405.322 386.04 li
405.322 386.76 li
f
405.322 372.36 mo
359.25 372.36 li
359.25 371.64 li
359 371.64 li
405.322 371.64 li
405.322 372.36 li
f
405.322 357.96 mo
359.25 357.96 li
359.25 357.24 li
359 357.24 li
405.322 357.24 li
405.322 357.96 li
f
359.25 379.56 mo
359 379.56 li
359 378.84 li
359.25 378.84 li
359.25 379.56 li
f
359.25 365.16 mo
359 365.16 li
359 364.44 li
359.25 364.44 li
359.25 365.16 li
f
359.25 386.76 mo
359 386.76 li
359 386.04 li
359.25 386.04 li
359.25 386.76 li
f
359.25 372.36 mo
359 372.36 li
359 371.64 li
359.25 371.64 li
359.25 372.36 li
f
359.25 357.96 mo
359 357.96 li
359 357.24 li
359.25 357.24 li
359.25 357.96 li
f
grestore
gsave
70.9999 354 mo
143 354 li
143 282 li
70.9999 282 li
70.9999 354 li
clp
104.285 350.759 mo
94.6783 350.759 li
94.6783 350.039 li
104.285 350.039 li
104.285 350.343 li
104.285 350.759 li
.333333 .384314 .905882 rgb
f
108.75 336.36 mo
94.6783 336.36 li
94.6783 335.64 li
108.75 335.64 li
108.75 336.36 li
f
108.75 321.96 mo
94.6783 321.96 li
94.6783 321.24 li
108.75 321.24 li
108.75 321.96 li
f
108.75 307.56 mo
94.6783 307.56 li
94.6783 306.84 li
108.75 306.84 li
108.75 307.56 li
f
108.75 293.16 mo
94.6783 293.16 li
94.6783 292.44 li
108.75 292.44 li
108.75 293.16 li
f
104.285 343.56 mo
94.6783 343.56 li
94.6783 342.84 li
108.75 342.84 li
108.75 342.851 li
104.285 342.851 li
104.285 343.56 li
f
108.75 329.16 mo
94.6783 329.16 li
94.6783 328.44 li
108.75 328.44 li
108.75 329.16 li
f
108.75 314.76 mo
94.6783 314.76 li
94.6783 314.04 li
108.75 314.04 li
108.75 314.76 li
f
108.75 300.36 mo
94.6783 300.36 li
94.6783 299.64 li
108.75 299.64 li
108.75 300.36 li
f
108.75 285.96 mo
94.6783 285.96 li
94.6783 285.24 li
108.75 285.24 li
108.75 285.96 li
f
grestore
gsave
143 354 mo
215 354 li
215 282 li
143 282 li
143 354 li
clp
199.614 350.759 mo
187.292 350.759 li
187.292 350.039 li
199.614 350.039 li
199.614 350.759 li
.333333 .384314 .905882 rgb
f
199.614 336.36 mo
182.826 336.36 li
182.826 335.64 li
199.614 335.64 li
199.614 336.36 li
f
199.614 321.96 mo
182.826 321.96 li
182.826 321.24 li
199.614 321.24 li
199.614 321.96 li
f
199.614 307.56 mo
182.826 307.56 li
182.826 306.84 li
199.614 306.84 li
199.614 307.56 li
f
199.614 293.16 mo
182.826 293.16 li
182.826 292.44 li
199.614 292.44 li
199.614 293.16 li
f
199.614 343.56 mo
187.292 343.56 li
187.292 342.851 li
182.826 342.851 li
182.826 342.84 li
199.614 342.84 li
199.614 343.56 li
f
199.614 329.16 mo
182.826 329.16 li
182.826 328.44 li
199.614 328.44 li
199.614 329.16 li
f
199.614 314.76 mo
182.826 314.76 li
182.826 314.04 li
199.614 314.04 li
199.614 314.76 li
f
199.614 300.36 mo
182.826 300.36 li
182.826 299.64 li
199.614 299.64 li
199.614 300.36 li
f
199.614 285.96 mo
182.826 285.96 li
182.826 285.24 li
199.614 285.24 li
199.614 285.96 li
f
grestore
gsave
287 354 mo
359 354 li
359 282 li
287 282 li
287 354 li
clp
312.708 350.759 mo
300.386 350.759 li
300.386 350.039 li
312.708 350.039 li
312.708 350.343 li
312.708 350.759 li
.333333 .384314 .905882 rgb
f
317.174 336.36 mo
300.386 336.36 li
300.386 335.64 li
317.174 335.64 li
317.174 336.36 li
f
317.174 321.96 mo
300.386 321.96 li
300.386 321.24 li
317.174 321.24 li
317.174 321.96 li
f
317.174 307.56 mo
300.386 307.56 li
300.386 306.84 li
317.174 306.84 li
317.174 307.56 li
f
317.174 293.16 mo
300.386 293.16 li
300.386 292.44 li
317.174 292.44 li
317.174 293.16 li
f
312.708 343.56 mo
300.386 343.56 li
300.386 342.84 li
317.174 342.84 li
317.174 342.851 li
312.708 342.851 li
312.708 343.56 li
f
317.174 329.16 mo
300.386 329.16 li
300.386 328.44 li
317.174 328.44 li
317.174 329.16 li
f
317.174 314.76 mo
300.386 314.76 li
300.386 314.04 li
317.174 314.04 li
317.174 314.76 li
f
317.174 300.36 mo
300.386 300.36 li
300.386 299.64 li
317.174 299.64 li
317.174 300.36 li
f
317.174 285.96 mo
300.386 285.96 li
300.386 285.24 li
317.174 285.24 li
317.174 285.96 li
f
grestore
gsave
359 354 mo
431 354 li
431 282 li
359 282 li
359 354 li
clp
405.322 350.759 mo
395.715 350.759 li
395.715 350.039 li
405.322 350.039 li
405.322 350.759 li
.333333 .384314 .905882 rgb
f
405.322 336.36 mo
391.249 336.36 li
391.249 335.64 li
405.322 335.64 li
405.322 336.36 li
f
405.322 321.96 mo
391.249 321.96 li
391.249 321.24 li
405.322 321.24 li
405.322 321.96 li
f
405.322 307.56 mo
391.249 307.56 li
391.249 306.84 li
405.322 306.84 li
405.322 307.56 li
f
405.322 293.16 mo
391.249 293.16 li
391.249 292.44 li
405.322 292.44 li
405.322 293.16 li
f
405.322 343.56 mo
395.715 343.56 li
395.715 342.851 li
391.249 342.851 li
391.249 342.84 li
405.322 342.84 li
405.322 343.56 li
f
405.322 329.16 mo
391.249 329.16 li
391.249 328.44 li
405.322 328.44 li
405.322 329.16 li
f
405.322 314.76 mo
391.249 314.76 li
391.249 314.04 li
405.322 314.04 li
405.322 314.76 li
f
405.322 300.36 mo
391.249 300.36 li
391.249 299.64 li
405.322 299.64 li
405.322 300.36 li
f
405.322 285.96 mo
391.249 285.96 li
391.249 285.24 li
405.322 285.24 li
405.322 285.96 li
f
grestore
gsave
70.9999 282 mo
143 282 li
143 210 li
70.9999 210 li
70.9999 282 li
clp
108.75 278.759 mo
94.6783 278.759 li
94.6783 278.039 li
108.75 278.039 li
108.75 278.759 li
.333333 .384314 .905882 rgb
f
108.75 264.36 mo
94.6783 264.36 li
94.6783 263.64 li
108.75 263.64 li
108.75 264.36 li
f
108.75 249.961 mo
94.6783 249.961 li
94.6783 249.241 li
108.75 249.241 li
108.75 249.961 li
f
104.285 235.56 mo
94.6783 235.56 li
94.6783 234.84 li
142.75 234.84 li
143 234.84 li
143 234.887 li
104.285 234.887 li
104.285 235.56 li
f
117.514 221.16 mo
113.773 221.16 li
113.895 220.923 114.012 220.683 114.124 220.44 cv
117.162 220.44 li
117.274 220.683 117.391 220.923 117.514 221.16 cv
f
108.75 271.56 mo
94.6783 271.56 li
94.6783 270.84 li
108.75 270.84 li
108.75 271.56 li
f
108.75 257.16 mo
94.6783 257.16 li
94.6783 256.44 li
108.75 256.44 li
108.75 257.16 li
f
108.75 242.76 mo
94.6783 242.76 li
94.6783 242.04 li
104.285 242.04 li
104.285 242.379 li
108.75 242.379 li
108.75 242.76 li
f
143 228.36 mo
140.171 228.36 li
140.599 228.138 141.017 227.897 141.423 227.64 cv
142.75 227.64 li
143 227.64 li
143 228.36 li
124.711 228.36 mo
106.581 228.36 li
107.01 228.138 107.427 227.897 107.833 227.64 cv
123.458 227.64 li
123.865 227.897 124.282 228.138 124.711 228.36 cv
f
115.65 213.961 mo
115.634 213.961 li
115.639 213.791 115.642 213.622 115.642 213.451 cv
115.642 213.622 115.645 213.791 115.65 213.961 cv
f
grestore
gsave
143 282 mo
215 282 li
215 210 li
143 210 li
143 282 li
clp
199.614 278.759 mo
182.826 278.759 li
182.826 278.039 li
199.614 278.039 li
199.614 278.759 li
.333333 .384314 .905882 rgb
f
199.614 264.36 mo
182.826 264.36 li
182.826 263.64 li
199.614 263.64 li
199.614 264.36 li
f
199.614 249.961 mo
182.826 249.961 li
182.826 249.241 li
199.614 249.241 li
199.614 249.961 li
f
196.062 235.56 mo
187.292 235.56 li
187.292 234.887 li
143.25 234.887 li
143.25 234.84 li
143 234.84 li
214.75 234.84 li
215 234.84 li
215 234.887 li
196.062 234.887 li
196.062 235.56 li
f
215 221.16 mo
214.541 221.16 li
214.664 220.923 214.781 220.683 214.893 220.44 cv
215 220.44 li
215 221.16 li
184.696 221.16 mo
180.954 221.16 li
181.077 220.923 181.194 220.683 181.306 220.44 cv
184.345 220.44 li
184.456 220.683 184.573 220.923 184.696 221.16 cv
151.109 221.16 mo
147.368 221.16 li
147.49 220.923 147.607 220.683 147.719 220.44 cv
150.758 220.44 li
150.869 220.683 150.986 220.923 151.109 221.16 cv
f
199.614 271.56 mo
182.826 271.56 li
182.826 270.84 li
199.614 270.84 li
199.614 271.56 li
f
199.614 257.16 mo
182.826 257.16 li
182.826 256.44 li
199.614 256.44 li
199.614 257.16 li
f
199.614 242.76 mo
182.826 242.76 li
182.826 242.379 li
187.292 242.379 li
187.292 242.04 li
196.062 242.04 li
196.062 242.379 li
199.614 242.379 li
199.614 242.76 li
f
215 228.36 mo
207.344 228.36 li
207.773 228.138 208.191 227.897 208.597 227.64 cv
214.75 227.64 li
215 227.64 li
215 228.36 li
191.887 228.36 mo
173.757 228.36 li
174.186 228.138 174.604 227.897 175.01 227.64 cv
190.635 227.64 li
191.041 227.897 191.458 228.138 191.887 228.36 cv
158.3 228.36 mo
143.25 228.36 li
143.25 227.64 li
143 227.64 li
157.048 227.64 li
157.454 227.897 157.871 228.138 158.3 228.36 cv
f
182.834 213.961 mo
182.819 213.961 li
182.824 213.791 182.826 213.622 182.826 213.451 cv
182.826 213.622 182.829 213.791 182.834 213.961 cv
149.247 213.961 mo
149.232 213.961 li
149.237 213.791 149.239 213.622 149.239 213.451 cv
149.239 213.622 149.242 213.791 149.247 213.961 cv
f
143.25 234.887 mo
143 234.887 li
143 234.84 li
143.25 234.84 li
143.25 234.887 li
f
143.25 228.36 mo
143 228.36 li
143 227.64 li
143.25 227.64 li
143.25 228.36 li
f
grestore
gsave
215 282 mo
287 282 li
287 210 li
215 210 li
215 282 li
clp
287 234.887 mo
215.25 234.887 li
215.25 234.84 li
215 234.84 li
286.75 234.84 li
287 234.84 li
287 234.887 li
.333333 .384314 .905882 rgb
f
285.459 221.16 mo
281.717 221.16 li
281.84 220.923 281.957 220.683 282.069 220.44 cv
285.107 220.44 li
285.219 220.683 285.336 220.923 285.459 221.16 cv
251.87 221.16 mo
248.13 221.16 li
248.253 220.923 248.37 220.683 248.481 220.44 cv
251.519 220.44 li
251.63 220.683 251.747 220.923 251.87 221.16 cv
218.283 221.16 mo
215.25 221.16 li
215.25 220.44 li
215 220.44 li
217.931 220.44 li
218.043 220.683 218.16 220.923 218.283 221.16 cv
f
287 228.36 mo
274.526 228.36 li
274.955 228.138 275.372 227.897 275.778 227.64 cv
286.75 227.64 li
287 227.64 li
287 228.36 li
259.064 228.36 mo
240.936 228.36 li
241.365 228.138 241.782 227.897 242.188 227.64 cv
257.812 227.64 li
258.218 227.897 258.635 228.138 259.064 228.36 cv
225.474 228.36 mo
215.25 228.36 li
215.25 227.64 li
215 227.64 li
224.222 227.64 li
224.628 227.897 225.045 228.138 225.474 228.36 cv
f
283.595 213.961 mo
283.579 213.961 li
283.584 213.791 283.587 213.622 283.587 213.451 cv
283.587 213.622 283.589 213.791 283.595 213.961 cv
250.008 213.961 mo
249.992 213.961 li
249.997 213.791 250 213.622 250 213.451 cv
250 213.622 250.003 213.791 250.008 213.961 cv
216.421 213.961 mo
216.406 213.961 li
216.411 213.791 216.413 213.622 216.413 213.451 cv
216.413 213.622 216.416 213.791 216.421 213.961 cv
f
215.25 234.887 mo
215 234.887 li
215 234.84 li
215.25 234.84 li
215.25 234.887 li
f
215.25 221.16 mo
215 221.16 li
215 220.44 li
215.25 220.44 li
215.25 221.16 li
f
215.25 228.36 mo
215 228.36 li
215 227.64 li
215.25 227.64 li
215.25 228.36 li
f
grestore
gsave
287 282 mo
359 282 li
359 210 li
287 210 li
287 282 li
clp
317.174 278.759 mo
300.386 278.759 li
300.386 278.039 li
317.174 278.039 li
317.174 278.759 li
.333333 .384314 .905882 rgb
f
317.174 264.36 mo
300.386 264.36 li
300.386 263.64 li
317.174 263.64 li
317.174 264.36 li
f
317.174 249.961 mo
300.386 249.961 li
300.386 249.241 li
317.174 249.241 li
317.174 249.961 li
f
312.708 235.56 mo
303.938 235.56 li
303.938 234.887 li
287.25 234.887 li
287.25 234.84 li
287 234.84 li
358.75 234.84 li
359 234.84 li
359 234.887 li
312.708 234.887 li
312.708 235.56 li
f
352.632 221.16 mo
348.891 221.16 li
349.014 220.923 349.13 220.683 349.242 220.44 cv
352.281 220.44 li
352.392 220.683 352.509 220.923 352.632 221.16 cv
319.046 221.16 mo
315.304 221.16 li
315.427 220.923 315.544 220.683 315.655 220.44 cv
318.694 220.44 li
318.806 220.683 318.923 220.923 319.046 221.16 cv
f
317.174 271.56 mo
300.386 271.56 li
300.386 270.84 li
317.174 270.84 li
317.174 271.56 li
f
317.174 257.16 mo
300.386 257.16 li
300.386 256.44 li
317.174 256.44 li
317.174 257.16 li
f
317.174 242.76 mo
300.386 242.76 li
300.386 242.379 li
303.938 242.379 li
303.938 242.04 li
312.708 242.04 li
312.708 242.379 li
317.174 242.379 li
317.174 242.76 li
f
359 228.36 mo
341.7 228.36 li
342.128 228.138 342.546 227.897 342.952 227.64 cv
358.577 227.64 li
358.717 227.729 358.857 227.815 359 227.899 cv
359 228.36 li
326.243 228.36 mo
308.113 228.36 li
308.542 228.138 308.959 227.897 309.365 227.64 cv
324.99 227.64 li
325.396 227.897 325.814 228.138 326.243 228.36 cv
292.656 228.36 mo
287.25 228.36 li
287.25 227.64 li
287 227.64 li
291.403 227.64 li
291.809 227.897 292.227 228.138 292.656 228.36 cv
f
350.768 213.961 mo
350.753 213.961 li
350.758 213.791 350.76 213.622 350.76 213.451 cv
350.76 213.622 350.763 213.791 350.768 213.961 cv
317.181 213.961 mo
317.166 213.961 li
317.171 213.791 317.174 213.622 317.174 213.451 cv
317.174 213.622 317.176 213.791 317.181 213.961 cv
f
287.25 234.887 mo
287 234.887 li
287 234.84 li
287.25 234.84 li
287.25 234.887 li
f
287.25 228.36 mo
287 228.36 li
287 227.64 li
287.25 227.64 li
287.25 228.36 li
f
grestore
gsave
359 282 mo
431 282 li
431 210 li
359 210 li
359 282 li
clp
405.322 278.759 mo
391.249 278.759 li
391.249 278.039 li
405.322 278.039 li
405.322 278.759 li
.333333 .384314 .905882 rgb
f
405.322 264.36 mo
391.249 264.36 li
391.249 263.64 li
405.322 263.64 li
405.322 264.36 li
f
405.322 249.961 mo
391.249 249.961 li
391.249 249.241 li
405.322 249.241 li
405.322 249.961 li
f
405.322 235.56 mo
395.715 235.56 li
395.715 234.887 li
359.25 234.887 li
359.25 234.84 li
359 234.84 li
405.322 234.84 li
405.322 235.56 li
f
386.227 221.16 mo
382.486 221.16 li
382.609 220.923 382.726 220.683 382.838 220.44 cv
385.876 220.44 li
385.988 220.683 386.105 220.923 386.227 221.16 cv
f
405.322 271.56 mo
391.249 271.56 li
391.249 270.84 li
405.322 270.84 li
405.322 271.56 li
f
405.322 257.16 mo
391.249 257.16 li
391.249 256.44 li
405.322 256.44 li
405.322 257.16 li
f
405.322 242.76 mo
391.249 242.76 li
391.249 242.379 li
395.715 242.379 li
395.715 242.04 li
405.322 242.04 li
405.322 242.76 li
f
393.419 228.36 mo
375.289 228.36 li
375.718 228.138 376.135 227.897 376.542 227.64 cv
392.167 227.64 li
392.573 227.897 392.99 228.138 393.419 228.36 cv
359.829 228.36 mo
359.25 228.36 li
359.25 228.045 li
359.441 228.154 359.634 228.259 359.829 228.36 cv
f
384.365 213.961 mo
384.35 213.961 li
384.355 213.791 384.358 213.622 384.358 213.451 cv
384.358 213.622 384.36 213.791 384.365 213.961 cv
f
359.25 234.887 mo
359 234.887 li
359 234.84 li
359.25 234.84 li
359.25 234.887 li
f
359.25 228.36 mo
359 228.36 li
359 227.899 li
359.083 227.948 359.167 227.997 359.25 228.045 cv
359.25 228.36 li
f
grestore
grestore
187.292 350.343 mo
104.285 350.343 li
104.285 346.597 li
108.75 346.597 li
182.826 346.597 li
187.292 346.597 li
187.292 350.343 li
.705882 .752941 .780392 rgb
f
187.292 354.089 mo
104.285 354.089 li
104.285 350.759 li
143 350.759 li
143 350.343 li
104.285 350.343 li
187.292 350.343 li
187.292 346.597 li
187.292 350.039 li
187.292 350.343 li
143.25 350.343 li
143 350.343 li
143 350.759 li
143.25 350.759 li
187.292 350.759 li
187.292 354.089 li
.309804 .34902 .784314 rgb
f
143 350.759 mo
104.285 350.759 li
104.285 350.343 li
143 350.343 li
143 350.759 li
.27451 .317647 .752941 rgb
f
187.292 350.759 mo
143.25 350.759 li
143.25 350.343 li
187.292 350.343 li
187.292 350.039 li
187.292 350.759 li
f
143.25 350.759 mo
143 350.759 li
143 350.343 li
143.25 350.343 li
143.25 350.759 li
f
395.715 350.343 mo
312.708 350.343 li
312.708 346.597 li
317.174 346.597 li
391.249 346.597 li
395.715 346.597 li
395.715 350.343 li
.705882 .752941 .780392 rgb
f
395.715 354.089 mo
312.708 354.089 li
312.708 350.759 li
359 350.759 li
359 350.343 li
312.708 350.343 li
395.715 350.343 li
395.715 346.597 li
395.715 350.039 li
395.715 350.343 li
359.25 350.343 li
359 350.343 li
359 350.759 li
359.25 350.759 li
395.715 350.759 li
395.715 354.089 li
.309804 .34902 .784314 rgb
f
359 350.759 mo
312.708 350.759 li
312.708 350.343 li
359 350.343 li
359 350.759 li
.27451 .317647 .752941 rgb
f
395.715 350.759 mo
359.25 350.759 li
359.25 350.343 li
395.715 350.343 li
395.715 350.039 li
395.715 350.759 li
f
359.25 350.759 mo
359 350.759 li
359 350.343 li
359.25 350.343 li
359.25 350.759 li
f
187.292 342.851 mo
187.292 350.343 li
104.285 350.343 li
104.285 342.851 li
108.75 342.851 li
182.826 342.851 li
187.292 342.851 li
cp
.529412 .54902 .941176 rgb
f
395.715 342.851 mo
395.715 350.343 li
312.708 350.343 li
312.708 342.851 li
317.174 342.851 li
391.25 342.851 li
395.715 342.851 li
cp
f
383.735 335.337 mo
383.735 249.894 li
324.688 249.894 li
324.688 335.337 li
383.735 335.337 li
391.249 242.379 mo
391.249 342.851 li
317.174 342.851 li
317.174 242.379 li
391.249 242.379 li
.694118 .698039 .952941 rgb
f
324.187 335.837 mo
324.187 249.394 li
384.235 249.394 li
384.235 335.837 li
324.187 335.837 li
.745098 .882353 .956863 rgb
f
gsave
324.187 335.837 mo
324.187 249.394 li
384.235 249.394 li
384.235 335.837 li
324.187 335.837 li
clp
gsave
269.217 414.746 mo
432 414.746 li
432 251.965 li
269.217 251.965 li
269.217 414.746 li
clp
324.688 332.146 mo
324.688 318.58 li
371.448 271.82 li
371.448 285.385 li
335.903 320.931 li
327.931 320.931 li
327.931 328.902 li
324.688 332.146 li
324.688 277.885 mo
324.688 251.965 li
350.607 251.965 li
324.688 277.885 li
383.735 267.666 mo
375.603 267.666 li
383.735 259.533 li
383.735 267.666 li
.772549 .909804 .968627 rgb
f
grestore
gsave
269.217 251.965 mo
432 251.965 li
432 89.1833 li
269.217 89.1833 li
269.217 251.965 li
clp
350.607 251.964 mo
324.688 251.964 li
324.688 249.894 li
352.678 249.894 li
350.607 251.964 li
.772549 .909804 .968627 rgb
f
grestore
grestore
384.735 248.894 mo
383.735 248.894 li
324.688 248.894 li
323.687 248.894 li
323.687 249.894 li
323.687 335.337 li
323.687 336.337 li
324.688 336.337 li
383.735 336.337 li
384.735 336.337 li
384.735 335.337 li
384.735 249.894 li
384.735 248.894 li
383.735 249.894 mo
383.735 335.337 li
324.688 335.337 li
324.688 249.894 li
383.735 249.894 li
.576471 .72549 .776471 rgb
f
350.76 209.05 mo
350.76 213.451 li
350.76 222.726 343.247 230.239 333.973 230.239 cv
324.698 230.239 317.174 222.726 317.174 213.451 cv
317.174 209.05 li
350.76 209.05 li
cp
level3{
gsave
clp
[14.5013 25.117 -25.117 14.5013 327.841 202.891 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[14.5013 25.117 -25.117 14.5013 327.841 202.891 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
207.637 413.09 mo
207.637 249.415 li
292.363 249.415 li
292.363 413.09 li
207.637 413.09 li
.745098 .882353 .956863 rgb
f
gsave
207.637 413.09 mo
207.637 249.415 li
292.363 249.415 li
292.363 413.09 li
207.637 413.09 li
clp
gsave
47.8623 469.849 mo
210.645 469.849 li
210.645 307.067 li
47.8623 307.067 li
47.8623 469.849 li
clp
207.637 391.466 mo
207.637 350.769 li
210.644 347.762 li
210.645 388.458 li
207.637 391.466 li
.772549 .909804 .968627 rgb
f
grestore
gsave
210.645 469.849 mo
373.429 469.849 li
373.429 307.067 li
210.645 307.067 li
210.645 469.849 li
clp
240.275 413.09 mo
226.709 413.09 li
292.363 347.437 li
292.363 361.002 li
240.275 413.09 li
210.646 388.458 mo
210.646 347.762 li
251.341 307.067 li
292.036 307.067 li
210.646 388.458 li
.772549 .909804 .968627 rgb
f
grestore
gsave
47.8623 307.067 mo
210.645 307.067 li
210.645 144.286 li
47.8623 144.286 li
47.8623 307.067 li
clp
207.637 282.944 mo
207.637 269.378 li
210.644 266.372 li
210.645 279.936 li
207.637 282.944 li
.772549 .909804 .968627 rgb
f
grestore
gsave
210.645 307.067 mo
373.429 307.067 li
373.429 144.286 li
210.645 144.286 li
210.645 307.067 li
clp
292.036 307.066 mo
251.341 307.066 li
292.363 266.045 li
292.363 306.74 li
292.036 307.066 li
210.645 279.937 mo
210.645 266.372 li
227.603 249.415 li
241.168 249.415 li
210.645 279.937 li
.772549 .909804 .968627 rgb
f
grestore
grestore
292.863 248.915 mo
291.863 248.915 li
208.137 248.915 li
207.137 248.915 li
207.137 249.915 li
207.137 412.59 li
207.137 413.59 li
208.137 413.59 li
291.863 413.59 li
292.863 413.59 li
292.863 412.59 li
292.863 249.915 li
292.863 248.915 li
cp
291.863 249.915 mo
291.863 412.59 li
208.137 412.59 li
208.137 249.915 li
291.863 249.915 li
.576471 .72549 .776471 rgb
f
278.781 308.85 mo
221.219 308.85 li
219.575 308.85 218.242 307.517 218.242 305.872 cv
218.242 267.259 li
218.242 265.614 219.575 264.281 221.219 264.281 cv
278.781 264.281 li
280.425 264.281 281.758 265.614 281.758 267.259 cv
281.758 305.872 li
281.758 307.517 280.425 308.85 278.781 308.85 cv
cp
level3{
gsave
clp
[34.0885 59.043 -59.043 34.0885 232.956 257.044 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[34.0885 59.043 -59.043 34.0885 232.956 257.044 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
221.462 304.354 mo
221.462 268.776 li
221.462 268.072 222.033 267.501 222.737 267.501 cv
277.263 267.501 li
277.967 267.501 278.538 268.072 278.538 268.776 cv
278.538 304.354 li
278.538 305.059 277.967 305.629 277.263 305.629 cv
222.737 305.629 li
222.033 305.629 221.462 305.059 221.462 304.354 cv
cp
level3{
gsave
clp
[30.3125 52.5028 -52.5028 30.3125 234.844 260.314 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[30.3125 52.5028 -52.5028 30.3125 234.844 260.314 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
221.462 304.354 mo
221.962 304.354 li
221.962 268.776 li
221.963 268.349 222.309 268.002 222.737 268.001 cv
277.263 268.001 li
277.691 268.002 278.037 268.349 278.038 268.776 cv
278.038 304.354 li
278.037 304.782 277.691 305.128 277.263 305.129 cv
222.737 305.129 li
222.309 305.128 221.963 304.782 221.962 304.354 cv
221.462 304.354 li
220.962 304.354 li
220.962 305.335 221.757 306.129 222.737 306.129 cv
277.263 306.129 li
278.243 306.129 279.038 305.335 279.038 304.354 cv
279.038 268.776 li
279.038 267.796 278.244 267.001 277.263 267.001 cv
222.737 267.001 li
221.756 267.001 220.962 267.796 220.962 268.776 cv
220.962 304.354 li
221.462 304.354 li
cp
.941176 .960784 .968627 rgb
f
.976471 .984314 .988235 rgb
%%IncludeResource: font Oswald-DemiBold
/QRCIQI+Oswald-DemiBold /Oswald-DemiBold findfont ct_VMDictPut
/QRCIQI+Oswald-DemiBold*1 
[69{/.notdef}rp /E 8{/.notdef}rp /N /O /P 175{/.notdef}rp]
QRCIQI+Oswald-DemiBold nf
QRCIQI+Oswald-DemiBold*1 [21.1467 0 0 -21.1467 0 0 ]msf
227.69 300.918 mo
(OPE)sh
260.629 300.918 mo
(N)sh
.984314 .819608 .356863 rgb
%%IncludeResource: font Yellowtail
/QRCIQJ+Yellowtail /Yellowtail findfont ct_VMDictPut
/QRCIQJ+Yellowtail*1 
[32{/.notdef}rp /space 64{/.notdef}rp /a 3{/.notdef}rp /e 12{/.notdef}rp /r 
4{/.notdef}rp /w 136{/.notdef}rp]
QRCIQJ+Yellowtail nf
QRCIQJ+Yellowtail*1 [16.6474 0 0 -16.6474 0 0 ]msf
231.678 280.543 mo
(we are)sh
283.587 209.05 mo
283.587 213.451 li
283.587 222.726 276.073 230.239 266.799 230.239 cv
257.514 230.239 250 222.726 250 213.451 cv
250 209.05 li
283.587 209.05 li
cp
level3{
gsave
clp
[14.5013 25.117 -25.117 14.5013 260.667 202.892 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[14.5013 25.117 -25.117 14.5013 260.667 202.892 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
216.413 209.05 mo
216.413 213.451 li
216.413 222.726 208.889 230.239 199.614 230.239 cv
190.34 230.239 182.826 222.726 182.826 213.451 cv
182.826 209.05 li
216.413 209.05 li
cp
level3{
gsave
clp
[14.4993 25.1135 -25.1135 14.4993 193.493 202.892 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[14.4993 25.1135 -25.1135 14.4993 193.493 202.892 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
175.313 335.337 mo
175.313 249.894 li
116.264 249.894 li
116.264 335.337 li
175.313 335.337 li
182.826 242.379 mo
182.826 342.851 li
108.75 342.851 li
108.75 242.379 li
182.826 242.379 li
.694118 .698039 .952941 rgb
f
115.765 335.837 mo
115.765 249.394 li
175.812 249.394 li
175.812 335.837 li
115.765 335.837 li
.745098 .882353 .956863 rgb
f
gsave
115.765 335.837 mo
115.765 249.394 li
175.812 249.394 li
175.812 335.837 li
115.765 335.837 li
clp
gsave
-10.7093 414.746 mo
152.074 414.746 li
152.074 251.965 li
-10.7093 251.965 li
-10.7093 414.746 li
clp
122.138 335.337 mo
116.265 335.337 li
116.265 328.467 li
122.138 322.594 li
122.138 335.337 li
116.265 260.643 mo
116.265 251.965 li
124.941 251.965 li
124.943 251.965 li
116.265 260.643 li
.772549 .909804 .968627 rgb
f
grestore
gsave
152.074 414.746 mo
314.857 414.746 li
314.857 251.965 li
152.074 251.965 li
152.074 414.746 li
clp
162.483 322.947 mo
162.483 303.207 li
156.069 303.207 li
156.069 289.002 li
155.733 289.002 li
175.313 269.422 li
175.313 310.117 li
162.483 322.947 li
.772549 .909804 .968627 rgb
f
grestore
gsave
-10.7093 251.965 mo
152.074 251.965 li
152.074 89.1833 li
-10.7093 89.1833 li
-10.7093 251.965 li
clp
124.941 251.965 mo
124.941 251.965 li
116.265 251.964 li
116.265 249.894 li
127.012 249.894 li
124.941 251.965 li
.772549 .909804 .968627 rgb
f
grestore
grestore
176.312 248.894 mo
175.313 248.894 li
116.265 248.894 li
115.265 248.894 li
115.265 249.894 li
115.265 335.337 li
115.265 336.337 li
116.265 336.337 li
175.313 336.337 li
176.312 336.337 li
176.312 335.337 li
176.312 249.894 li
176.312 248.894 li
175.313 249.894 mo
175.313 335.337 li
116.265 335.337 li
116.265 249.894 li
175.313 249.894 li
.576471 .72549 .776471 rgb
f
156.807 181.217 mo
149.239 209.05 li
115.642 209.05 li
125.743 181.217 li
156.807 181.217 li
cp
.956863 .596078 .596078 rgb
f
149.239 209.05 mo
149.239 213.451 li
149.239 222.726 141.715 230.239 132.441 230.239 cv
123.167 230.239 115.642 222.726 115.642 213.451 cv
115.642 209.05 li
149.239 209.05 li
cp
level3{
gsave
clp
[14.502 25.1182 -25.1182 14.502 126.314 202.889 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[14.502 25.1182 -25.1182 14.502 126.314 202.889 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
220.652 317.353 mo
220.652 318.729 219.537 319.844 218.16 319.844 cv
216.784 319.844 215.669 318.729 215.669 317.353 cv
215.669 315.977 216.784 314.86 218.16 314.86 cv
219.537 314.86 220.652 315.977 220.652 317.353 cv
cp
.576471 .72549 .776471 rgb
f
220.652 345.342 mo
220.652 346.718 219.537 347.833 218.16 347.833 cv
216.784 347.833 215.669 346.718 215.669 345.342 cv
215.669 343.966 216.784 342.851 218.16 342.851 cv
219.537 342.851 220.652 343.966 220.652 345.342 cv
cp
f
218.16 346.839 mo
218.16 346.839 li
217.195 346.839 216.413 346.057 216.413 345.092 cv
216.413 317.413 li
216.413 316.448 217.195 315.666 218.16 315.666 cv
219.125 315.666 219.908 316.448 219.908 317.413 cv
219.908 345.092 li
219.908 346.057 219.125 346.839 218.16 346.839 cv
cp
.862745 .909804 .937255 rgb
f
218.907 333.793 mo
218.733 333.793 li
218.504 333.793 218.32 333.608 218.32 333.38 cv
218.32 317.3 li
218.32 317.071 218.504 316.887 218.733 316.887 cv
218.907 316.887 li
219.135 316.887 219.32 317.071 219.32 317.3 cv
219.32 333.38 li
219.32 333.608 219.135 333.793 218.907 333.793 cv
cp
.976471 .984314 .988235 rgb
f
466.162 412.59 mo
466.162 425.202 li
33.8379 425.202 li
33.8379 412.59 li
88.3667 412.59 li
199.614 412.59 li
208.137 412.59 li
291.863 412.59 li
300.386 412.59 li
411.633 412.59 li
466.162 412.59 li
cp
.764706 .827451 .866667 rgb
f
383.735 335.337 mo
356.009 335.337 li
356.009 301.501 li
371.448 301.501 li
371.448 285.385 li
383.735 273.098 li
383.735 335.337 li
371.448 271.82 mo
371.448 267.666 li
375.603 267.666 li
371.448 271.82 li
.643137 .803922 .898039 rgb
f
371.448 285.385 mo
371.448 271.82 li
375.603 267.666 li
383.735 267.666 li
383.735 273.098 li
371.448 285.385 li
.666667 .827451 .909804 rgb
f
383.735 335.337 mo
356.009 335.337 li
383.735 335.337 li
383.735 273.098 li
383.735 267.666 li
383.735 301.501 li
383.735 335.337 li
.498039 .658823 .729412 rgb
f
342.336 335.337 mo
327.931 335.337 li
327.931 328.902 li
335.903 320.931 li
342.336 320.931 li
342.336 335.337 li
.643137 .803922 .898039 rgb
f
327.931 328.902 mo
327.931 320.931 li
335.903 320.931 li
327.931 328.902 li
.666667 .827451 .909804 rgb
f
162.483 335.337 mo
150.092 335.337 li
152.074 333.355 li
152.072 292.66 li
122.138 322.594 li
122.138 303.207 li
128.552 303.207 li
128.552 289.002 li
155.733 289.002 li
152.075 292.66 li
152.075 333.355 li
162.483 322.947 li
162.483 335.337 li
.643137 .803922 .898039 rgb
f
150.092 335.337 mo
122.138 335.337 li
122.138 322.594 li
152.072 292.66 li
152.074 333.355 li
150.092 335.337 li
.666667 .827451 .909804 rgb
f
152.075 333.355 mo
152.075 292.66 li
155.733 289.002 li
156.069 289.002 li
156.069 303.207 li
162.483 303.207 li
162.483 322.947 li
152.075 333.355 li
f
162.483 335.337 mo
122.138 335.337 li
150.092 335.337 li
162.483 335.337 li
.498039 .658823 .729412 rgb
f
184.055 371.689 mo
187.448 371.404 187.69 352.416 187.167 344.354 cv
186.645 336.293 184.725 330.04 180.583 330.389 cv
176.441 330.736 175.592 337.222 176.422 345.257 cv
177.253 353.293 180.662 371.976 184.055 371.689 cv
cp
1 .784314 .686275 rgb
f
167.865 406.75 mo
170.665 407.881 180.953 383.298 183.198 377.739 cv
185.443 372.18 187.384 366.139 184.245 364.871 cv
181.106 363.604 178.307 369.298 176.062 374.856 cv
173.817 380.416 165.066 405.619 167.865 406.75 cv
cp
f
166.118 409.713 mo
167.953 410.975 171.751 411.789 172.096 411.147 cv
172.447 410.518 171.85 408.704 171.325 407.403 cv
171.318 407.392 li
171.16 407.007 171.011 406.664 170.898 406.412 cv
170.762 406.094 170.672 405.907 170.672 405.907 cv
170.672 405.907 176.753 381.878 175.627 381.573 cv
174.407 381.244 166.27 405.091 166.27 405.091 cv
166.27 405.091 166.229 405.241 166.161 405.454 cv
166.068 405.762 li
165.449 407.83 li
165.371 408.081 164.772 408.806 166.118 409.713 cv
cp
f
166.118 409.713 mo
167.953 410.975 171.751 411.789 172.096 411.147 cv
172.447 410.518 171.85 408.704 171.325 407.403 cv
171.318 407.392 li
171.16 407.007 171.011 406.664 170.898 406.412 cv
170.783 406.653 170.606 407.008 170.47 407.323 cv
170.231 407.873 169.917 407.88 168.797 407.144 cv
168.009 406.628 166.77 406.072 166.068 405.762 cv
166.068 405.762 165.343 407.281 165.145 407.806 cv
165.051 408.052 164.772 408.806 166.118 409.713 cv
cp
level3{
gsave
clp
[3.8581 6.68242 -6.68242 3.8581 166.757 405.363 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.8581 6.68242 -6.68242 3.8581 166.757 405.363 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
167.778 319.812 mo
170.043 320.753 176.735 308.103 179.177 302.522 cv
181.618 296.942 182.545 292.109 179.779 290.959 cv
177.014 289.809 174.24 293.873 172.004 299.539 cv
169.768 305.204 165.513 318.869 167.778 319.812 cv
cp
1 .784314 .686275 rgb
f
180.567 343.174 mo
182.545 342.268 176.419 327.466 174.536 323.356 cv
172.653 319.247 170.362 315.049 168.145 316.064 cv
165.928 317.081 167.612 321.557 169.495 325.666 cv
171.378 329.775 178.589 344.08 180.567 343.174 cv
cp
f
178.937 339.363 mo
176.528 340.258 178.589 344.328 179.342 345.69 cv
180.569 347.91 183.999 349.008 184.867 348.544 cv
185.735 348.08 182.578 343.265 182.686 342.989 cv
182.793 342.713 184.233 345.459 185.003 344.937 cv
185.772 344.415 183.861 341.165 182.61 340.168 cv
181.358 339.171 180.447 338.803 178.937 339.363 cv
cp
f
185.165 407.623 mo
184.961 408.439 184.545 409.353 184.991 410.159 cv
185.317 410.751 185.931 410.928 186.576 411.095 cv
187.435 411.316 188.334 411.381 189.214 411.472 cv
189.571 411.509 189.929 411.561 190.29 411.558 cv
190.587 411.556 190.881 411.503 191.179 411.485 cv
191.76 411.45 192.345 411.474 192.927 411.424 cv
193.43 411.354 li
193.334 411.128 li
193.084 410.908 192.754 410.81 192.495 410.601 cv
192.205 410.366 191.939 410.103 191.645 409.871 cv
191.06 409.41 190.432 409.005 189.742 408.718 cv
189.61 408.663 193.635 383.448 192.434 383.187 cv
191.343 382.949 185.168 407.612 185.165 407.623 cv
cp
f
200.244 372.699 mo
203.57 371.974 201.331 353.115 199.759 345.19 cv
198.188 337.267 195.469 331.318 191.408 332.205 cv
187.346 333.091 187.352 339.631 189.225 347.489 cv
191.097 355.348 196.917 373.425 200.244 372.699 cv
cp
f
186.59 408.639 mo
189.471 409.542 198.242 384.342 200.036 378.621 cv
201.83 372.9 203.282 366.724 200.052 365.711 cv
196.822 364.698 194.486 370.598 192.692 376.318 cv
190.898 382.039 183.709 407.735 186.59 408.639 cv
cp
f
184.688 409.178 mo
184.689 412.013 li
184.689 412.298 184.921 412.528 185.206 412.528 cv
194.327 412.524 li
195.127 412.524 195.466 411.513 194.827 411.035 cv
193.498 410.052 191.375 409.061 189.803 408.304 cv
189.43 408.632 188.868 409.647 188.212 409.771 cv
187.562 409.893 184.688 409.178 184.688 409.178 cv
cp
level3{
gsave
clp
[3.91695 6.78436 -6.78436 3.91695 187.475 407.568 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91695 6.78436 -6.78436 3.91695 187.475 407.568 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
224.108 301.678 mo
222.686 300.056 210.361 310.079 206.992 313.034 cv
203.622 315.99 200.284 319.358 201.878 321.177 cv
203.473 322.995 207.248 320.124 210.618 317.168 cv
213.988 314.213 225.531 303.3 224.108 301.678 cv
cp
1 .784314 .686275 rgb
f
176.339 337.953 mo
197.462 337.074 li
198.388 300.936 li
196.93 291.86 li
187.172 288.272 li
180.889 289.472 li
177.317 290.153 174.776 293.337 174.903 296.972 cv
177.194 322.548 li
176.339 337.953 li
cp
f
184.817 283.821 mo
184.817 291.083 li
184.817 291.083 186.352 292 189.943 292 cv
191.879 292 192.313 291.083 192.313 291.083 cv
192.313 288.398 li
184.817 283.821 li
cp
f
183.972 278.399 mo
183.989 278.663 183.997 278.909 184.014 279.146 cv
184.014 279.231 184.006 279.316 184.006 279.409 cv
183.828 283.72 186.594 288.336 190.76 288.964 cv
190.854 288.981 li
190.998 288.989 li
191.889 289.1 195.113 289.363 196.293 288.064 cv
197.676 286.537 198.906 283.737 198.906 281.824 cv
198.906 279.911 198.559 279.459 198.559 278.687 cv
198.559 278.084 198.882 276.199 198.888 275.381 cv
198.916 271.534 196.327 267.717 191.728 267.717 cv
184.829 267.717 183.777 273.767 183.972 278.399 cv
cp
f
197.589 291.618 mo
199.058 292.98 200.199 295.363 200.476 300.237 cv
200.554 301.599 201.562 305.339 199.735 309.896 cv
196.515 317.927 198.487 327.891 198.487 327.891 cv
176.602 328.697 li
176.602 328.697 176.141 314.025 175.393 309.345 cv
173.136 295.221 175.41 290.675 179.346 289.571 cv
185.24 287.918 196.122 290.257 197.589 291.618 cv
cp
level3{
gsave
clp
[21.4723 37.1911 -37.1911 21.4723 176.273 291.128 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[21.4723 37.1911 -37.1911 21.4723 176.273 291.128 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
203.003 321.705 mo
205.359 321.098 203.098 307.087 201.697 301.213 cv
200.295 295.338 198.142 290.959 195.266 291.7 cv
192.39 292.442 192.622 297.316 194.237 303.137 cv
195.851 308.956 200.647 322.313 203.003 321.705 cv
cp
1 .784314 .686275 rgb
f
228.487 296.777 mo
227.921 296.146 224.844 299.17 223.854 299.951 cv
223.704 300.069 223.599 300.139 223.561 300.134 cv
223.55 299.999 li
223.71 299.516 224.924 297.822 224.334 297.289 cv
223.687 296.702 221.265 299.002 220.444 300.471 cv
220.303 300.716 li
219.637 302.155 219.496 303.12 220.391 304.443 cv
221.819 306.554 225.255 303.611 226.391 302.565 cv
227.348 301.684 228.043 300.363 228.407 299.189 cv
228.747 298.096 228.8 297.129 228.487 296.777 cv
cp
f
199.581 273.128 mo
199.587 273.158 li
199.825 274.306 199.889 275.588 199.236 276.561 cv
198.658 277.422 197.561 278.011 197.496 279.142 cv
197.467 279.651 197.699 280.153 197.671 280.676 cv
197.635 281.362 197.362 282.042 197.047 282.645 cv
196.468 283.752 195.749 284.984 196.145 286.17 cv
196.423 287.007 197.226 287.643 197.309 288.52 cv
197.432 289.813 195.939 290.83 196.023 292.127 cv
196.069 292.834 196.584 293.438 196.666 294.143 cv
196.779 295.126 196.026 295.997 195.224 296.577 cv
192.74 298.37 189.572 298.077 186.646 298.012 cv
184.378 297.961 182.113 297.801 179.86 297.533 cv
178.555 297.377 177.241 297.183 176.012 296.714 cv
174.896 296.289 173.719 295.354 173.896 294.173 cv
174.003 293.462 174.574 292.926 174.938 292.306 cv
175.455 291.429 175.551 290.316 175.194 289.363 cv
175.082 289.063 174.925 288.771 174.892 288.451 cv
174.816 287.701 175.423 287.071 176.004 286.59 cv
176.584 286.109 177.237 285.568 177.304 284.817 cv
177.374 284.026 176.752 283.302 176.804 282.51 cv
176.851 281.781 177.442 281.222 177.993 280.741 cv
178.396 280.39 178.799 280.038 179.203 279.687 cv
179.397 279.517 179.598 279.34 179.708 279.105 cv
180.074 278.337 179.319 277.488 179.329 276.638 cv
179.346 275.115 181.61 274.543 181.961 273.062 cv
182.063 272.63 181.984 272.179 181.987 271.735 cv
182.005 268.777 185.65 266.738 188.292 267.071 cv
188.585 267.108 189.468 266.496 189.808 266.394 cv
190.387 266.218 190.99 266.121 191.596 266.105 cv
193.935 266.043 196.276 267.077 197.721 268.918 cv
198.676 270.136 199.263 271.612 199.581 273.128 cv
cp
level3{
gsave
clp
[15.0932 26.1421 -26.1421 15.0932 179.478 270.851 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[15.0932 26.1421 -26.1421 15.0932 179.478 270.851 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
176.38 322.972 mo
176.563 327.564 173.1 333.586 172.563 338.16 cv
171.49 347.323 177.829 364.487 177.829 365.597 cv
177.829 366.706 171.898 381.595 169.598 390.673 cv
169.598 390.673 170.889 392.528 177.103 393.658 cv
177.103 393.658 186.633 372.92 187.517 368.239 cv
188.4 363.559 187.316 323.828 187.316 323.828 cv
176.38 322.972 li
cp
level3{
gsave
clp
[24.4138 83.586 -83.586 24.4138 168.211 322.169 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[24.4138 83.586 -83.586 24.4138 168.211 322.169 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
186.005 323.726 mo
197.99 323.726 li
197.99 323.726 200.747 334.589 202.522 349.275 cv
204.297 363.962 203.733 368.319 203.41 370.66 cv
203.087 373 194.99 395.111 194.99 395.111 cv
194.99 395.111 190.858 395.676 186.643 393.175 cv
186.643 393.175 189.369 380.586 191.709 374.775 cv
194.049 368.966 194.305 367.674 194.305 367.674 cv
194.305 367.674 187.567 353.311 185.885 343.062 cv
184.204 332.813 186.005 323.726 186.005 323.726 cv
cp
level3{
gsave
clp
[24.4138 83.586 -83.586 24.4138 180.658 318.534 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[24.4138 83.586 -83.586 24.4138 180.658 318.534 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 ]]
] del_res
/QRCIQI+Oswald-DemiBold*1 uf
/QRCIQH+Oswald-ExtraLight*1 uf
/QRCIQJ+Yellowtail*1 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 24.0.1
%%For: (Ayib Makmun B9) ()
%%Title: (Shop with the sign We are open - up-01.eps)
%%CreationDate: 5/12/2020 5:03 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBm8:BoC2AJG>>jSfluqGSMU^ip3gZ'1ef!0&fSR(LA(>Tpj`!M,k&a2%.k01i_p2m/87SKfeaqucK<YPZW_-.kLG(5;KQYR
%i2IDd_&&Q<-N5qc]3@?uoXI4V[F/b;c1\-6<YSgmW-)+hf2@=[E\hh`5Jn-pFfX$XlE=1$/luB8n!)@7)p4c9^Z9]`[AYosH*psI
%-'k[&V173fHrt`EBcFO@WnMKqm]PbU;6!6rhs,6/r'S"q=3@PoOP;4Q8Q5C:brk&K[<hMUds+j![1pg3pceS*TtSkT9Rmt.a7lnN
%HO[K-TsWR)39UrDeG2krN?brkYD'T0jgh6U\(W^IH,"%CXJr=VXM*mb84Nh9Pt%f,[hV"X,#+p0e1*t^s4fi?_>k<'\B9Wk=]U4P
%=B(5:9/shfr2_?^el',;>ZETo.lj_[;>V/[UcGC)pbX(`GNt'/eZ9q<$i$<(T]J_H.Wp!RWM3Xa0fJMi4.g,A93HUBg-B[n]n:8)
%@+hX^l4<"6$DK)kCuhCg1b[Bpgt>\)8dcWb!.m0_9hR%0U=25P:]d!+B#PH9io]0gR'f"@4.g+@W(p<eeQ*HZBD*#Do0fWBf:$J;
%`<#ZX_&VVYX]BS!3Qn3diraq!(1$qcl^ujW^dYl;1bJV*M%u%U"@K#H/l:#nB!n9id(nl/B-'U?#ujl*T?X:Z&,Zj9kd2]9G;o%V
%<m&'te@))=NHHNn$(5F#ri#ltMj[I5;c>MG\Oo!,\rq>j@B28F]@BF3*__Z!9<UYQRB$2_XD$aGn2sXKBg=OOFlf5h9@;HHC.FV[
%e]^HNf$n<o)<M@1]<49(1FFIk)r@M4h15@kG7@89]1H8WqI)L4m(hG#7VPn7r?\3qn:,;BN_0L&9iXKc"=hlKN>aIN8uAVslS.R<
%.@QSY\(-qA!Q9:6UUT:kTL7WmQ&_^jc,su"+_2WOoi5]ib!>g1+D._GR>T_pD:Y[dT7FC-CJB%:b@CVQ[>J4-WpS$Rn(*EFb\25j
%_i*&=6a!)"!Eron19GjmLGq;@VYs0<4+O],Wb'm;R\JHLj@Z>PA/ZJ]=Z1p$<@]d&\@.8mXju_me>,!n2kWMI=g)r4\4<9L*klc-
%%GjBX?f_'Id=upF:XKf=a^KLGWcCRe3S.s,%/f7(k]7#[9WjU/QsIdtnEZJTIMllL\R$rBn*M!hp5C?l>\3Wq18X\;jqp#_eXRI0
%S/<oL\6_-LqK-2]fBC`=[9!6Mk!ZBtR^fX'\h[U+EkQj3^NF<S]R3R6TG@\jI1o.GccASnZ3?<UH<W:rQL.:TN"0"4<%N,>`p8LZ
%]AgI3<@RWg25=-q-rk=G;7"FoJ<$MSTP>0BXZi_e(K@_srEco*Z\E?7aQOJEG)V_JT)NiuGCCKlgDCgCXkONh].=g.Ol(Yue3P^g
%V2g+g9Mp?Y9rV8mO]nuTHLT&2DY\XGnX%Amh_A7(jd-;/!q8(Jrm[dq;(d@-PiNj*A:9R3G<4j@c#g]\d#L-?L.CcaXuJX%Y!Rl1
%$>M\)<?GMK)_F3<e#,I!D9QgV>POW]E*D_G_];J=[.]qalGW]<nCspXV:#Qss/uJkp@n`=/>a2eiW>bRof&N%[p:=4f34(e'qX"<
%VQ?W`"*iG-Gut0BF"0P\;T=(Q";Oni2^EM]PpaquS6(]^V<1RMY-o&-^/9ohQbWT*!#Fu=0&u8;6ikmaP,:LcCT]k\T@X$1>t$f+
%ek?*/Ki&-?D.K&m?ZNdLE`d\<8_P]9+RFZ!ZsIL4<*nnS0<%TEXkR[r4L]l_5JrQ/S'd3^f3b+a9i*WE(S+`6ES=8//S'%#/mdTS
%]'Y`p8:\15-@.<N&.<29(dLSKhB<#0(p2J0"gnID8#[5"'G4r/g@.;3gG*W]_c@1VeNlp[mHT\':;)H")Y]'arO_Tuen]TLl)s?t
%.B%9p8mT"&%@X/PnaT.F\0\uV.Mr8eI+'YrFu6#<1tufFKk'4Gb5.M]fL:[OW^7bW6t0'i.Q0"F:&M1[(YAdji!\4i=HEmc6D74,
%PRHRs?"AgtOY:=)&mVtVTicoI>bXkB>[0iKA`47p&mT^l$KuK/4Rp0a\P/>-\6-7#\9PLd\4!hPI-'<:i2_O7aM3T376ciZEtcFs
%rLn4LXI]^ZXPK3_>XiXhq"gaKo)75n6&e=bjl"1ho&5o=,F.>N_&%k[SeBronPq9H&d@PFqP;L\"W(r\*1`op\0MsuLB\qgW+BXs
%`>=:_&RU]HjdC^?:&L&$\Lp8m[-M2<YF].ora?pC\/C/]/uTB\cNRR$f-Qec(13g!P,K@c7i0[BG?kK@7C(*gOjEVZ?K+C;b6pGY
%F$.W%4:N)1;lR\M\H8+Q/&t5O#Zm<*3%2^b*/fqTUWt)^LIk[&$a@nlfK>XU97ffi.gq[D(KAY"pd0H7Y)T^%BOUBU[`>F^>qh9B
%f9Q)9\a[dodCpj90%"`OI@&<'n]h:q>2QlH.uM98$i`MP4oSS<MFG%*V2BQ.EqkgU1B+Ru$2ENMKniREK4?)*:GRj@ZG<UireE\D
%-1`V?=2DQ?Xt/\G,i9md(Xsl00#Bg],F=jIaD4n:d)[dCA&`0?$SB3p*.4H)L8%dl8)U\;JA,DXK.i_pIp%k#F@o*o?m8G^WXUu4
%*X5MF*_]rkS`Kl#*nA:;$tHjXdju#cpJf-'N5X+U%88ZS_/)Y&4mKX'e=1j5&akr]:*@o[0S(j%"?M6N%g7&)8*+EO@Vh(JnMpWk
%5g2g1>V;X!jGLJ\(4&rOcEk;[pq-Sp,NbhM/t^H+njO,QARJe#9Q.!OJ<h<#'!l7Ua<HiV]YKr-/5/SQ/dhOZ+^9O+<!U-f08lGG
%DT8),c/<?Pds13j2gF'WpjD"l<MNPYkUK,5!An3O7>)%C.KM0OFm'1`E=gm"5mU@j-mSBhrIK8o";HDVPf&q%9_4,@iMe6XF!&Y6
%$I@9ISs_T$l`sXo;)>F`-;+HWPbGpFO;Dqh"GE$4i6oCb_B?o%O9uhW<rE'*5DT\hF+Os@?uZ8J]LG;\'cE+'LtX9^j9D'1nAh7b
%+tGB),(#WNkq)Z4dsr7Ri-@JIb4*&uB*&Md$r'9Q@X*dHdnsS!%QW`u8eNSk1H:5c-,HRrgQrt^82us>RSC>d<)_,oZt1XBPCmcM
%'Q^?tE.aY`#4[4W8$#Vhr(E\"'LA(`5rs%Z87Y#gaFf@IL8J[PV?0Fp$)VVA#dFe+aT->O5c,_:C`Z-VLbrhH?=4n3iXAjsIHSk5
%"%IpM"$04$ecR_3#`P\^m)ZcbT*1L:s+ragfF<:AWoTE1U@!kY?**AOm#-'n=SoS=%'"FVVK2d>SfHBH,"s*[(`!?]NreZ=JU1UR
%WEt,S8Ji_h#/pS\!$dQ:DKQie8'\bLhrRpKB\u7(0<<Pfo9*U7LS0J+=sD!(b>j]OLBJ`07+,dW22Ito-Y2\R(_YEHVND,e#"G;c
%PGKQ[b8V1ipWs<^d>UP%clD5TJMXV3W^p`6[t?Q3@EjMJ@Eq)eF(3`IfpDAun%&kg<A^nBq$@7n+h"Z6VQfQeYlH^8C_`>D%43Ho
%K+\sa3@rbQ87j$ELM][8ggL8O!ZoE($[D">OJ$m[#!e3!&m3+P&_hS5pLfC(^6!FQn7<7r2CmRLkdkfs<A6(:RM630"h5)SO<&rG
%"$CWi)[;2Gi<q]&,Vkt5$s"Cq+#8mF$n`0U,s5TQ4NVgZV-2_Q3J7Th7tJWKUQo6N((UpE/GO5cE!b$0UhDR28KQCO/1BZo*iqK&
%mNq5)THkHB'350m9B%86i_'Jk'#^q'larZOhS/mr_Ia$L,OLos-(crX`s,u_.od4j*jQV!!]Ci((!BFWY_$F9=(R?,+uUMNfR-'k
%UkB2u/FEj#+oOl@#of"?]PKNZ9qU"%p[N3\O%UfA(JVS1^_c:G0s$0N^]K0-BmbI8NVtS&,:ar^7)Y"aOc\CPFVOq.%,FC=/-DY6
%9,*<rdbcTS$]HW5^EdW)$)VFU)X:FT65HYc'p2CKiMF4m2_B'k5XtSN:_:[:AcTDtFVtZg"U]qnQqU(D_jJeWT%caU#0.G]$8Y2,
%AgN9k?g"AhaJ%4>/;HieD[Y5Tb9DAXeUDH*&&<c/_DnI?V>1PpYH(.9"bar:-5r.,*FKM'jQ%_Nr5\nNl8:<9Oc+;C9_YO&2(?a*
%=j/H$lpaFF*%22R#jb1&c;Y^@$l5<P!d:OeLM@=2;isGTA?%f"m2jF(F.@<1.#U=L3Gpj4,hkImb\M!;;l4W7A@dQefJOqC*'9'!
%6QC7TTg'GWJrol-@".5Y8'W1u.I3%T\uaaV)ek%`"rCaGL_V*GKOc!aD(o/GdosTq@1c-s(b)O'k-.MnZ$MeVP*3jX,)8T)K2k>Y
%H2=a0eu"orUFs@(kB?Bh0m&Hti^MG>'jP82N0\gdo%:K"160HnDA%]6LI.Ou=K"NFNel_D([&DHQ(Ud49iF/I@0I?i+YB+r'Ieql
%6b%c_!)!B7$p?AY/&8=WNF8T+?o;,bAsPnM6)8M+TT2W6>Sq(:Lg-A&-mpc(%Ul5HO&ZU=l&&nC=%#`KFYR/aF\9WYs$GQQdfX(Y
%p0=tQ\\BpH+BR/JkOSVX/iN>gSB]Q7TLSRg?nt@?'"T`cFW7>5KdWhXXu>oJYKAB,eD@j?qRY@iU&G,hHB_dT:de\DLsZnjgF6S/
%=>7(kn('OfLtB`gVN+]Q!%,?2B!"?fX?6CD/GDriaC(^b@rX"r]rbT5f7UohkQi9MF5\u&"")Ku);#[%A)r53oE@)bQS_E!B?eM$
%0qqCI;mt;6X>Q]A]rGSEh\bZ8ef"q@!)*Z4fSrhHP71/bACVl^!9s5%NSG2g/j`3=#[l.)A$&@4<tKQ%,5H)Y^L9b:0!+SQe]r-0
%EQ4^gC(S'nqh"Fl$S5a^_ILnFpA/60U57?U**+2f=EWQ+dQh;b+jbE98qZ#JPR#a$^jCaZ,7^231cC's6O7'TN?H+=i_8CQ0R\hE
%fn2s>O*F)Uh([MbRql/n@.UQQ<fJBr140RWPG8jdY%DW2>Hran>-<d8[@1Jb,T+uFJaCm&J.nYb]-0ed!k-^N[S9_2Pr!?i!"<Af
%=Rd)"X[4_d<o,Z=%J,iBQ!D=r1T&SoVK2JIAia&QEigOI>^<WU>;\aMkH'1XdF/fMM%W]/-q*f#Kjf4'A2pY^?lat.;ht4K`NV>@
%/5>*TZ5cbG/;r&!%Pj=OK,eo`b=fo3BgE@8\*_p_9kJl?:SNtm*_]^kZV4I:3U6._K&s_2]M;+\&`.:<0e-<ki/SI?C'KfOVFFL`
%HE.5uSjhq4lW5RZ!'4";56H>U156.(1]G#^L&UP6%i0mIV\usX1WK+M\++ee^Ai_q^S&m%;<mS@8l[8.qrao.d70En2=PXeePb\Z
%ooh.[=ku+1]SCt[Vs-PqVmVGj$Hi%'[GRr@I.-4]n7o.o!]]/n?L\%urPN)Z4ggC+UFDEr!`'V2/&kb2-EjFloZ4trK+S:_OI%K$
%J3f_"no0UV>O`ZukekDlkeb3I\PrqnK\)?lT^K.BRWo.",nN*`EHpHpoHhrjR@u9IQu@"W%1HX)9-$`7Co#^j5Z,1)@#L]^P]C9j
%_MG]mJ-[V5&N3ai79Xdl#/?>06VBi7^pIPs5`$F8o2aid7A:PX+e8d.k&/SXQ+4da;2YLHAjGg,[qOSignI%lH;k]>euckBnjG&b
%Hl%amXi)f3A<\=TXHE\sjd<Li\&]2iaEu!mmt!eC13sPEk(Ik-EJpN,cYi8&XL8,K\>KENCajC/WM8+jWWJUuAMV)e*m(hP6U>Sf
%IScXjpGF2A]fhWY$]D!RcSjqi-L"rt88e(F(o_b7"V"X_d:fQc^.?4a.0Q!,/XgYOa;1b"-3Xj)\>%AYY?[3Ik>BU!LFF,Np<")K
%GSZ!&Np;5#=.Vt%F!t_K_\.q5HY&%54G,sgj5u.EdIbKlWH_/A%ItPAm=?EYna$REMV'd(HKBo]]_3#]&%cSOV,3I482`t`\K%Q`
%4Yo*%MW[0fc/Wb9a]TV9H3B4P31L"JD[[-B-%b8Ar!bU:,C?2^G]#lo\JoFh8*396n[sVInht"1H=Lg!'[LJA05&2IouPd!.A"j^
%?G:$58oJO*QK%]LATK`a;KAX(9CY-!o("Vi5^HpSZl$!UquIOn(.1+(J9YF7Vn3<UH,_hQeSK4Ld-#rqU!-lpR[!KoaH@:e&he4d
%s.On&`82!)AkNs02Ied2baYK)K6"\NMM8W(qK6:!Fc9L]7\_@+^U,9&XJW7<:?2Nt?;@9J9B2&N@pas*W61cH=WH%E,!"l:NJsq!
%dqJ!pK)m7GBO5/S(5uKZb9@aZl2O>-C!HMDj/iOCHbraDk-?1*q\h^c]egt1XJ^iF]1*0?/QUVtWr9=dm9'O&Q"[[cgF[Ybp>33W
%oQ7rWX1pg;7ZiIZ0H,3QL4lWs3*,^gNI)4sgKD+nB-#Gii:%1mJb'uqbYOg&A^2#NL_PcT`l"dMTq*SQ%[>it+`aR+?F(YK*;q6L
%!nCboEMuoC0C`I(R=!8Qm:17dZKLL+X/q#J0G*_)g/UsQJ#ibB;JePsf.1WO1VW@Po$f!>NA(Z@W@>Cd-Pf]MpAK'7g3s@i]-474
%C2\VN2Oe0'N#$:JXHlX\$nrA%H;)_633+Y)aDoI^c0=5)c(6T`AiId''`/O`fB07nSY\'aUdUM)!^ssXD+8.<>@f,T(Wfc!0_q^Z
%-PeZqm5]ob]RXL/OCq;%JlsP[I@$i7O`Bf@:'\I"RikQZ-b=c4$nJQ]K(5"DP>,\(JJ5/SN11fkSh'teU04hQ262/kG9Npb%VH,8
%rkb[t[m<lLWQ[dMmA,nKaQIW08uH[3[dc7X!IAc/`b^/Ed:D3)(CTVg=[*PP1]tL_Rr"O+\STj6U%?`e6gLTSLXo0-LM"L@G-'7X
%.&=MsUCa0!X<:UhNF=97_KV1KHVLkc9'InQ;lGer0bS:%(>ra>KM0.+ag`ds"bm\(X![/07.Vt%Z>,[j6rC`rXlcbC"`(7Y5D,h>
%jL"Tm82Fqo0%"m,L)C)'@,6LnJq,cJ14/6_2S^`.0B&B9^k_?I(07N*/Z`+">JE<(mD3uhQ2B`sB0&);`]pH81X@it/c%O#hDFD8
%f0&f4K0nM_LusH*9uoQ>#-C10KF`cTcoa-pO)4R3HcX)l1S4CR5]'hBoT<r5Pdgt@"T<DNiP+P"qJK?lB,+a%;@)2@^A70Z!?N$;
%0FC#hnb0IHE1H\@E5R+Q1R5Q(\Y%XRA3qG1Eqn:oT9[%MLr8ZZd_OVt_;ce?]k9i=]f/@$BPR8gDtk""I;mP(Ph&W/`l!`#ST:jh
%7[nd;m-fa.ONZiiXXa+XQ\Zh,Xeus6C"/XAE"tF4eK-eh`>C\078<KBWP$aG<D>3HQSIa?HAFc=^X:V..lbHN"h/$FR^ELX[q:3'
%lqb1K0an":ckob$--tSfd%+N%eqX<qMDnj_mBK:mk7\mh]^[I3[%<V="`o:3N'W4<["!f8:a5a`0j,2>>V?R[Hgda&RiJHc_ZM<r
%pQ2Gb?K;?[(pI2o-%3Zr6A8I]3r[tQCqHH*G3V]+U(F*<GaWZ`mA>UB*\h&kU3Gl/k,24.=MQfEMfu4.M%P"c!-MNdW>l3ILZbM-
%Z(a(o'8)-"Y:aV5>6jQ^9Fe#i[:+X/&B!2f1eoN;q.Gl<FMC2aZGODMUVI.IRVjE@\Kk]KY3nf@ant6T[:[YHHDClt4=hsMRoU.'
%V7%(4#$Zg%1?XX*JTmf2^uF0)p8gtBHq?eGkS"BnV5rY4Fiigu+6j9C5)B)u.4S,mos&Kt2GW/-\MH-=a2[?c1JYKcEGG"V9a4n2
%I]V,mZ$AAg:BR;<-fukg7qo?4;f_"W[SG]\#9@$HA*YsroS,QG`n'Arf)E2jCRqU`+4!t\10UGbX!J[fOg3L.b"nj_nKM&b?fM;Y
%TBsF\m%9MImp,\=gXW%hZXsDUOkVYZ[tY(JA%`O#$O:1+%TE2UOZU-\PFMAM=PpT::JR&&"EL_-6p[1?U'-XR3^ci-BKhC_.o`.4
%FJU!BI7Bi/S7"lXR7Ynjp4i];/,8c4?SAZRQUd5;Xs`_:R`1%NQK1=UH:N=F/'::L:'@0OXYE<`+Ah9Dh31UX6lTQY34Xlr0[ZlC
%>![#jD7Q&7`pPd@"tc)WgsSD=[Aid"Y4Le3)GOT^)gNK8)#KX>7K3kFlK=AH1`C8#<BAMm-2(mY;pdU*CX)Q],1"][TBjaU3O]Mn
%j^jYkYhjaOj2IC0Yo&[(0,a([n&g%DBpn5!0bAB]nML@!GTA!W8,s6k!$ZT2&<U`3Y;*h>+JM@-U):))#9n&-Gi%Wi@9KY=?Q)Nu
%6+ju]$KM.;11Ee7](W+.MmIrS1:`_`H#Fn?#7(*]"o'&dg9ZD#3m*mmi[O[^%+66bbWG%0LC=E_5AW=3hjCLPb*.nKBXh)-Fp)%_
%i'o$pY+Vff]V[+WOtS24o^Fe#9qK+\NWAAj?p%Kc@?#N><gOIf%ZIQ=q(\W\aWVS1V=at$<D>/JjBUo0.E&7;H;X"n1V$&$LGmYL
%-]U#Zr-4b$j6#,D8G4!D_I8f4+"t5$j)G=p[E4P@%ghil7Ya3eI[##=Yo/[lo\oQ5GYFd_NYnhlX*3qS+3)^b]n8F1@K=#a]_<:(
%@M8*=Ce,0PbiRt7#r?XWS<B(dmRAP%kQ@h1O5pF'C(`T/BK`T6Tn%5[^;a<#Odf(AI\G8V8g4LEpRB'P2FkJJfJBnjD[opO'l/,r
%/m"9ldVL#IX\kC$<6DdM?!h<l=5neN?PBAG<r#VN5pIR.)DY8^*`=akjt!u(Eo_m^_Hg,2`ssMj,lT"iU3tkB1<BNU#cC4TiB>?<
%"-GYW7ZM2EKD((f`d=2O</g8(p5G\tjUugVN8h_nC:X=:r_3kB:hEq_P**'?_QX"c-fqe*5[RBD#SHlO<>4`aAJ?1$:umeT"eOP*
%@giPjTYB%7^R0Dse4,&"Cg;9g:d$+_K70cMl\RsRlb`h,?>D#GH(%W"Y#gY5";rMg2hhKF;f.\YSW&TemDR%nH01^aSRDPu.G3*9
%%VN1QCY+"^J^T!WW()s*X>Q0"cH;dEaN)tIE`F)L0"lT6[.82]QP+g,@fDnFO'G:42Bsu@5()EhAK88Q+X39PRU^=NCa_<DYtGDc
%jG:pfNtJulXoaYblr"J-)k#?T&#b^l5&T^b!mnrl9B4[$EU;*qO'SL[]%Ei)4D7,.`WqN0WdNUSV$*HNQlYZ^@[E5dd"lXu^E[p$
%no80+&qDlL9]HX7ToEM0<g!JYc?+e$^`R$\cm5lKj5Kg[LZa_9@P`&"o1(n6%Qa.m2fR%/4V[Eu;\'1_AKNlo3IsP>]W]t7gK3`+
%gWP)Fm('$BX2\t\#IZ%>fqJcp3@;a^EQf3=D"2#@`KCFL`ld:JTI_R+UrQ/KbS8)kOc1`L<Q1$&.ZTqVQmn&`+q[aqYHU/8$pOI%
%]TF0I"'Q?[`DtLZ9^?u$A]HUOKT@)dj-_fsC%:i6;^n;#:t7hIH'290f.4berr0o9%tTA)f)AP3Vfhh06c+f?&'R4Qc)U>6CW7Eo
%lj7TG.<<%fA=jjn/&N;*nTIm_k`+;><-3_c)kGfS#URNHft'aR)J\&V0I+0NOkrFZ*"df]hW-)@9)lV"NeYGF;tN+<V.^o6W>,87
%L[Xa43]ot3(\q4O1S9!Gg?H:bCENA2g&Kih+&8n]XQ;X_M'Rq.)lJjXeB6+9Cu,`DmRDT_0%gpX&_:;d)_G'n[?ZqN%(@/aEuZMK
%.9Ng71(ti*T=lT0)m;V>)[RXE#mTud`"!;%E[UQr%.G<ok`LBDB)U6^&N;h.HIM%I723pKXo6[Eg'RD1;&%,88Ztu*c2Ym$YocOq
%O5bafDZ`1<O^[:ofC<U)(^e9`q'3>:T5a8JnS8&J2*W(jnS8&J2*X*#j44&<Z^O*BZH,P7j44&].#5O*O4@IAT$L7!a].*d$N;H!
%r'nS*1g\!?YM]r,W#Dkt7uu&9V-[5Q&W]i'pAE?n!im'CK.ctUq;3-[_*Dlje=N6m\l)@o@,j'Wbdsqnh`n1HUUWj<=GZ.:U$4,h
%;PKpLJHhGP8FKcX_+7'a^mjrV_b.\>nGOX\\W=F]A$=m=pF:X5'AeqODI_;XfX3\^/WO+pK=*JdT/B&OY(JX5XFhEfHWJaJf$q:Z
%?ItG,\uNls\Bor7cZ/1F)_I6ML#mf"ND;Rt!*g&2=t^;B:^(mtPWJ_7k&YXX11^,ZZ%ee_LI`e;#LPlb+)EJKRQAS>:CuGqIuc[.
%m!fmUs,5`3.\QWOs&#6/OQ&XKl-i$jEeeT-S"hYXbtaW)Bn;H'$b4KO@o(V,'/fJOrL!sTp-am';.EDOfFp.96k)iR,JTH$M)*mb
%fHE-G7#dY/4n_8QaqHWp/R[53j*uu:mD:^65(\FSA*:CPn1A:!nN)XmC*,XMrOm+M1*R[`,_0Pr2P*LEQ-OX7R3=k\37;eWK^iET
%l-+X#JCBSgNV9>VMd,0XbN*jjPK00/]mlG4h@/iNbN.OHXKc#Z=)p=+j;Kn<4Pg2nThHNH3/cjM4l-1Acd'1UNdSbSi;V0Ld4Sbd
%WqpLYcIlR0mfrUeGN4*1hRDqC;7<DG5Q8/2_iR"nE;p?-q@Z%]IbHb63th.!<*5jjoV=!S1jq3WRZ-!^.*FTd&HB_X8fpG"2]+.8
%D7KSOKo;'4WNg_/HKHNu;7"2/r2Wjm'$k5,+.=VV$SCOARO93&"IeWf'j$hu5bTi'U?G+Zr()cJ!kiu;C:WB;)/j<j2`P`/Z1I+1
%=CNAkGp@btk=l#6`m1'Yo4I@%)2076)dEI5D7IU2S$DSIj#CuV7Lo_Z0ACN1.(kUY>ZUi;OOJ/DUXJ3q>HT'K[0.p"`p9GYfo6GR
%bfG2WUUL2&;nZkrg6EL>Z,\GHMI4s"8N&Ep]JM09WAOG5=-'YiPVqR)UGOJ-Cc($b_h'_]VIn(Jirg^tcQo:MIV/e\jETGWE+Utb
%S!AEs4h[dNq9`5[21Z<=LBl:`gnlWRPkZrEPU2Hd:R^!.@'JS;_h)[:qq?;h[A_dQp[,[Q4Ju9l>EA_3LY-0.HgK75^OH5Rl?G[l
%Oj*>h@d8o<las(Ma0EZFJKJ8>0)1!fkm7Q87"PT+d-%>2$RPjjA3pG?D<N-T-^)5X7AikY,*(mH#6JhVr:(Ab5H)>.rI[34DZIs&
%_c3;Lf'1gJ*O9gV83Djue$4<^[SOs;l.A0?gS]PR4seg'5Iu:>iPY9,(@"Dp:s$2[)/TJ@*6tg?q@5LKfK^GrW+,r&D_t;dZ%;b&
%%+J;Rj-ci;.!3s4e3r=S1.LPA<NSH#EWWNCd4Nk/IC]itZ9R2djdd=KanEIdXb0//b!%T@9n3Nn)XepBDDi4I2*RrOC`kOFS8b.U
%is`uY?O,D-[A)5PD=+S\='jKW`\"SE=).-[CIqd4HM_nL_&@i,Hs!2$Jc;ke0,\jV2XeeE6q;OVosLpOfM28rgr'M3fN:(XD_+f,
%gXm9*18FaYkI:G:8[:cR*I/d$^ad1uFH;af]jXbaq/0!j);,2$WOM!!'-04?Sc?\'&$*Ms/h1lS"k3(kY[A^e/(-N5P?^rt!pP,K
%Co7dTW2,3qO.$&B$K#3r0+uNmcWU)$>,.9l&_DJ?=G&5fDtTsViE*=]"kP9B!Y>b1Tl9YtV_kto%En+U7-h-/J$M;+LE)c:doap9
%'g6W>Q]/"PU:6@ZV_2a4*HKL&W9GYiVLaG\jE=AoRmVgo>UWgI0)a6sRn>?l3cC#n['>3@,R&%dTD^_FfnDHN5D"JFNiF2[jcWr7
%QE`dMmS3o]&1\+K')"0`pNR]&o1/jYbW\]ALtGQY!+'/mH6AqP@Z4c*DEJJM_h0AB"*nF1Z)lL00+B5L3AdKZPWs=2ID+2qQ"t@d
%nlR6R$^mN8hiERe:&r[taQ*I:Cb1c?a;,Z:j``&<'2,L58H.6cGnf*,j0Nes8cefBGg=A>dN@l#-rWcW^A-(e;BLAf1X]!`7Q>kT
%0A6Tsn(FT8^HJH9R)8,uCkG3T..[fBB&=aQ<;\ViJ6M&)LsM*=N,6R3*VgIIUEgk(i,(V@f^U1'WHD3&+rJDqc"0)E.f+@*"nZ0"
%RgsMfI?`Q/<^5I73NM4eoVh,Ko3Ze#L'$/P:ib*AaZN%B_jN^.Cii^W5'SJgEWp_f3!rit6*tq5*utp^Od;q8B>?uj)X2?q,eXdj
%s4r;uT"$kVe*a!pruYGNgcR#h\Yd%Z(XRLJI3qDNMJp\!FlbZXldk[UYUBNri_TG2LWPLtSS$u2PdsUOS"`ej9)KNj\22Qt8<6p5
%7j5hKHO(5#p)2$%^XV>Arfl?>S9HqSH;-46H[O\(a/:;MGa.iKK0J1V`]nYD6jsqCT?PjOmq&`[)h*)Yl#B+0T:L64*U2rj^"M0^
%9g+`0<Vpl$I#ge,*fee5.F`rn/R(+$kEY46e,<h:J&a/=9Ji?3eiWAHJe*inIc[TpUQWc8*W7:,,WFgt78'1b<Tn2Q_j'\u+P5qe
%B1%5(MdEDu4Th=Ib"KP1b[N&=FpNWfG39Bd(=GDM6!+X6bn)mi9@4H-s.P?*io11"IE?`"e(PW%kQN!hkWr/Ge\o5L6s[kkeRj[S
%Z2tTa0i3]]O+CsB<9uph/3u>AWcJO-6K(A92,cu,Z:TTQLl>KV+RA?^?3BKo<uOoW79cq--E8=Ela;VJ##0MGP#T9U8+dP?I!*EK
%U]Cp>qcp,!5`JeAe0o!>_\LLBo6]JH<,*MhrIB70?o1ePWOmL,<LnYqkNF)e?UaX_.@5Xs]\og5Sr_5XRZOMmWN<K0Te*.eC8]W0
%"419&5_dSA+,%Et'gs8`<Tg%L"GcrQlE+4sTC$9EOLg'8mq=)OoKLelLe]WN[!td9k4+6-(jVLfWJ)j..K*57-e2s`Oil:@Ap&X&
%_=^s@!FVi_9+%X+6Dp,g:nlqFdj%VaZN?]Z"9;8k`N1=&:o;pI^h$qndi9qGPR(VANi+-WFX%E:fS<!"$"-M'!:WbJ+/RCOSM;0h
%8+;7(%<45$L*=<+!FS@Kcr!f1N8#bMQ>8&PglTnPL16ia_,Fq1&C?Oh4["?!LZ4Z.p7NZB,3Ul08?@WE##0.?K4YT\nJ%&P:_^fG
%TN%_4C\hQZSs.P$`f6HmU=hoS$aPJM:0Xo1`S=?VM`&1JQ[]r=]p$["c+U"EhL?[Xs)UJLXSb\]JsiEJbs4iIVKjm(g*$6#IHPlA
%@+$l)dA^,P'KI""MItb6T_n<^J`V,O^mI\l*$nu53Lr%;5F!!QL?2P`%sUASfWdP`&+W!H`q!LSnmIOpadA1qZQiXa3K?JNLh/t(
%Mn\[C.q#M*$4JU8`/K4,;5fSpK#HdN>-:9.,Hd7G=Z9EnW&7b$LF\df9/3076W"O+1X_L9:oe7sr(*+h-&EU7j5Iu:Vs!$X].OY:
%?';!<6QI]0A%k'E"e-:US-Y#5=MZ%/fH[/!1DD.RMDEDQ3.XS/.a,\JZA&do7$hRIdb+Q=2-u$*Yoi,Dd*,UVNCDN&PRUf\nU*5H
%d@u.[RDc!,MPJ4dCb3`cXXLf6qf8Uk^*aJ'p,&Ge6,VJ/94pPA6R,9%*/j0$?D>ebOl7\p#s$]n^YoPfo7DY1+JtHlQ\>c.]XV9_
%<aAAanS@cpEa=7lD1Hg+LgZ?Y3_Ntc.fsQCGl::p=U(@d*%,@C^+S336Oe?G_jOa'M\n*+ruui:+&)V$ZkA&(L!TOu47b1H]D0p(
%*MfY0C=9LmGBos<r$.A?R,*=N:ou0sg5B<Y]CM+o(L@!Jl[dC[1P.'J2q_a9Ha-Rl4]]hH="X&H[1H]QfONI+2-OudV/*Tr06Gg.
%@M78oY?43EQPtG]nU,uOZDjB(>3&WX%2u`<*KNRe7iY-5eT>O,n!aC_e4pA\$(X,*`aX__Yau:t8)b@%>c?E(CQg2u+JQ--&H8sn
%+;,380JEb')[o*g39o2C#^%m2L$F=o%!Ak=>pgrH0\s!4MpHG=$d6@Ca-B7:4@:+m]-&W`8eFRt3sn(b<QZJD1L/M1ZtG^CY#I`Q
%nec\EZ%p_^CYm'R04kZ.#?lY$-jeUiBY,,ho=HP(+CoL>l(RB9Rc?!tEY8NjgU4jW!:d<.,!Laj;3>,^^]]2Xar#Bbm)jV[KRhc%
%gbYT><1-*J]YLgU<1623"LBkNLE):$)o0KR1gp!87ANLr'X!C8JI+_sHH&hkbud+Bd*!X4,#YLqiC*@n[:SleKjLG+=P!h_<0kZN
%`%WACTGfU""Hkd@QjQQF3U"sYMcVbRX94qiE'gQ\)uEG>:_SNl&HD7g(B,<S.NQ%H]OapkGaQ[KL_7^#1aWo&O>-0_KhB?)FU$?8
%:s]<EQ<Z:G5S.'lB3A`3KIhkKPo,Y"jD7[*CY%sODf<=`;_JZp@5)Q)&hDmtC"hpG+AkU,(1.,bZZm<Hr%4l4XK-)nAT<2fR`4'6
%'j(eV'+D7$M$crpg-(@="5Ntm$VnY\%$#kL_(o/^_-^l9V=8G$=TKb`((RuG,Wt3m5umM/_T`-eW&0^73%TRs!V90G(MQPeJi.q-
%`F9"0SUc#l'7u@>VjnpMGVk?feAbsha=nek)SF383L_%"?*hFQ1[D%Y==L+CQ4mqj!`%g]RKe@A^dDmY4@d1(!uXokj4$c?Y[KDM
%ata/27#JjF%uD$Bj<P(0Y9R]^-\ruR"HgO,M./o21%7d[;+EW_$@T1(%Ji;&^s!-]o8YG?CWsm%>n94Ep6Zaam\k"LhKZ0C=Bh4L
%*a\b^4K<O'ec0\\=o7WA[9s&6<%FLDkTWI+%>^I$aB1B_FbG3idL+oe/*A&5EHo\k'Xje1s/Tl=e4Nh&rTlm^Wl48A_H^#hpaL"T
%qI3]O4VU?roT4ZJ>eSr4h>;9S;>"%,<WR$*"B0j!$`/91EC,1.GO^rB!Gk\OL3;;SBO.aQ.TIZ8XeLFnMZ+2"R;k"Z5W71NPSd(N
%1IsuZk_"q`6D^Hde]&\A$h"/>A?9_:-TREiCa)LOUEmFJbK-`?A10,ME_?9`k04(deF-]9k@74trTVr2([pg$RcsEJjl<RbSt],N
%F%*6%5l@Z`D8-Vk\QSK/Y\lK;Y(+O6pmo2f1/]b43lITq/?A!HJ8J<Ej+7)%"P<*d!YT?%Ee_I&W4#!;3`M^)-X,mTB9pSjfDX.0
%d2t&P1ihmQ.'2KX-kINQhF0XI8mAHMAi5+a8:>\o\n\fHLhP(6)W.jPmrNh4S['<6C:[T8gIg`C/V%&6.C0Ndca1:;j4p5jP-t"Y
%.VmR6"YX--.F#<qG_T_Hn=klBBLj4ORp\I\STa99XbW#3i)rupjE>MM]-Y!oe,>J7DlFLQ33rde<&8HtLh5V9eQ+9hms.:O?`ep3
%`Vit\eRe^Ap/8Fr>>:[3H<\d3s!jh#H?9AGKdeJ$P$<g0dVFh;h:^6++n+j185\ScOE$P$URdfVZA)+C!]8N/co*lumW#L/?I72&
%:/g5ejt;lMW*6TE<%q%:C5T0-5F'`pnkV>IWn,npA$''Q>69Bl=HU!q\,:p`\bT1T0:YekE[b?sPj17ARb+^A`*8:HlKY-L5?D$Z
%]'^]lqt?l?EkgpgLj6N".INZ/Y7UgQUbhlsf#GV!Shj5iU"#?"gR^P/,tupobIs-O74+9g^3AAW;mk1mA,`cQhPi#o8,cV]2<3,F
%ABc=c"fh[2&FA:q_pt3XY+=_#m9?WuV&/(@c^"@'H>YQUo]-^'e,ur8a0_rt_4*cS2jl;LC\8V+f`L:'8?(0$NRYK?XKH%;QM=n*
%`+Q]S_+s@(;WTrCgMasY_c5;a\H-nR+#F:a'`H"Bms'l(RWJ'8kEV6+]*0`=jsA0Ip$Vf"b0B+0r2c\heX"H<H-pNk<70'labTq@
%?kP[H=tT^%G!n[+?/npGJGs`R2REfs:pdp1m`'$EfgE.kf+FlBV;3FMOXZ<Z[RQ)8dSuZU8[[1*?Fa"<>OYr$+OEi-)B_P'e<<$j
%EjK%E!QUOZQj`"*#f<HFCFUbRLL'0GeHV:V"&J4A]eo>"!V4/gF@`N;"N%]OUe+)_['PdO\68)nq5MjG3D(@YMJf$F"sTPJkd4MY
%Nd;%f3i,T#.U#KGfjbpTrg4.@#_:q[bEh7IP&!85XcBVZ<lg_K"hq5$@f98*_7Tl@>=\p`4a/`BB[BLXElF.TiNT#$i!55L8)&/\
%q#s+j9X681,L>ie,0F.+\H"hZJ,c5pgFUMh;1dDY9rK:V#u&P\8hnMC'J%d8<HF3qe3N$1Y47?#9/8]@TQbc#JYBtBN(1nE?XAsb
%3hi^:S0CRgF;EVFT"`4[A]Do_Jg%436)iHD?t*7bg!Eo"8XD3MKQhQ?"js#%GMR-;-3X6>QfW*.'1[[TO[oL)-[#75Bfr9dRT8Gk
%pe:(F`c0<t^"*7m&%S>4!A4<hW'$+1[OhAP[J6&)n-0a,p&Zs2b*;m>W>aWk25^Pjo`O<"fW02]a/bMPJb=%e9'r9h+G8hajB:cD
%R0&p&<<,b<-$6I;"*9rti[:_!r\\Kf$ZHCG$n#ZuW/B'8gf+^%hc37@/f.[t%&:Fh0ZIOfa$J9Y_+&5jNo+5bn)6ErlA;L@>gmd6
%806\&=^$Ub&i4gg3gq045t9StKi1d;('bC"JZr])?!Rnt=cneF9I$>d>&c7C&$\+%&5nGX6J/NGg4%>GFqnQ%r_tQd"_&\A=K<LG
%Tj]6mod<]C-72i2/j\:;apd'YE\j?IMWXpR0S>UJT6O!g+g\%/QF^`3[kqiChHEDTE3^+(CoJq#_8@Lo<)[pA@]J"tCt7=ee.>]5
%b7n>(;rCVRT5&KpjcUFegL_k)?8suT&9h_a\\1rCEUn_'aj3,?goG38hZcuaF%FDrgdNAUQHQkVbsY`7*^9YiG!r7`KS!ttbc&an
%5p?%h$F.`sTd.;G7Yd_L:N^g[`3^F8*NOb^j#s&/f@X2:/j-R7*-#-2P&WV-RFZH>26A]t#d#_6(TV6"F;lR;4h@>0<A_)u;itC#
%eLSC_,LKeqd^01p6FV*oh(T=I5_SUXd/6n=8QD*]l'FA3*g,uXTF4!6a#6OtN2p$hPDV\g<7fP@Pb=L_jHn@@MF*M@9XqD-=DKkV
%38?a7"F<qQIq)Z#3*%OO;H(d2]>S/_H]H$$C<gF4O#Z)FW^a47e".khn7(fSb_;e^">cpDHMj<`C*7Kt2NIHh'>35p9]^6CX"L+[
%.6=ClW4H/"ITFn:\ka#(:g*.&N<`:&Ri+n!+!8a]S4I=nMI(XIb-@_!a2$/I.&jZUk$%@J[>69$NCJsE40l!qC^&W#JT[^L)m]1;
%6Vl0R:tK/Z(\60?b$$(M*QEW0D;38ebCiSMYfB!Yb5iZsY'Ms,7N36&6,ViZ;Z]Y"h>B8C4r;p^3hj+L#,NbPdj)]@+@RTWL6L>=
%_3VX7%*==&@%<>,"ZUN/>E\E^Wedk/'D/J>45-Z1C;`VpfsDT#n:cO(-D9_X)<2`7GB$sK_e,[5G6T2sPqeC87FY/VONZ^[A<_9l
%060`g-TuL#(8EmJMj37Z\u&#e#t>ND.DV"O0K6!5GsETk\N&+4MkWWSI;64>eTsl8;B8K];**MZ[Ap*N;&cH)2;F?W#5Pc$\_0rW
%7MHYbl81"dX52D_$CR?f*[PrJ8[%t^[Q*<MjI_a-"U9fL.&!+onmBI,*iYl#@C9,&`0J]EF9>dBU.1J79,"V_BF5YG-tt,_=P]#e
%>-GmFB3+.u\T!kDI76$<^\EHu\Uo]&G81Qt#^X(]4Njl2cp6`fV]T]qN3Po?5MsS\p.>L>Q3:W]8^fBq!mN^6<lP>&;YR?("AVJ#
%o;G0b31,H9Xq5<dJe"/dj%0'G6?O3s-[Wi[J-"nKrC*k=RM%Kk:ar6#Atj&^"tQXlKQS$Q"tBO*d(ulN&;F8#r-jVRC%+2#M[Goc
%:`[ss\p[J*4if=-K'4m`.!h+u!h&@'+%X5>l8uRT<%E2BcP8rc"ud[f:<n/Aj]VcRp3m.6rGKZ2;(g#_iUu$"dQu0J?<deM#`rf`
%3!"Xciu"ljW2YQ0BeV\->uC.^(fA-]f85O9OIORL_@F7gKrMRh$gW`M>&/\/g5Mb<2eZ7J_;i54543u!j;Dg8j[0kI.qi@pk[qG-
%TRbu'Z<`Q4ZYB[`7"uKpD]L%u62jUN((R;-HHY'/5uEIX1L;;>/TEV"4Y8:TEpN<)0_qFis71E3C]`d*:=7c[9)V`:N/a]jLj\0!
%Y?p[*HOQcK+1=`PZ(M+X/X@K;Qk'm*d;5;4>P.'W>-HUCZ9VH\^`OUKh\!k*&!#/:>'\NF"u*#`9d=eVRj]I1YQD1:fKrG=J=D/G
%11IY+2Rcl"I"B]p=]84k%&Zc<+pDE_]qD9P]dV-i0)n>,Q('5s#[jR=XJ=Oik%)iK*ANpV?0Sjkq".V\>OA4iJ<#lJ9IWHGE77:!
%cY0YmR\ujE'JsF:g'"RLC9+:jMNXuJ:V<3tbJ-nrU>0M"3#R9.3]d*A]!p9B@R#`KNR:oCV?TSCPksGt?dhrEjt#.5-ll#`(:c]\
%'s6&E;7!@PQPstm*@qt0ntHRl'K?T=E;ROG6HX>Y];F4*W7HcqX#2-XJ"FN&T.;Ljpgphm_c-7kcD^I13nh,TcP'\tH]Ba1W[J>t
%b'RAjTk2Q8B,%45;Y3kf2;Dc<`hQpV[D9K_C+]Vcq5c]Q^_f_0j+W<[BFB_kQiZV4.R"!aA?g6-C7@r(fND>]-3rK,;RKU#!(Y9A
%QuBbob\/"592=',Ma3H=GSt4pg;l4K^niPN2o^@+-]$)d:J-T2jHWt`UHuO&Y_NutCJQfl=,TBqVXFRE7!1_/$(H-ub]1"bhN:ah
%gPFe$o]14LG1./HHd)m'#Ceu&8?$n9Fs@DA=FB;1O$/K:LV\Z]K$!%B,F""7W5d\MTk@_mO/,W,!+&`d+6'f':K#iYnXh(Q:TgFk
%O)k+oriKi?)N4re8qcghh(`%Yjt:tpO$0NLd?:KeGWZING45o1Uh#4m)sC@D^[3GIHcSdJHW4i('&#u.>1E3B1'T\sm3qh8ilZ5i
%8Q2eB8Veie)gC6i9%sFO(pg_FpHj:=#6?W`i@k@r$"",-?C](I*rK\/`%qCr\"XTGr179583kcjA42TY(EM=tEK$1er7[Xe'%rW_
%+^M4PV\Yqm_)2V/2;2me1K:/ighgXFWQ6K7d$889:0654^Dqds&eHa=+obN%^uDC\hfCt/M*$(+k6bnE:"r\&MfT6lMRqY>='WSM
%Q:khnq3jYI'*\6h\jEWj>p1!_,"@"lNfCA)0teKE\pF]8c<];*DWIN'n,Qfc=#XL9?b82MXd[A`/8XE#$@@+D?W9j'nC,M$anZ=Y
%4Z/_#]\V@RMj]c7BtZ(DC)cu,Vk`Lo:UuD*a\V9I^Y<NOgMO[2Q9Y2S\?D57re8,/ai3_faiUCTWQE89r@+ZTfCZ9<#LuU&Dej!4
%1jk_BdEd_UpAVT4?Y7UB@k,*Shc=oZT$5b^!IjqBrbW7]bUqbFV=0mlkhFl?oJ;\D?61uro+:rW^(g>HqY:m+/:F_gmA$:rr,/)@
%f=)<MbP3GAZ[MYGZA.d`iB-/<e,@;$_AAp=;L6!OVTPN'CE5;dZMQZPZ1Yc"?TMDB18!dlgs#3<im["Q=H_eARG:F5P/<;g(`?b^
%gak_`\V$CJ[NOqm0l10bg],n*#=[Pa,8['BlH)HOdd%_0-N%`HMpETMG&$Ssror/0)r\n_$idXbS3$p?Vk7;S!B"HESGFDGP:m*L
%H.'!:DGA%;ZgWDNH2dh%SN.8n93B+MY=+R7=0MM,eCF^KWG="mhk"1g;Au$U+ci>i&FH#!&)=XGaa&/qs.3NQ\phk"RH:3ojfOk-
%MnUq$VmA83IW/nK_[k>OXikn%pa#7>mS9BmaMfOlG11o_/8q$d09_<j95/G>CZtt]_910McK)&nDbdGb#F3E]bl%J$i_k5:Ek/MW
%Sm9OtE`?Z2FqM40:DO_l31\HXTQe@VDX6B\-DE1+W35[Pe*?\5Rf1H.<Tbg=qk,'@d^1TP2Rb1VmhY?cF6>W4kM,$?VEL=taNsa-
%oMR<r1b33OH3FU@K:oM9g6c-JV"Z3;R.Abfb0,k;alU.pRDD.p.5uJ9f0:>JhiH''\J;Nb>l%]m]#j=$^)R-?>D;Y0(3]ilIa[3J
%r<B\,rNotAH=HLdK1RZ?L_NS>C5&RVYEQM\DjONZF1EBK"ACotlC,`Vo&TA.L&K-TS[ZkcKdr@Z>eSe$Sm3"3.0SG&4]Dg9i2O::
%m<lNTk9fBdk`tt11qfAb3arkY+6h&$ihr*uP88$?PLd`*B65Z-lGp%;)XVUb)O7jYc2*>@lt]ti4"ec!MOikRS]NksV<NpkmP(3d
%muIZ=n'n?%ghkGEn%*tCh(KP)W!mmTJ:$9`)I?bL_G)b#9CNkUFC>ZgH@I4TIB=F4QjrY"m&LoQl?DXpXaLr4C>i#LQWKTj<d!pg
%%F'QW]?<dP\_#b?5>BDeo.t,3W)]tk4[$.@3-5)LBbd(V)IEE]*;[LZ=r!p4YJ2(K_6%ae?`8!O3!k7\Wr,5;AnILuqIpMN<;EN!
%)qsQs_qgWq>-1[a45-gc.Y>ZojRV%?;n.4FKf;$"CM;lMCM'WFoCG.t@^YOG$Z6^S`ad+PY'4Q*hA<@k;8\=J6d+;,mI\qDE3$+s
%rQnT!@qpGGC"5.*fCb$p9r)]Z><OSj9tq"*US(Z\kuPM<f'4kEZc+cc0>ZReMmpmqorI,G<e6o%(72Ho0?HM^;Iui7l*Q>f`]LO`
%(Y@Ae8?95o<;D";4:p)CZG&O"R^p-<C)*22G#gZE+lE^Vo?-[u8T:`&-8V;6T$F!0Qb"ku<aOM&DGMGbB+[r2K6s!1hjU\(XtKKQ
%'eTu'YDlRU?XLtt=MJZNLNb%.W)[M#TA"_BZ`hhj!cHZJlHtbq$Z1%`oq@HTC%ZA+\l_mQgoA>eh+0_3rH_:?<n`,,?9E&+LUMO,
%Fa$%le1)5Lgg,KBT"bj>OZ[bGh77cZXGVS2?6@U1BWG2rR@QBV'q,F/pOKhmZ.gG(DCo1EqtrSnf]qY%a/,G0&Vigb5<S#\T0n_<
%Q)!bC/f0.E4[+/jEDueB'\M]!4+2if`U]lFgrAULgeCnOAa87@m8Iu)-ejR5>u!'J>"-]oL.aa3Kb,Mf]9AkJWC*F\H)eR<SNL+[
%kOT^L>$^Qb4=AVDMr-RT#;eTEEuUPih![o!1M3\kdZUM.rah*N1*mGe^U^T7D)JH[chl1ieQ&MIe;VL"%b$VKVhHn5\ug/_g97Me
%[(<YA>4H$G106Z-2d3n5YO-\)immVrm`%G*"rbd/o>N5+21%=W"'R:#r2j_AX[TSH[Bm4Vf%mD)m+`uD._BhGG_fSCbo#A6hs((!
%*L8fe[g\A\VJb+#HdF7k`N-E%A+OG\QMhNq1bU$_I=$,3F[*)q8"TWHm<r8XLHM-bUh0LH3p8"$6@!-_2Et,.:BR$0mUK2:Q=jl1
%TSn&lG$eE>F'`6ASi4"Cao*j\Hg6^.DS%LKRpWJ;YOB_1DP);/SV91CY93,u:[>hm&#ahgk&>U6mt;Ad*fd]g47aUk&"ZPJZIc..
%:W;?Io]!a=h*$(q&qmVZC;q=AeaB?Pgm*7gg'i9'C#QYml1;@PWIqRqr6jaGXd0KCI<XeH+C'@)IX75/s4CFa(PA>$T-GNX6[pL9
%LD78od9uVU'CrO#VQRW_@dqk$qbp.kAlaPGG/&-3'7'?<%r^&8Et!:Ch_6!J/(nqkdZg6]EdR(>$%Di0\pp.JYr<EmFS></om1';
%GUr!WVJSGc5r7m$ftme?OR=a:jS)EpndY5uM]ZZDLPA!<5@8N(qJ8"4EAjZLR3.`CA!iI6eYR?F:l!^XDh)OA0-..CP:OWDc]]m2
%h_$6W*ibQj$[7LLo^-`5R!N1]p#(CFloX"HLAD6?]%G"3in!Y/b`UPJ#A`k,K,FLfnB.Y)G,s)[g;`.sk\a<F>s-AV\Y(k"b\s#S
%)Hnf"K=lNajto/\D.P8!O=BheY[;UTgu?rT<i=*t<dh):1JYj?'FJOhZsKth*^X&Dr>*fG%edttJr<>H]2dG2Wjmt'K<J=V4*<32
%n(k*d(GjEs)p)aIkH7jdF*#f*X4T<9BpF06[QuFR<UTS30QGnXH]\/!KslkUK90,fBk//F3isT>4:TIGXmT#$Trhcm,ICJ3)?N@f
%.LaEL;6]K5q8S\+!=]+>O2%)-ESRO:P<a*7PA,`HgsjHcA5G9R:NI?&3Y/F#0%PRR2dcEq^ZCs$nF"GNbCp&U$:qMX_hbRZHa.EB
%Rn[V[j;]k%ZsnK#;1"=+DgKg@Q#l]$3h6@b2h+m_4!C6ZTq?,cAo")dl/PX>)<aCNo:cq3dDrWM_GZJf%_?^_UmLX:b,>U3nPfMk
%gtXI*\itX7(>MBQcbk!^])$$(17=]^Bkj94S])\,,!:U5f9HR@'ULa#fj2eKeV3smX&JdRLSRd[alui.TCh>2@4j7I[Xp^PX;_'U
%>`hB/#3$.T6&>8E*IjTkD/[=)is0U_4ueLR&:_b[`TT$e\#qBhhiG/c?%Ko'Eb*UX@IjUg\@t?bL*l5F*QFY.AhnaZX0SERCV('%
%qrBS04jCat32jld:!`I.ddkW[DVPX%e3c%^f['1QK1mnJnF`aSN%Z7h\m9%H\<,Zu.(%b]fI09M,2Z"7l!E8P.r[)_?nUB1ET^`T
%<7V,t=8I6kNpI8<o.0%bcL#BVR[tg9.j+Q]Gi\K*>RJ<_Yqt\NL[OEK#1H*OE*oO'EBT*?OsN8D3^Y@e_c86mMfT`<@%+i9BjmuL
%q??daQ2m^ig-b9d/+bV:8i]VlH$+E,:i5WJI3Z^*-t6"/:MU>F6?%!dAeU4M\<k+\r)?5E"]^8d!(h%A$2DT?IPjB^3Xgc^EG4nL
%.$s<F+euSG=tr4bnM8ZScEOq87im`X'Z$a-&!J)EpN6IeaAYScY0,,?\n]F$W66.9I9V%+VV=W'NQH[4p4L1daY+M)NF+c*)O=I0
%jVnt[pI^?S]1@\eAOKkQhEeY#LF<IKWha8V!m4Sg]NhmL;M>O"(F!5*N\eP<EpFZT;Pa`3s#:mU0*EHh%`WZbRL5=O:3WH0KQR<j
%>;+H6h:d$!0?G%8.!dM(!&<;bc?t:6i#+mPf-;,"A);kLULm0&^*j%MK5.I4bGBd:QPO+t(_5PsC.gngYt0dOplZfFbB`tOR[:W4
%8"/ZH1WbWuhqYA\XkR,<AP,8da:N,Y2!=RELKN.;j_<&QUtU$[p9<jAf__).cb%DL-\"Br:)fF0/FE]bBPTLdJpcCjgqp1kon9!/
%dft@HJYa_:-u?Ed3;,VcPAA3tMRR=eHP4@0huf0.9P;"AB2:[qO@Fm=/@-DN`BZGP^Nna(klm27OSriDDqaW!=-_[pn=o`hgEXF/
%Cr\S8r%6PB&23nRO;5El^qo'&-*E=AgoXJag^f'!]MBSL&EFWMAd(Em86LL:ZO(%D!9%2?&=S'!4gZ2Ue0Et$`"8_-puIEqGXF<9
%k$EP2'1%FrkjW$9\SWY_I"[pU5PD<Y85J%O#%+&[h<3lB_AAi7,2@VJmpt<hG>37,^I)DK"o4n(S14@7ae%;P!'9b2Y<,Jr>Z.&D
%SQS>JKK+b'XR/]<iYq]CrOsZ;(0k)eb%crWK^<nSl>F+*^HeSJUp3]EqWm<n5f/`i'GTia,BXX(1X[3YMAVCVMoEqnQGcq:*3ODc
%K#6;)+\]`4P45L)-n(S%C:;mQIGi_aj&u^cZ[pe*a3L0!oGn&dCIQFcE$o2^^ag<jaMP@K'ZO)'c3?"A%f@M*!7urX&35U!c6g4+
%Ym5;>d19G_ZY]Xaq.3s4G;,0pZk!#n0*s/5FTI/b3"I7%RZ"D6,pR(Y20X%Kfa\@oi4?H)RXIApOOVPZQCNa=3\FDCi5fiO)GM!C
%iX]%S+e1L]?<U;I2#n+l!0hAFH?A2Z`Wcr[S/@22HsDSR^!XO+R]rNBW>JTmZbl.6W:+j=>`1$:*A]0r/F9Oa]?1tjEeMs)F/\P4
%2#Wjk\jrte@2SA$IPOl,+6(=VHfG#oX;V8F'S^)gd_TPNfXMaBUU]&V!-c%q\=:`(HW2ZF*$O6XG\j,8*`=sRI<.?jH&l^8#K>Nk
%=(VF>;ut3uMl?_rJZF?@[k!6G`DKfd77>qUj8tGYp!;Hs$qbjP?%Lb-PkJ+sUnqJt^cQ5q<03Yf;4;,$10A`T.DkGn4IF6[9>6du
%cp3I0,._ZpP8i7BX10j`4g#(r<eWLc6+fIqcAu^]!\/f%Eh"S@*9V$"_QY;Qe`PMW_(./4X0:Pe!nBB%V^89t,c\^_9:*s/<trQ8
%$+o5d5p;0*OnuYm2A/6J2a/fc5->%0a3UQi[nDJdQ&f;0qY#K-:<49/7]cPU<IsjT!2U:K8#S#m1iiHsgd<Sf.5Uq.s3H^Elqa^2
%%at?'&Sn#&C]?].(h0Usq=lsR39!c8,k=g(3atG=A#OA=R(,?UL]Yt*I.FNmVM6YK0N`n;M3<qf\1B#7,8>UjfXHlZ6.4RJO1+#k
%bRiY91*le/B"''\50qgrLh<N.P)$RiTJiC72?KTRUbud0OI!rf]nodF]>NPnf^se3jn"K?fCM([EOWet.tJ>u'2rVgnF0&MgAuSV
%OkJuTWLtZiQ2EsRBUg%@>9(L%NQplF\8[VQhn2Dt:C0@7;/L4SU*_RS^UpN>m%Bjt\"nK:Y_<8LJ.b<IRT91V%U0`o.\nlW=KG?)
%aH6&9lV2QAFV4o3RdM@if?@ab.A/t.hB"L0\Ss`r7GGFZTJX>L[+ibknoVV0>Wuu]$mM7gm1AU/jmt0qIa\%dF865EI/rMZiN8hZ
%554^9/"J=SQZ'a3]%Be>?Z[omV;+*@pR'5BS]`tN8R:[-SM*$jD^%5bOZ]0f\ssAU0n=A[kZg<0TY&'#P,@j(gaXuXgUHV(HTIcP
%!88g;K7#STF"IIRfWFXsB-M3-q8=1S[fZE%7J@+Ne:Kaj/j+'Qmnd.739bOF,l3`N8RX&llAo<@=sbF]eU1%1)b-*FVskGp]:r[-
%GK6s?&`s0Jqc=.%TrRdNd&Pm+K*qh#i(N&SL!\#:X_ssK+[2Vrel%U97aNsN"!,^`o-QAF00X[-7C7f@(.PdB.pB]:_@l";<i?aI
%Le5ZIHn.W=n9Ler@bf5;X$kW7!Pl7V5`%b6-V1iWMD#8C\;X(mM[:XOEY+QAiRpPSEfh+<3Gp$A/%VhsUR<f'"k=BV-l-=afE#<E
%],M15SRo!:;3!Hg#oSFZFVEkfMD:.)6X#LFH8T0)8Fp0L12/eGcN+UD+>-/R)NZr4]T1!CMqN>;.b1*+jY5rueAYbbdB$lc]6:Q=
%f^2?=cU[T;As.hWq]/tmSQMHL89K;b&UeD4mJE1n&u7Sbq\1)sD\&HT1(p'T3"mZoPN3E9UN9L--gFH':/8:LR@q!UN>c&%=n<u?
%[[<$m831?8YO9=6o-XRF.q>J1UkQ"JoRaH;h&<"LAd`<g:1pu;33)[ab[)].C@3n3RO'ked[Kl<Fi5V(iXI]<l\OXcQaH8pT8;1W
%MOEY'p7UFXp'mfZQGZS%"'%0)IlfMXkRn0mgnK0M@]LiCpI1qF3BD9K8Ga3(_C_M/+H'M,/eEfdRtpKub&5ri'I/IqSSpg3c"qP0
%AitX!M#h&QouFG7?;=Uj?=Cse_&?p1Y#-u/5sLa0UXRj.3B.el=)i`V%4H'3qD9.fV^7i0p[*[%H#*2K8Ph::**%R[cp.4:qLT@@
%k]KB^7X*&+V^1+<$r'.!fR?ZYoP(%H#FO@F'qV!5m-+"^bNljpUA&f&pP,6$>1'VG?'H+j+@I=DlJQW&Jc4X966YC9fFRQ0"F3!5
%&qoJ$q*`"%gRe<@HZ)_9SE%9h>%&f)LC9.TnUZAl!o`roI=#m/*ZR=c)st'Y_[SnTd"IsP+.45S#SQt><3]$1@K>/RY12+3ZcT^Z
%]N@T@a)^OR%f4M5gq'5th*4s2"eeq;d,VQIJO6qj&07]B#2I4m".VH)3!l:e%MEW*2A*74,oZQ7?jL5'Ai[WKd:8%U;*\M_La#I]
%,=l4!NB+iH#3GZ7HVS)Br-Yc"d.HtCDaDrn%4st\5`i+W7:kV,f*Gi+=*i3:lX#Rfaa&Nabj1><LbnY^JmenKR:cZ?&r#NBPF4?q
%RO$WpAtDXqG:2SH)bfD?b_ol"K?VP\`sX0<'-Y]GF*VXjo0`eERHGW\bK'jC^,#<8c!:(Hp>4ASOOM1pPe*tSZFmSc1t7!1_I,9Q
%l:%C^$g$5409)nRDsTo2)/PGX]kc"GEWm*N;*S9c3qa#cW6aiiN*:TUG$#595t+AS!!ip,_A*MnIoSU(*qbBZXh^*T=>+m%#,5?`
%R#H#n#t4@s"sYHHbOQ%Z-<0ZNbAij^'%M/"0S;pY,?/eIe\A*o3)=""LT0Q0Z4C?D@pBC8`dUWe>Z&:ao[P]/]??"-;=@_036EhU
%BFp'9=d=1uS:FlZ'C:R.+C+WN][4@e$q[`N/<gAsO<iM_DZ`XqKrP?E,l@7O0M/SB'M6kOI$1QnFgTRm7<U869[lE2KGF0AgY/2j
%Jgq,br$4jX>cr3&ZQW!upJ$mFX^HSI97@+cjEt3:=Qu98CC;j0NB":h!(hGWZ%hl@r^]pnpXoD+Uc_9dLeGJL1F^Y2[-!uPb)<Yj
%6^UumUcbuOaDMG0.F/`>@HQYt9ZeU/)"D??+W[0IST+=MPiCk_\aV8R,Z!r'Yi9/Q:"Z0Nb'b5IGoMK>*S!W`-R2b4STi!EnC8og
%^0F3AJg,GlWsVXf8$NK]678J.J3G,L3e/suL:`oBU,1gL]`>)+"SL_P5dO71:YF`oo(BtFVO]q&C#:fi2D0okF<R:0s'2'pp+M;-
%b86KalM"ij^?qFW\bSSfk%hNMb\p5k%H2uR`*P\#F[4[:nWl6cba3K3I=6J-p3(`Pco0J_GIP<Q[g>.LO'B7'9n:\Rhq.)=<iIj^
%F;30'0KkU_?bE!::%l2Y9_N8,iN;NAJ%>-X3oNj-S)8Qd5DLP=/OlPlSaq`?<GrqI5+eCp-:3ppp_S#ZBK[UADD<?gDlP@dIB?7h
%cRD!OF;iT-0KmT"(Vba%h*".HTf43@SbKj/^R_^q0-RHT]<`lm,<;jUoB:6&Nt8D2>:l,Cb2/h_0fE"8^6qQDSY_=)YFLHVm\4NK
%,,g\$^9j1N.#3nmVRB-X49`N=3PUkpY5ne4fKrQ9^FQ[Xn=0Tr/&1:RAL`jt:/):il*Wg](NoKjBPoW+(q43?EH4o"0QK$5U9!J;
%on!n<M;Ts4qDhm..j9nYomEccYGh$[g(kdX'ld+k'sM%kGjJi1=a9n9XQQS*]oluB2Edp`Wha(>f%<B5/*:pWP!0b7@rlCjTZr9V
%"\3D&12k[PirQaOC@SqSCgpaJ(EMU\@#9:tReVPa@a)V#qh"`UTap)='Dl%MfrjUsaGi$'9'cqC.P]O<#FX5r2-rARXU10HH'0KI
%p#tg=Rb/EebIIq*5`'p4!Ejgt(Dp[l?eh67"%qnfZEE#lkC=3BJi[Kp71;#XY?PM<mbfte_'\l0K_>m:YqKdDKDbk"-2%LRom,A:
%OYW+WYqIN+Do+\\EF=WO6"B,:9Gp6-?Vjd1L]Z+&@UDr3'1T_!+;=Y3(5iE^fGBe&f0@^CPf70(,>[YN6.u;OqlIp"cK]Jhg;"?u
%K%,":YB(83I6eUX(5iE_fGBe&(D[,'7q,h%$<i7BgJ;9c:fa3B[*[bA5th,YI%F1BN:-*eYqIN+0@':X+gE[+*C1)/I4"Z55jI(>
%5=o=VY>=[Hi^?%pX=o!8Tr@bt.DFE+A+U7<Q<Irmr'G*Q$1A2H^;>7BJ]^9)MI2G`7'(EjTAgY$Ol9;#i_T(h7@!<Mi4t^a6<(p=
%)u`!!,*',?3jUbjT<-tH7-#6BV_DiG"MbSD.S_K"l;I\h_']8<LM%muPL:dj2WnKq;nsl+A)Ad[!nTSlgh&\hrYL6pmdpI)eCU8/
%ru@j-*;)jCpg:\#".fJDYN'6PQoBGk=2Z-Y7i2cmn)8as6s'$VJ#'R\9ri4p;[B.&H9(oL.m47`kPs66NBR3#G],ZelY:^V:Prg+
%$nfS1C[I'/+kM[(MUoiL\@%%)JX\npmWF;0,gPY43M(dM])//h]VYukXcss\R,C*Ed'+'OH4o26f7_q^JBJ&3,TO[cVUG`-VgS]-
%D?gH^`0(Ymc)(ASCHX#E%5?;s@\BDq(]>G*M\$pj"VX]NMYCI'>tOS:iq3\PMY^*?2/;[(^`_3"=Aa<r<h_Aq(C,!k-a!fE;$5&9
%%G6+ImVQWWX&5[A6<%/44EkDSQ1%;-n,g!P6mjRsHqXIV:YZ6STe$dadq*>b/5@?@!/fR+5AD/*`LKstQpPeHp%nY$A$/g`'T0tN
%*a`ad4P]I1m<]'?KQ-s294:T:\4"R6V*pbk8GHlm2U">G/3kefK1IW`hL7II,X/X\Dc-hf@728n#G*=H=VTpG'_?69c=F;OJ_Mo3
%5r]qgci%p1e]AKTP,C-j#$G%urs^0K$&9i!59Jq3r?G4jq`jgn_KCB:hf0UokPj/!QCstgj@4EUrX3ak7VAWDX.oR:-<Y3-cM\+[
%k98+DV5Hk'(sg[JU-K>?5;o@[;\'"Dck9peb#=@Ma23LZ03+_Kkn7p:'srFroCZr3ftOC#bPB[a6l2kZci?#%B4OGZB)CRk-DL7C
%99t#+3A(q"H1q2O^jNd$Fb@57#Kc,gg&b^&N'!.O>c^)%KGcQKfY#$eH9f+*!ReidHO"9'Haoj)OsX'q+cXRj7Zb!a[ZIr[%;@Fp
%&/,/1?AGk$9GY(q6.i:\'<,f>k#WH/l.)rLgHmspW:UX\EPd3#iU%`u_p%#N9L^S7,gEqQU]Z[Wp#p,NH+/Ja;'L?P*([P?*S&`e
%*ePN0=V2fsX&27i#f\LtR9kop]N]K$@./kZG3tfA4.*ZbB,X^:o##35A;ZZBVA(k(Mk2d="u!Hk\&C#^gWSTCP.$q9'e]4gq/iH0
%aCbuZ]]_f-&k''KDss4C?Jj.P=0;=)E+[t)ah*AHs3B1jh:1N-bX9XV=&-V1!r81Zfh[fH=?^,;(8<umY%E&.XtLCW14L(fW\Eh^
%<qEfs4g\4&7\AC;Q!E8DO/?,cf'QN:3HEp"bMdb<(?1SEGX^*;m7P[Q3o=Y$8tbM>^JF0Tn725[NuWgb&@cp]M27/\oLGp_?=&Ap
%3d7O8<*f+8T+\(j,[DI`h1W7@3kj>TC)*2R8G8S>k\p-qCM7.:RdK-R-Fp=6QErQX?$)X99()!g=h2LM>gCHK?k.m@3!e!,]NO[P
%rPB9EQU<cs:]+@*',@1Ngq?;9l("1j3\rnhriR(S@cM[0K]aGj9uJ(<7XF9$FMR(Xrt=Bo`<L2l+&$`WlmHbqK;s2uJ6Qj*AMgE7
%JQnhkMAE$WV4s(WDT/Kn`<CmW;jA7hTY3`&'pHXfAQtj_#O3(=:i]g5*rN'9^#r!Wa+,J)2c^bt5bGKEmW@2L?(77XeLoEq]@%UN
%Du(F$"o@*>RUG<j$0"mf9)U;mqjG^<;VuA+!:K.Qr+Y%\ak^>jr\PJe^=U,J*bk(8@D\6so%eH+V'el,*74\KR%U4k^k`LV[hS7#
%7ePs7b#=(6YtNtBbiY&P%*Xn&a+rHX7So-#ml6`Q!,\IM6nLrmm$HdU^DQiLGTmcD!nIYRaKpfOkD4;eE0Ynfg\iD)H.Je'p.t!%
%2p7uG:&%KW$h3,0kLh;X>;;5=lL&QcfRIh;%2pkLlAh50pQ8Z0"mY0?-+jA+M:\eb.)Lc_%^.JX3&._!)9E]HiCij#_$jR[lksO:
%6]V"1>&8(S,,E2LF@6Tc(PT6!/EUipd@*#-*&KYF^V3SY8b3ORl.L,MU=4t_gb=@JpRIE!],s(28g7t5@[GZ6/1!%)4:Vh.8t(n[
%1eL(0LqWkVUa_.r..p3Y`$pP=q1t0!FF6\)RE6APKGU2BBQg9]/tZ$Q+'.U&Zp/e;@0Akd-BBH8X>&H!)!GC^Z#2Y_I-/Mf$Ctb&
%5C-G*hidt+LD:H4mJ9&K0K*EP0S^A]@L[JGNuh?c;kQZYFi\t?e#TYXGI?`'^dGtEXnk3McqGi,goa\o#9H@HWl$f<iWB\nJK)P1
%<o*ohUKpF9qFsetAqC*qUJEt1F/BKjGSogSRiofH,WbFV/5WnG!tRQKI+N(f'BZQ;KCAt5S9?lS.%r3O^r'jK7$e.Yf)lP9J9/@'
%'>:%,krnO?='oUW!tU$`e2lu9,5t+?Z3(X7$\frkn1ZcXF$So[7%SSc,O!tp4H)Jk0MkR2jhScel#FBXGj(3ant("A\OJi'*eJgu
%@@pu[U^%r1B5LBP-6jTSjVO$o4H\it_O_;:F[pQHFl8skQ7hWUn=itp#9H@Td7jb6("(K]LXEQ#YnSpC!tV/$0S@dXE8[FLc+qd<
%K?'jE!tXd2!`(ldp";`fGUqST*_,IPDX#j+JVRZl%*!":6s:s8b!kB*LZD\_k.nl&k7mW^EY3]QToT>&5O^B&dW\Il*X:5*9uau6
%_Hm^7$sikL/#CN@DP%.T7Xtu4d>CVS9=]jAn;oUmY.k&L4_\G4V]EeK1r9>*HWAT0*dAMgDWYYg?3R@\MIK@'NAkh`%m2+#Vm-3s
%fR;JI4W/[)0teZR(i;W66u2phkeP)LZb&:EI^?Kc%ti<O*9AQt`(bR9@C5T8Ro+1Y_/T]$P&3/.pOS*#Eb+ZRLD*7#EPi8K9Uq$q
%gOY+\[8;P->*8suI=?-BWkRLnn+4?4kYuuV;FE_S*_*cX$t_;G!tRP/CgEqZ]#@i[#9H?=pWhF`H/N,<Fmi#M4qBdJ+Kat:_k(^@
%s+,s1[V#jZ96fA<6!ELq'!H,21%;P;1B=;-mHV8R-0hj)Cu5Z\^r,@]h$?.qfn"p@8\,aQK5s(ES9EP;AeTRM@J%]q@n(SMBX.^N
%""1*sg*'$m-ddL#d:=t?D[oIPZcaMYmZJ<?>XZH>I4fEmcE-X(N:`S/H%[Eo6N-HRDLrA@U\&oK]IpBJ%g,pI\G]p)9tS?4Oe6%C
%@>Skl\^t4XR;%imGDi$6e]dqgRQZmIX<NG2VD3C7Ep6^gbH0!lc*<n%p`(q<lS!T&[3J$po=Kl./T'=gI$pGYCG/HFb3,1lgMas_
%bf/c0ip:IPic&4LBrq^YLMm^VfBV>dp?VJ5QNQ>9P)d<F^0P*mXb3O0Qa9loC+")P\UN16>^1KA/2."4jaWdW:7'S)TUFC%QgM4>
%Ha,9.C$a()PcC[M=_d)1IIYKhja('55$HTdRqWj?e_+P3e$dh&-^X7FN[C1l8UYlt_JN4_C29"_?[aV+44EIL[<$BdU1q$;<NYku
%3Npc4*'ZbG#l7+;06)F3XgG_a*oEZ"RD]DV<9ZI@T]sf"do>Ht$"W_kf\h//9taj1;U-;K2f]iPkCCb_SF";2/C*G9c@bXeVn%_P
%X-kn`]."^qIQfqt%YqI`4[$,.2g]U,,HfYiZ_nU$qt&\up/%bO-d<Y<bBCHH%+WtXCA)W7#LLJ2=e@24X\NW=q[CUq4U4i*U3UBO
%_**dlcdk8I=JT=)JXY"Cn%e)l,W@KeZL_jQ.`7N8kMNGO1[V$uZG\n<ng.ml)t"a6Da.N5*p7^#n&NTa^Tge)B$RH2qu,bb$nId<
%q:k!DXr"[a#pO3Ko)`*h=]d;Zb]_,:]6emHl.api6;>bPBRlPJb3PNbAStgUR>9V`$C-b2<fu105sZ9ekZnan)sSrcFZ#H(M`ha!
%G.Q/ofNP")4L^,r6EAijr*3IG5@J#n^VS7`<TE8UY,pQ"m*)A'hocOgG6cXH\*`AGots?1\p^fe>e7Z&boM32I#hFn_SVbpe]kLu
%>XL[(nM<*4S(fI="-@#JS(<44g@aCY,l<*2UfU_'Va24U)[A;`q)@C+4^N0d]39Hdardgs+$=UEq`u.`C=9^MgD!+!]t7H[d/t;^
%%l'R0X`JUIb[(&)o.j3@c;nm5\h]IT1Pl@H+XS,=ZFW>s+rQVseY"EsHQr;XRr=g&iCZtEm&+Q-Co3OrZLk4QN/O_Vg8X.ReS1:O
%gtH()c)d\2I*_EWo^buK[.8<@4P6.9E;Td%[Cp"blXd@Wnf<3sSlsi#J*NrSY56ER2b`<K=./7+V_cK@r>4uaGL;hXQ+g3n.0LH(
%PK\5)cG+4cUOW0#/XMhLKW7\j"aY/=>HnD"o;XZ+9_#3G6$G)=]a`klo#LVroSkat55uLY.i!JBm;EuIK.3o]&0(FS<677%nE>AD
%=RU^4SE3cM$gm6,GNN,SlHpF!rLipH@ntA%+1qd%(Gf?a>+?0RVLC7(>*0T8D6Hmi1D]:uKV'D+%?R(jdlCion4imGmBk$]/Y4)t
%hS[D$k6:L;[_FOl3G=/<4*p&9D(_JOBBAU6[tWhI\6(AMNikfLHFFhUV*(meR'G:Ki/:g-5Y?WP)hX-9'5s.[=<'=7jge1VmF2&X
%7W3-P:0R#*V^DrfKk;;gl9D3"*45[!@BG*Z>;W4e4LL7'hQg/Bq@1hr)PJ&-l`6&;Ao%PIC.qD;Ia6CMp^gMSfIHgC/fFRcT"<j!
%jiD=e1IiP^-Vg:(.bY]s%+cEk<PV,uP9GRMY1E$X4A`h$^\UM%4ePm=?P(I(/@tW(MUY*jp4HrN]u+F"5n4=OVH9?J1<'2f.YS[>
%4BrZ$IeA):W`c3#BD,YJk.$3R`*d4>LJqoa\9bVXATkMKdE!?eo=%HAYuAZJ@aPl14,8(ZL4;<Nr8X/"]!*\)3gDM@]uP&tWs"<R
%Th;&aEKj\J@!?laIlpP'$fru&Hg/_qneSPue'"rX,t`HrU(E;jRItIQ?FXU4j0:DTe^D[iAH":B-l6Mf"IR[3C69rng>,8ZHB);\
%S8?P&hgXo/j0b-KR_s6'/>tA6\V6TIju4bggUntESlWUPLsWn5+Q[h@i&"A:af[GWO'8%&If"M`IV_11:"PVTatX^JYijen@#ge[
%c@[Mu1t\J6$U!oaDDM[P^,$')?$iI@NJHISD^4B?bg8DAh%^?hHPPt**M`O;76GOg?MNAfHU5.,3:3_r>M;Yi]=EZq%WA<>2?n&B
%nnHWVkJ4"11CMV_lQ?gYKJ>KVT.*rd<9CbAaCe`md,g`;g)WA7d#r8h9I#:3e:bZM6JUs-Kje-=>Xf[G=SJuUXF%E[VKUBmG-iYO
%J<(3\,nr^0J[bY]r9D_^d68b?WfE-jQ_mJG^4(4kem.aR'8GY^_)U0=de;iM)(W_HL*`dj[]8aZ%,Et=)NOui4aAoo^L0)ZC3@[8
%[;p;@PgCl/SQkR^)2f!QDC3mB:<1@9V.f\Z4,bZElGDT*q,a43DTBMGb3jJbAWAs`ps"d$k5!4j_A>-DTK?IEo]E4,ZLG*C/pfLa
%q/5/Bb@!Hbh0F,h%chPG=+cTBRSbCQ[ancS(*8dSP^]uSj2#Q^gb&dA9,nQQT!m%TAjL)#s0qa"D,D<Xs7#njQf"K2idaX"oAC$:
%?mLae;)9$l<$ItZk5=i5q<ZH(XfB'YmI"_'BQ?jg?_/El`NEq*W\rD.%M'r3a.H.'6O[KQmUuB&R_.;u@HH,"f7,nk,_4=a`1$/a
%0L?2YXE-_h76,pl51]g-dBZ1p*DtDbi.0@/P=RE[8U[h,I?oS+Gr4e/+miqNH#do`o/kAp@aacl6%<bfdO*ppl?q2L6J<TF!OqRr
%5mpi-I';i9>3F5d16d4"?P_1G9SlJW.Zumgq"=$>V=Rup+ns6lTD.u5i_qTCkOPO[rb-N5I<3Qd]CC5>mV=K$bXuT=Ir(^INRHJ"
%f2C>MqY9HhR$lCJ]K&%mV2=$=8X),U+04QX*(VAe#;jZW6@SOD=a#HUkE-5mUeTYMWQtgAgT_67O[=:LVI>.MRDa$].Q2".WH[Fs
%CNJFeT.l*KeOn\IIrVn;=o%df_F/2e#P!?Q=dd#^obj`'JmC`]<R,\U<j"S`#7Ke0Wsc6#A&[dFT3O#F+:DpBOmqr7q=C_MSqr=-
%-LkEn%r-S,4k;VSO7dGir(LY+5(BD=SPtEC;7X(%Q:DJ_`(<X3Sa4nq>Ut;0\UV<jp#2+Ro%3%h0,:MMgpb1Zjfe:<;ND3a3Ht"6
%q<PHS=3=lODI"iDICOU*r:Tl\lfG>9:D\?\Xld'A>KSk6Q"O51mbB:Na=r*ah;#M`rl*>*T@Rn`0)tbgl(?'hA?X=g5)!@nY9,\e
%AlG\u[!28?\[U>ePC.aAg=P6>r+YEK4UC,(T5h>![O9dX38[`bgc2ud3r-t*8*>4]'Ti8WpG^DEQg0thO4depQT@a&^4#+5>lRs^
%L&DEqm9Xu#&s$5;T<*INd'JLopH'=^SLJ=r6L,)jf1u`&!`:EE`,<TG(RG!!=)Y9L:cC;8XhsoQ2Qk7?qfr4gmLL9*TO%sd\0k?1
%/h]CKI;-01+$P/"fX0Bd2bnGedIY`o5Dkqs2_M&j+'tP-jN.9h09J[qYdpHPojW@r-![UsX./s@94db`fi-Q`1>uZTr=J1AYWNLL
%6k$shV*T=eff"2rMS$C![M$)3h0Ka,[+JnZnpU7Oo@p;`IF%RYLCSfPmFmhA5PP(2lqFs2ns[.8mboC6c%th[q<N."BW%?`@:]-1
%8=,[/*rU>e5Q4#>F5!;D+7:J-?9&NlrnPAV]lc^@IVD/jG0@al='o<42kJo0i)>_87_\o]XI&6ZHr&qk(IVNp3UtpX>M$4UB'mK3
%V.4]7dgE[DD9<,jfqiuh?%d^YP!:PWr2S_Sd=qQ&Dk0\7'Ie*2n!&41qIGG%Epk1aq8Q-SHPqM:G5WBiZNb]mDC]klg:>u'VL!ZQ
%$atVa_:SEhTh-X.jl<k[D(b$N)rH)lf<<L>p&!itG<.+:]Q!T/<P>oOr^.?-BBKMJ[C!6DFo1DDp#=Gq-slj3IuDV4dQM-fH8W1,
%mu#AV=0AeY:VF8ZmOmYo&dU]X7R$Q*0;N[,+YHSZp'\NO;"2Mr`f[dZ`N4M3CbD7Bd)(6;FnYL'95<nk]P[.1jIV/SqgaP@pPJTI
%C%#u:2-tUEhOU1KpMB6Xgu\"NoO?8/!US8'F^p>tc-s-cjUt8Uh]?q$8pOXD?722R3(FBrq*O8Tj\IiYq=Nhs@Z#eaokcfMPqRWW
%6RRb-eod:&6=,bs+D;s`(qS@2)lu.t]>"ZAmW[YMDXP.+0S\>k(*>1/b],)#lBN)^8?TTN61jr-)qWAQ4;Yas-(=`'p@mHkdlG%(
%n)#t\PRGeh=D_0mHF`VfO>06fnC&UWe7]X<e^De,IUa1b]!6]k0ntSd1=e^"lKh-d7VpB]%H$B'9OCRa,9Ot,4a40njH2'TrI_;G
%@B\Y?s7&I/k2-7s)lG;BK*=("SUrk5o\qn0^%h$_US0lRh(9V^lfkEsR`*[ao-7O=Im8Z"[Y*,/hr!6:9L&J8`feX'?%c9kNpOtS
%Y*2kj!WVj#D=ZA(6Zr"k:\R=<%aF6B,.o;<%2k;n`QB8]o]"--0dlWWlSGV4\[T5So81PVTUY/b;_GkTR=9X/o$RBs*jbO<g.Q8I
%a`TZ-2^C,I>>#5A\qR8)Y2"V1k#Wm/eCXPR./iNS<9f226.;HA:4C(LnjU7ee&j/E*f5/)_D(8o`]6JDO#Q"B?V+tPip?11ptggr
%$ZFm-?\0lie]j:.\)i>4:Yrt=)bhmZeePm.p%r;1X-N2ag9a>)L+GsEA2l3ep;:jY43A6VB-09062SofDpS&7m9Hu3GOM0e5^jZ[
%CKY9dI[S.RHLBO>!Na5/Id?['CZ<3Wr;GTnGj5%[QQIk5RBY_jan=DIob6G8c]LCPJ,I?N^Ri!`.#,4?1WR,ultk[+2h+t@a`joH
%Gf4dR-atbSENCXj*1i27%6FC4I_1/)M[N8OlHV(<G`Ds9RLNo\V-=fH2D9NN=#70sfQDCeHS5<<F6^dCcBA&&ggth#hNs2<WS$)Z
%]T3f+$1&20'T.,@OeCqg9ZhG"5<gef`;QdEAp3>t@K1c9)X=T'#L<bAd:3\GPOO@]erTb-7ag&I,h_bC*E!\K)mT4siamCDq6ask
%oE63&@@\]FH0#LSM)#Irs#LSJm_qDVZB]NC;p[7FR*p6k5A9V-^Qo[:T3TgB0>!KCT)2_)XQ+1rZpn$@?[#h(=+mm<K!/m8.>g3H
%_KVH9e"&qe.DH1o\\CTuI5lG/cGAKDSo;mtIJWZXo2jPYq&0I9,SJ$omH^[b8^<P*UhsptF0b^JW<A5(T(KCTSL%Iu_as(Ko>a\r
%mXh]8k]=qCB'sX3hK%0Ioj,6'?,e[m4h<+]^\IL4+nEMsZ2++Q<Vjc$Fl$,HCAg;0RN'Z*R,d?ij,)oq(Q&Z4])?,[Vhs#p\WL0o
%[6>XD/7!NThe%`d^_BqQFan1)cC.;nEFjFWXJ+$0YN*q!U1%en?H8Vu7DmUf]oG1t.u1i/'>9Dfb:=mSN$WcjGEu;tcj+,nc'[Tm
%9,r;gHKDZC]NF$L-[HeWQ5Ak$j,%*_S`RgOoQ[+^EG'POV2ZjK*G^rW.8D7J.Z1,7WItl83fiV4'$)?&(A?&afh?=G#%>5qo`J=d
%q<UeC9B,p#R1JJeDroZa@HLbF:]?fNe+2u0(JZ=*\pS.!lfnC&V7:>I\9OV@^&I`Rc0oCKIiA&KPE;(0_1&;Pl?1Y''g+'>i2]r)
%(U1<Nn%:%#1@rhuW&FE/,uItCc#5AbUt+7sh=<e5/H>]mEJ$`/^Q_M[URO0!BoiX``7*X?I!rbO8%pn!bfQ5VI="+'F&=Ub72?#I
%[+s8k:$5:dDapd>4Z)X,^T/`rniFjCpJDD9*duc!gq1>1om1CtE8e`:QVMq9Y]r[\-bC>dDXD:Yril4up2@TJs0T,C]0Eeb=BKs`
%I-48/2`B:FD/9\[[:oHL02`i('kN)$:XYI@a11XhhL<*-c(ce)2dV>R=%AJJcb0;:_oW:)rd_"qo)/@ReB&(O2L[i86/?j7o'FN>
%$i'Btb)0S[XF3aMe*Z7V-1U9>8^cYVmQ%gurUP/r/t%aFKSGmWR5qs$"ZH].d9plGT00M1mp^0qna!;h'(8VU?EGV^H`C\YZ&*SQ
%SQc#7j8#h%V`2?CpiLTQf@u@X\pMU>?T4C6)jbH]Dr*[fq9sKbgSO)6]2rohs7l5Q`>*UfA^@eUr8aqAs427o2]^-")UA$SDG.Dk
%3fZmHCjVQAa37VWjUB-%LundJ?UOfaSn0@e#D.^[EZf?Am$4A7YQp#6>okmUD_8=$?Bf/]BAU:7`Vi>&j'$_c7WKGP.<0RGr'PPt
%n:u_g%gQha,:V`pOZm+#.\KW\F8C,UX%5cCf(AL$<`/"*+&i#\9rjpqN]V[%VH#=uN]2C!VH#k^3Tfu(RT@8*3SsDuRT<;N3QI@J
%?HX@-ieGL@5$lDQca*1&e&Q77j.i^I(t-H?\`8)N30s4,>4+?ZF56$?[G:;h&j9.hpkTl<`.,i,!]Z3%QR%dGQ%_HJ[n3]2o4ttb
%9-q"s*49Z^M>,;Vk9=8[>]arJQOC];3Xhnt>^c2&gs%bCq+2lLqO96WqRQH?,]-`?]R7K[i8MbXKrL,/]foIlYET&lo/Jnca88-_
%G#,qI0opQ5>`r0D/Sq,7dGA,QquQ'aKQNsCjR)A<$:ddBD:i"6"oac%/Kemm-i2M/EhZu4*'2?BT6S?3R\T%6T.?#mo:CEa+Q6e8
%h&8E"/O/.fXhhno^4usbiUAkTr;oK*@3$\-F!NIe'iQbTc0lkUg*,ECIT1D%*erkT\`&<<%-NMQ3C3XX3RM(_X$PeI)>5YYNV2i.
%r<Q7AOs9GGH96rs]plQ2BDSBR_itPnp1C[mQQKjFaI>sM.I%AjVVdL@^W`;;s5:kLj"W,D+)HD-jk@WG//N?pgS0aEb9,U6qKR5T
%i(6nQfk,D4IB`Hge&SecXq.f.rNl0;XCo;TAGiO]I<"T)Q%!/`#<T7j)Af<AOjZ/^&(S^F#MUV=VmIOiB;`+Lmq-"HeA9>A=pJ/(
%%iN\X[u`O=`F_DMDa2LT,L9[i5.@V69[h&*&$nqRGs40f#b?E7T"V+prJn$UU^L=t?-(b<l200%Vj+)7b<knlcUdGRA1fQM*hU0<
%D%b10q.9sWXZla4ol9QHO)H)+ICsqf[7KM7oZ0.$DLOPN)$`jp9gMi*XE.QU]R9TrB%HcupY]gpT9W&&5E)3+\dn[!npL8tAGPQf
%2dc<.4oJ*=A@HS;.@Rr'7@rtY\DZ>Q%IfmjSt'/6Al8X&eafs;Vl^B6j^5a)I3qB%2YXB[<a/e_o/F*Y&N=6QFm[qS?W,%tR4HU"
%nq8SXIDP?mq8UJ()!BRo?YSnTbT,4^2a>$1^:nV?fn6Khf>oCG\^1KO0]-<1C2R1AqPAQ=W]Ah%ajW^PiTQ^S?s:(QY-*Z!)XiFt
%;RUX$1tga`0no]5bL+E9mncY:I'T(InXN-k?bh#.T'ZEHrA)$i[NBPq&!kQ%P7'BQo&.f@@7br0QgN!%X$ck9Vj9Jj,[aeHc53Bc
%T;I)1[3'RIfphg)E%\c!TA@&>;In')b=di<D^7F@dcPIhYEn(U>PFJm_`+8Gn=*M4;fAF>Td&7ed6as"p2V.\b9s$I_#=0$)h7V\
%iX^sZ5BWqa9ctG?q5oSE#MhC&b>!Grg'--\ntkE6O-3Qdcf36HT@UaUOW>thg*HG$S>Yp_YAaOa8'q%/]Y?+,><Xu+C$G#K+`\JI
%m9JSY"6S?Wh`MpljXYU;Dq@rMSX7k)';YLaIsZ$9Dl.AQo28qBEbjca:9Jk+Iq)pSo')(9GL&C^Fnqp1@tY4H=6TJ>I!^3hNA&Sd
%),-AiU>5coJ\@(#o>Pe8VjkGKG<Yt)b^BGuAlt8O>#*+$hc\XHn`nUo`!rnW^@p'P[*G`G=,UVa'EH[][n`K3PMDLn1p3U<UYsld
%LNP$ehOf$:^J8_rQf@!&M(OKHN(`^1rkp/&mnbXUchJ.i&MD&a)[&T:gt^^6"/5o^7A.\jqk)a:-hbO-k3K/*e[<.M$*S@l#D2uJ
%rorH.W\@9#dOuB_eX%Yt3kMc/I/!?0qbQY9QlE+NSG$E#EGtlsf)#Bs]A9m.^BPJlp@S74-[0G:/e31:/e-+Sbesm(6%>HcM!PMn
%pBAQD4Rn[R4T,fi\]DP#a,e0V`)*DjPT.s[65pU.K9ShDb]Xi:1LB'r?o29`6VuJHT!"c>Zm=r40DtMarU^?2r\KXFnGV;.?c?F5
%"T@l<M6F"BK6]s[h8/=QdjkACdnfo9o&oqiX,0q<&E'*[K7ugbCYOKJCKhT.52'9!?e^"B]m9/-12Y_,hU@FZ+?B?_q86k@6i(Q^
%h7Lg2g[E_Nrb(QWB)YP!lL!EamcNB$[>h:a+"pq7#CO4@IiYOZS\I@8BD9`[mB)AY_8;Dl/]?fon*b,\^7N^LLVM]pcgn<"+2.QY
%]0Up;c,FMDB:A[UA#ibPSuJtYeFq1t6VVVb=Lb]L5PFW<h6$XX[I&aAei*6QG4uM)ZN^_:9`"adXc<9<#Ca(d\b5en1\@O9kLH\!
%2]oe;_[7HdmB,c'Cp;9%>K91[G%GN7@s`:chV-9;K`:j"F*/r'EFS7X`TQD30Qu,)Fp5kqVG@.@q>1&dmqscXn9@R&hL>D`N\3AQ
%ri,^#k3"K2)[E8V=p<mTK=0Df4"!elN<L+70aMCSg1/-XAEQ"bTbSh1k,f$/&?TTb0%<_PW!_b^M6?uVLlMYcl(QQi&B)_b[F#^#
%9agGIrUgh2F[0C!-`,0o$T(-[Q#Ufjp2?HA7Oc3IRn!ii0B_+WWBVX+0EggJJJrB\8ss.E(=LK]qWi[VS@;.!Za=V#G5W0BXj8K^
%`6`00Viu=.KV8u]+03c;@H`uHf]SAc?g?5_:&s-t\$r]PI5Lc/q"!IWm8*Tm=N\G]n;-IERJX'qWu8pKV6)qu*m_Dn7hUH0R:(XY
%m>1oV_js+<Jmjdn4mDb@K>_686ks])&RqC&\'U<.\%n#L;ZlL1"DT)@aIs+#p)(QQFr6/q4iX\5)&c"'6JK7%(+Y7+G11+I4gs5J
%HX+;d[Z%ic^4S8K.%,NGhid65b:9;[Zh=agri8_"g,O3&ftW+&:NnG*0`<XursR<U=#,3+LGk=O0Wtqj*)^R?kpnph_3kA9%8d[k
%<\q@)TZ$W$o)qlu.&,'/5cS8>Nd6'U;irnQl.L)j@6P1/,>R-=Y+-HN)"aJj7139PBA>hQ5A`sG-DeG,C+"e4[Dl[;!n>Et4gr^\
%f%W?$Zaan7(',0Jc-#kd1%Qe?dUo-E$X/<ercju=aqJ[Pn[&54o_X@8s#XB`@J9JG_YOd!_$2(*fqEr*i*b.)2/rZcrqW)A&B"1\
%&2Q-!%uha_(7\_E?PF\":iL2EXO+N[kXf^ddDE9mNL*am#>)dt=oTn32=qALWjL>&;7lg](_foAhq!-1,lfIW1oB7R#[e(ca]W!C
%=+H`ZdEa3tC%r^U=\@(kZec%tB'&VR%@pRa-tS(X.ht:LZ2=](r9=,J?hjQ6PKt=_O8gl5p^J&7a7K*S`4cIhk6=_3im>PhE4e/0
%,gtVGQD@r)$dMOGMmQa;M!(m_#S,#Y(nst$_n7j'8t?n<$a4`,(YlNoE0bWeDQ><.iPa9B+t2*DNrn,T`1J8Zm=#n3jKIoH_4.b>
%Afc]L)$CP1L5U`iTcZ[QH!lo56!Phmb"*Y?`[1"686uV-IaYq87bOK$)H.uC);2o'Aq\P=]kK@rQnjE8LWUj7+WX\jQBnSq0IjuF
%!1LR<Eg7hJBt3a<OHKd(&jrK=*rsiBH@b8ld\<j3Phf/[A5$)U6CM/P_0K;^F!M\.;!M9C6dkb;1u',M'S$3XTE%EM"JH]:+(TsA
%Z:Kq96PBN%JN3o!9ufM`BmeVB6(>KV4CuoZ95S@38W[X!]&)t+'1S`r!ue'$Sfkj\HRkJW2GRh^,\6+(A&6Zg+X@q!LjP5?,r/cQ
%p`U16ePNS#a+q#kqTsqie@]AFG\(SoZIk[Th!#*6/&cTMW<(;46pN#k"+M/iY\=ZC2d.g!>E2'IKPhoiQV3*@C7Cl"M*qNp-\*>F
%)H9H4[9S$7aPYZtS,XA]hBVH=)tB!hZaRXJAjDjs!OR,"MR['jkL+.uV6l^[QLf26B\*QKUur!aa/LC2YTK%RL@e;YaD)q5eIA,<
%!5XfKa/%o]iIjbDN]/<^P)c+LFD.1"TP-)TQe%3WmaBVF,'69[7/p9s9r'#DPVaI:=B_/hs0N]cK>ep5?JKi(ipPfY#E(7$T02u?
%k",IYS\o,NkVFH?K<:P\)J17O")+/P/2JO)@>*upT,F?)[o!pb8CGVgaqVLEPtZ,nX9cTYq(st18:ou(_2,[W"WrnLW+f;+j$W;9
%Oi:]84sU;GQ$i'/2T4K5-L$6o8NP=rO8=G;&NRm"j96@:ObQ67@mW0&-MW/td>;J4cso@m/0GmA_1;Yrc_PMrAjCJ%9`[i`#C^Yr
%J&d"#:9_)/pEB*i54j(1SPU-4<Ps,F@8"\%n^+Pdr>'d9W'RYQd'=Zg6JrDs_fanNB:i&CFGMu22QG[q`_`kO3t9@6F_eur_/\si
%N4r[Z##j-Ii&?tq0FH?C2md7.>U[)kp=^`"g[Ua?U&WC8"tm;KHT]GhLhK=9@p':(KquA\nJd8>0n`gO*Ut)3'iX[mb.()CO"3LU
%Q6ktV_Jb8&S49^hhE(MTV7[(C&#<O1!M<kQJ((Tam!*&:BTftaD`BrF>_M#mGZ4^'[-^%<A@6-&i/o%2.\[.qTj![W)+eO]E\b!>
%D7)E[<CRAG$sJEXe4kElXNbn7L/<5\RfI;O=G=%HVc$)N!Z`@79qtp$3K4)D$lIo_F`%hrkVs3-pMdX.^rfJf%Ut5F7ur<nU*[,'
%oA2OpA`+Y^cq&eJ]\U62#NCf3!HCmmJuLg'Do?!;@#(a3E!H4\rbTY@S2"K@jk2&T-"R=ElH8?'-j^P_12IXsE]I5Z&R(]VarJi]
%T_=PU$mQ"dK9cb/IT@eU*(DMO?1lp46:oU_TI3(LK0)8P)5sr0CHIa*[A(3o0cMH*8_B1#--M3\,*H-teKeh3L[(S9;cTCYeX9tH
%*51>7\=D,DlB(WB.!%0=fUtnsWQ[h$-N[3pkpR^KN4.)8blK66F_\XSBT]Yk>sK"]nnc="!\1m:T+9*J.5t(I$4po::c4pKG!Jr)
%#g4Z/ej2k\nI?27)hSh<R^!bFPA*;J]nn[E`2-k<!]M-!CB7X?(P<EpAi;3P>A0W'Fq<4VYSa-$6NrB(k;Z/'__%N4cpEfDpF/[f
%oQm8+ouOkn_t8:,^<]<=gM?[jIid;;H,TEsiqkjtf`,aEk@+(/epTTBmk[\b+3O=L*/Vm+1MKjcmh<]!P,A6K^/'kE_`Tu;[,oIf
%h[S)n5D,TMn/H>,Zjb"eJ8M%_/:E`;'uWi"c.)ke9#65'h[scsMZQ;=Hhn`UIg75_9tpj4BF6006jlLQ3s=PC.dB;SPm.BC(KkV'
%Kht#X>2fF39;D_(a!WSPA#p]F"Qd1e_[`-5^"NQHbNjmrE)96)!F`t-(o.X+rbDZDidqh"n#Bj8O?TTiSXr`FE7`S3r?[ErmgPs3
%@Z176;7,Se]>4\6XDkF=OX4XK%fRDf-.;H*&dGj#o5bZMXKn=k2:E'bIDWmfFh3*dTaV<ZK`g!h60]*$C:FO@'XU\;fop,S!#:ZU
%j.I6A[!dR3Q=;TYBXtMm>QJEe%6IYg!if0M9GW8FTJRN%"YHsHpM(5m/?ftd5smAp#.3/h@3l[jB5rf4"K#RDP%YG^jMJPT8JRsd
%A-3tYP"$q:T1g)epddrDUG.9HTO@@N15pr#Ebi>X]XH64>,;E5iA_][$H!j#jJD*27Xh'#n/Nlj#KT?%_D-B7i_pk9Y+^KFqDZMl
%o_g)jnGffhF@S%'rgVp=&CfOuTR>>#lH)i>(>GY6q[\j^>\tNN'u4k.?i`^Z;1'E,nZUHiS_]:Mrs&P+kOJP`]t[/>g+Mdp_-:[s
%0r#+]YQ:lFi9A7<Y?[:NdeO4nZf+e=!c1iT0N;6<a:/Ok[T+70C*/m->c[fElHl\h)<;PNV$8Q^#ked938t&H)pWg0P8rLmB=%r#
%W^,.'OA5EK,%mE=mi71!OtWNWRcKbmAEJ0#>M9JETHVF<UQ)oCrQ&.\jS,l3&^L:;N_=9;A4UL'P_(bB]L]fak49ZRZ:fQo#'$lS
%qGIa]+'o@BrdDa.Ea$U"=d&Q!Ors6:,bQE7@[q@9apA3SD"JrW^4^YBU$SH_r@c8!9MYm88*,C7aG[l6*5Zk?50g0u#c(I^ET%U*
%:RE8'MM]Kk9@FEQa9\Nfgp)bDlT(5N=rZX_R.qjP^5.V!@cG1.qXM5p):OXc,ukm+qrpUSk]FX^[7i#!Tl#fc$#Hr!Wk`eVe`m9<
%F+27DOtA.^h!%*Nm]34DO`'/Yi.2:!3@ZJgYas:`8X)F`X-gg6f=Y$W!>:iH##n.1bQA/\&n[ZKe>nOMi:N.]X%1QDK2"6!,9U)^
%RP-F8OmCepYJql#cR,\_U9ce,TJ8eOFWVt':o_l\%G.b5>0m@Tg&E'1UWCV1JOn&n?M7Sql\?lreUo;0oS0Q9GJF]`2-@3IeLDmY
%Q45".n+:^4[aTjETB#2>7lBVJJkR].G)G+>h-K"g)hZb%Ei6k=eN+f1jG3E0aej3j$DB;f`C1PQ\Qe.WCD@Fb!@[G#V6&<<%t[8S
%X[S>=aJ[a>Sk]Q.KlF!4(#=t36IN-!3r7957`UK(cGA)%M(VM0]fZ4GI))m0gYS`F6a=I-i'G!#7p,sD-!+V%g,Ak]-=N!/D5M\P
%qS<I[\2KgD]sc(?*^?OgC*B\nl0"k6dk4ab+ur[:#Jo5I*jg*dCM3ZImE"f4@++oa-1>sq1ht;.@C=!U4iOU>Cga0-&6a0+D0*Cj
%&$<'p)K0mY_O,M8hi#boY%^EpC&60`ru,HhYA,%tVjAi9Fr:]:-B(8AgpG4J;k>C!KEWu(7"Z.=7tp9?%Nn)s(Tqs/8Ar,.>*Z5V
%D_Mh$E>DW&:et,\Z>P3:>fiD.JTo$@@`0j]'!e*hMXeFYbgUjqUecRJ>V[O%nL<E1d7]\GimI03cfc\p/`PVT94]/G2lNVid*-UB
%:5X1gI8qSu52hbTkb'L7a9^?`QA^q:QQ;Kf(.\FNHE22a@7S@TG9*Vacies(*fa<seD-42Z&f*%#3G/[M/+tI"+sW@Wr<nN?[s]Z
%>+Ceb[gl@g@D[R64a4*0kG3TRMKKW[Ap>mr^:i#kZH+@F(DCfS9q$)[h-k,$dt,Zl<)7B0KYOOmk<@?IQde=U-$b;C?-XP$,d!';
%^EiHS!opZdY`f*)G9*VadKEuU'eCo$`K7#Y>)6]u="_E:aXd`NNBa]sl[B[Jr]@i-#]$D)c@P"V`Dfj*I8uDN3tiE5h7"lGXU3<T
%21E4pOgU7,RSbBA`qs,nK[7r>@l6Pgeq@I3UqNeq8oLa;K'e't:SnHW2Pi&$2E".'2#i0B,=*Nrk$YJ7?k(8YP-@ed:Du1/Mf:Bn
%p_$[j3TEVGGnP*sl0pL#f_B`WSb,,[")%KERo-7n&$8?*5>[@[Hs"rL#VHo^Wtn)Qm<r>m$jPM!KiX/"j&g)K^iN)C%s8n'WD^\&
%BHo0)5I,hIk?0qRW0K0%B_(E+=6DclmN-&MF_B-&WVUb!8QSFIGO]Elk3D^,l?Dd`f2q6=?)i+N3Yf2.DZYqI6NE/49]LG!:&Q!^
%dV>f;\B_QifD.rBOF6H0lV:@d,Q,We7_u97$KC:aT(S\ldsX3Y5LgLNMFLXogVsu@ot#_kM4TYSASSL7V*71Y%O%'7H91G,]uS.I
%&'&gp\kZ:'hYPr3:\e3:;uS=^'!b"`b+UX^(a1,XCIu7Ys)dPSH;>0^+-(,DFZ$:ucdfD:1%fM!Xr]'GOa76B<F;M&,@gpKYDatj
%?ohS.]r,Ia+-*C6FWIWZlqJeYf'Bp-R$at5e#M3*8EV]^^0G7'fsVgS..9)u"9=GPrB$;L1Mh09p5W])g:r\O^SP)F9f_1pjb-j,
%oc'G2Zo>>"LH;eJnS/dLS`_6R:+[(-6-HDm#$$HPDq!;+f[fK-::N5EiJqdR5&LJic)g<+%P:OT_*^Q9\L3qG!K&og`F/TAej,*k
%F'7O<4Cn6Uc\4.Jleq^XV;dD2nO9GPU/ZM;._[;G?^-F$8k#FQ4@(L-,^OANN?jHI)1NZ@jGQqiTUI#!j[Qi><`:qLGU][h]r7tO
%-+lVPi&.p;#;=GPl:#"OkeVWEeCBTmhOeF\"Y%7Kq.9'*)FEAW.O$:<Iq2O^2rTh#N8TH0dFAiaD`kTt6EOls8Z;:j8dS&Ik\:F3
%5.Y2iN=W.[:n+4/-`@2tAG(Toc_-rXBq@UZ60k9r.F`YJ22,5[TW"O%ma5#L'_OVpZ2t5YFEOG&p6i8S-IHdUEVJ9A%^Tr(L.pU$
%Y0*!u;T]#H;eJ_tLfgUU1d-(Z/C`4=*k^B+<OF:7,P/":2^Q,$e5cDdJCggd;o8D6f@?K7MsN$sXoe:SI5tM3K6m$95?1^^KTF?`
%WXb<`52tiWd:X!t<Cr4e=kh'e:*+=k<k2';nRL>*?1AQ&#U,4CI5P]m_h^3R5`>"_Tjr.G*@Vk-:9GkjDAjfmf:Z^,j`)`B`F1En
%@rka8Ee-D/&bh]\Fs^qN'/]+`g3H\^T3uro%dL*pICD#S#+ApQ9sCb"G1Zr0Z,W):2)3FPPjB?%gcH0>T3sBSXim_0BJ!oW7:,ST
%)N^@Jdr>aaRD0;UU,T"\JQ:&H[-_;0g2G;qgUpU7,@QLg3rh^$jJPTfCFL5s$j*VllRo/iObKHO4)!!$e)<A:-E*\7#bWiL#;Z\?
%p97`f2bfcOrt!]SpG_hiX57Gd@n=;k71>WWX`\/UR)%7"6SMck=L0g[^V54dQUG^Pa<EL'P\Ve:%hjl0bS4k,R4#\)fsslY`qq`(
%lqH."$%u/'U+4"8C5LHKIgqZ?>NeWX-.En7N>6,VhAt*GfBB6Q?UF,\:g8MEYr%2jM9sPW;/oQG(I`a296`HEJld0'KU9$Ip>;ec
%XWe?eC`P)"bBrV.]>Zie55o?\jh'pP*qo0::Uk$r>"PObm/?h+[Cs!(p!*A`DXQn/D2d9!R;ba\IPjKoT/TfJl;\7`MWIh3"BV\0
%WQ`!9M>:o:gpWU`R)$(L)A*264<WPB!TCRN3tr9p5rjiOk56Mu]MAjJpJ3-!jeDHYX\gO&9ODB#&hJoDM!1?+V8EhV2#Y3TO,\OR
%(&:KP^QVLV0-*J:.1u&A/_@kYo-?&d/&D`0-c*l/@TO(_>@MdbfX>.hp,\CBZ5//ii41#A";dU_P3(,AH2>Q+Pq'2!G:(luSkuJt
%>1^8f"1aOd=DIHZ:`6ZpNq?[F_ZA+dJbJ9_6$7=0"gl'8$.T8G<<_*sdMO#P6Dor<p"_1Xjd_JMEZ?k]]UWiHs$A1IH[Pj*COP\s
%s0(h7JQ0$t0mG+r#<^\Wmi7IicT@2&As/e%DP5a7Jp-)lDP9V0jZ6^m&':P$8ccc'GKQeuD$-"DY=e;ZGQlI2-`[Hj!%=NR,XC`j
%)UNeKedW<6#"d#O5.RhA+LtuL3CX7q;cum6apH]oHFjDuf%(;W,%)C?lUS])VqIre$Qp$-e`])f.&kB8Elm$9E&.:*ZIb:61q'CF
%L,&pO5!"i0-sC@8X[thspqLOW:9cn3UrOgB2"8rc"-`+3`"ehgK1`^'-1P?FjJEXYTpo;2nn>5Hdc12C#orokf]g$H;T8%\=iKb>
%>Pu6]13WNi2<]S3PuH5]-M>oC8LO$M<;W=i9DaOS>o/\Yjk'u]`1aX(0np0/VN8c5?eZejiKY\Y7li!3pB>P*7YG33f<,7]7)YRH
%#d^tdm0&EoQV[r=%QS`CPRsEYQEU\J9R=;U,]a,*U5K$XjA7_AQq7D>Mg"Kh)sDHsk2j"q4)?caN8\]'VH9S7']M2"WUMF@ET?<i
%>I]t76ZsA4W#jT_JtJ2)PD-)S09b#oNQbEA6cNlr)b31;iJ%@FD3hFs)L,u]JJF#K'dHs(GlC@b7Uk#:-n"ds'sbmWA?Qt&S@?80
%>j<L/rZZ(VSW`[X>Pp^J["k#U>;)6MAR`VWLfuo=qerDkI]."\Ei*TNLDie/1t7mC[W6l+J#g#jcsFi%):.-<V]]'hJNf8oZs:5[
%>J9:uGIh)q?`[7Jbk7u4:CtL6*1<lqD5s]]FHP1,V_o4PgLS4q8-:M>5;52R7WI+]Wp@'5S[j6l\_QaJ(0Mq8Xd[(,8TgLTGA_]S
%jm)\2lkuu;a(?]@m1M'W'&KjRTm(o%ob<\-_o3+W4mDaYr:oqnPiKTLZjs5bkCi/=%j-,UV<J4ce?S#2@hT<-O\.i.Nh]\HF`o+/
%(edIOXsP;no738h3i?DlU0>Ra4(oK3PAm6V@jXLbi*)u7eM</6j9Re%?9QGlp&`S]Zj\g%&trUN34')O=8JI:;F,\`<-Ncq\0"$:
%Y:ngY@MKW@fU9+kR3X+GHfS*O[9G5.qY%+d127[e0)I;qmJpq%5l:0@TWYjq=!d_Vl48F!$FGkj0g&-_:(s\,mq)mp8':.Q]S-#(
%jn2pH8'me;Kt;B%MC`7+ZZ]);W]!g.TN&&U<NF(2WnMB@['J+X,rNE"CL=h$=NTHml9`;W`)Thm18B;rZA?KcnIUl]N]7D<:MV8e
%l8pRjW@Zc^pT]a:kohjN(uojN]ZdKsS&,]+F>@FN\(]X]LL$?p=M,.m]P5:KUN4%mUikh(056g!U8FS,Q!R[[hEiifJXQb16=_"1
%?lY^]UE)k[,ekneK(<2=chC4m%uD!*/:6\*GuS\7!pu(K(,[N;_Sbr]pBJm8oc,.!ZYM`Uf$JLt^=\+iiXZViWFZp_!bX"25qg7:
%@Z4KU'5Bd\/9DslbA2Ij+F2HX(8<-jYbB!%ULBF?Al'QWm>&Y!RdS03459A4+Cis&j*buqHgCXN;,b6mG\]M]F1W/^N:s"q8gLn'
%51nT%\[t^bgHIF0dV0:i9V(]Nqf8b\H%"nsqeLQU'+9W*?TreF^BPsL?[>3X(@UPLnXgl>D3CA0Is>EnHFtt;-;c:L-\3au.7G.h
%!I2YFUa7J8JjU.r.BH81VP%.Ka0nl>@N<O!qCn/]QI*o6"@uX-H6B"=NF(8W8Z/1YLE4_N;1,_fJp;rALTTSi)787i@0=c"$)C\q
%RO]p/Kj!.b$:pUX5,fFPb^-l3D3ic_d32p,>O,!p<2*b9!^a]fj.MMk1<57j0bB0j9AULDC>+Z(K%UXeBHBU.o>Z$W8ncMB+Pu)b
%-pUtU%)VCb4p89/)a%`2j.J\O3p`NV904QA+?YD:&h$PQ!Nl)ChE[R$d8lOW(#Id_WZ7f>in<D+aj=Y^gS7SO@5gZ4L(Pu^``ecV
%";sH(NbT@8EDYo[FDiX&)[AZS0g4@IDMNO?!T!#o+cu`A+co&fcMo-mEX3:oTC+&W.],cq+>#4'M(^X^K0g^2`taV<"W;\eZ<t8h
%,M_NL;0Gp769kekj&11<<b*A^:FYq"2VT2C#:HBLP9,Wc!<oiWU7hf4?WJr#5L#u5_1F!K+_OBn)Ujmq*Rr5r4+ZW?UaBJ/:OnI4
%*1@9fHg%-I**0*r9+-2(HGcuHf;UF(#;7ES>L'XQp#,eL'%Q+:i;J,)9<?E[gbBL:/UMVp9cp?#O,*\<K)XR\(&4>XOkVZ$d#7$$
%N1tS4f_9Sc]H5MM3sH)ehX(ukH+18f\WL"56%AW>cI0PX;a(bk>WhfI6`VYCSppP,o[?%ul)2G`-&5Djbg;0&$-)pFCd7[U5=d.^
%=N"1l->q42(hX0C\7De,$/f,;]/,goR6OG?\,!l_^[T8sr:(/ES=2ZCe5PlrW2GG9-@_?3A>J>bJ/5(..HiN5!iS)cQ7G\ZThPb#
%eM,J36tdHj7S"-Jqao/?LU#N-DmWJF>(VZ4&\,F+*k[jAi3a<oi;Hc$Fk&X"^Rs6&-Wi.#_>gKjG\c9#jG/OM^FdWnJA>*((A#4k
%.ZFS#Y%>j^7$^/u9q;r-i6)>S#ic-i@?+A:>]ia@krek23Q#1#,-PO9)3aOa.m/`J+ZpCl$,kLW82A*+BM$_61#1\Hkj1ILfJ,\*
%G3N-QM[(7.jG-@T@e_IMZM.Y`V04Ib)sCqR'@[jXnfZ6"]SPdR*)otNr#$=>=Z=jU$U];ZTfN$D98i-%T6?Y7d)aVS_f:\e_,uI,
%.\3k=0G+E5#VlI5899]'\f0$,"MrP%E-!G?Ae>\3&V\#s#ceYZ"i`P?`5i+FNbC(*?BR(ZXsFPp]SJ!sO1lE,K<0aDRnt\b"I8J3
%ObWLZ;2JO,lCOGJk7T-+B7?u>CA?F4IHMSuLZC=N#WS@QQ'He6PBKL<f#gdL8WV(g+NVQr:[^te:r4-_Qk0lbR[/KiQ4b$SP3>%A
%]m6/e`<.CU)Da#S3>12E[WKY<\)k5g1e&=.,gl_3=7LR:N6mtH$(<7%LH<S>P%GCp3@[=K5jY+.JgY%?#NkhR>'XjTRjh>u,p"oN
%OF7D55ZS7+M<E;RK]=Jn+$<1d_HTFAXJV#*:jaOYihK$eMu![.i^6AfAOd]&9h_RR8>"SbTqEI;6U4Y-$*&pir1S4Hf$k!9nrN$&
%A2H'g]:=nE_I>,rZAPo<C:FurO!8P8eB#h#5_759@!kI/(L9$_YE1h3oD1d.WC+mpmfDB7YR[NI@:Rbj?jKn&\UU`gDhsD1R,gF%
%9P]:hku@iFlC*A^cC+c))U7e45_Y$iPWKW.2L:]di"1a'K5jdlc9u*n(J>dK5a2_>1a[j,E0;Xdbf*2>WQ4Rbdo"F"f=?^nTfOAL
%.e%<GaR4(&7hR$J$k@X'3E=WSV&S%WfY?`lf,I5qiE!>DeDRU_o@i.4>:9_7P2qd6qL"k"-j)+s5;;jtjP54Ba\"(]\MJ[/e+W%1
%C'RM.a">>r=bN=B//j6$3aP4<`9EG4ca@t1o;*Sg:Y6UYc[(utOsj#28KuGOma/IP7.M?RPc`n:!!`"Te(Kj<`GT@A*'g7[jeOI6
%a]/I7"(ZtA3!Ou<oUWuNd>9@ZSt"[XN;5:RMS`eN0Mj/R7)2joeO:72EDTg(6,G?E)X7mTB+9_O7Rg9BO`$J+]WGm_Z72+c]THUr
%GU1HlRjc57RNI);l#!S7G0[B_`n0^Jfh#-ud4%@J+OM5-5UHW?8mknFe0A&Wjkr6ACrV!hS>J]fcuGDrF@]>@&FqDXIS^$DjIW&e
%Y!#Q7,"c@.@OXX=0D8FnJD0.^$J%s(3dbHg$<ee9<@ND!\0KD;fG%.=6_7He=m&fA1P'7m>X><`/rG<WSoDmkA2)P9_2FFS_n]6"
%;Va[jTE@*TdJ80iC).sd'2_-doAVc/(a'W2Y'q0AU&;WVO#eYM&W9?ZY0mUZd>fde-o&XZ*Dn3=[@3ueI&3.%V"@f]Dd]ug6kYC&
%`&+WQ)'cN/brO:`EQcEJU63)o`piq5]X>dMGT=[-M19'\aZ/Z/:3pq%/!I%?PK\$VF0h(3*\P@P!ldKa'>u4TReWbgfkuY/eJaVN
%dRMntMBmQ"$:s]HN7+Yg7Nl^`YdGO?RlY6t`/'Rk%C8[]XEnP&:]_Ti\-uhU#IR.j'?F_]-6a1hV5-J'N;+5T;8kYP`PiSIk98q>
%pI6\,bq1"VHjccN!Yg6n9m;+!a5fi54DIDL(51a:*l?j$N'r(=@oY<H0M3T<.[U#k.]&:`PS7OE8f464%6o3+5oR<:a:3H+>!Gni
%\ZOg>0MjK&5guBH;rT)aJ[ENTiOb)[Br[iORt1]\b_/AW9V@Jd8%N!em3[o._DbC?Nh/H\qpR<(U(/%dE<."$QS:\#&q#/aKV5-"
%A\i0G91CZgdNstd2XQoFDSZZ*ZB+V>3lu%^W,k!Oc6^'[jR0Yh1'VRs&^e.$>XAM3eML:D1(PYf.%bU7j'_d!I.m2@c(6c1Bb);b
%%O<iTC1O9S(fMWa^muje\\\P1/P?CT:e,L`R->7K$'G<O(Vg69,#mW?7"H3;H8,8ZU*/tA]49tBE-ak)$6rY/+>1T:\"&JH2Om?s
%-]fQoUbL$G?BO^a#Ypds7g3mGK1",S@V!_c+MB\k6W=D&oiC<VaJZ?!"6:&b*7D!eQ:KjS=o3>&,YNmS90,tGf\p-[E24+$Bp42]
%AgUWi>D;/0S5:Z-8>b'0(^en5;TWG>,C$%PC<;=OUbi]qdT8[[nt/p6)Le#Z6BD<s,pY%Z:]Y"9aCeG&3JR6F@>J_M&n-s&UfaF;
%_&NjUrABLtOej+l.+*9-51:_hFW#g*80`]BEdu+:"qj7U<1I?bTf,1OWXZ39^pC-lF$tT=i7/I!huq2MdLN[";I>Y[DGHp-i_$)%
%W_C8fF$#;,/SH&ebIgS`j')_TN'IX:YB3J(g9^5Tgr,%;_^&NoiN8fS/n[f(/N;(M'VbH^)XGK_C`4oT8sN96]s*KLU3Yf1;4sn?
%_Ip2X??DQbA]JBac!<XM5u]m)[qu`k-IJ#7&>$JDcq1b!Sh2(Ln$>:?=DQ\dOgt7c#K54kK<;,KEMS_`VB8t#WK'C'O>F,kVQmgj
%%iQa9R$OZ]B6W='.33#ennO]h\Q#'\NrT?33MaDVh3Y4^'?CFJ"BoT*XR;kEMTOY,3.XsWf`e/pAVM&/:"BD\K:Y)O82cQb^imqj
%d?\nZJeB_o`0+!6:Dr<e*pM+-BB%Rp:T7R/g7#rSJ<Yq.5e=HO6C&E<?L0\51#8iM=mfo_$HePM3^Qbd'TUZ3I5r=SFJ;cg`1d?+
%cI`77hB\^2/mRrJ!il'Ul.*^S8U4gX<8u1rH4pQJFjId=9is\Q\^b4aKFi/DK@%^Xp97s_S5O1V8iR,cgA+]qNl0d]-\"BZpL,?m
%EB8HiM/.mR%2NDj[CWBgcf#@e95="HAo!9DZ.6`!1at3l0"0`\)+sZ8+XO0V3[Ct)^_g5PTPbD*OZ/ptPLpA:<J0^,_LP>2Hg^C,
%Uu>l5*pLN4d+d)"D'.rXg%8d((+EuTC<V`8JY4gG3VHgq6tEn93=c0@1EmU).S5Q<CE<6=I0io\U@]UU!s+#)fnUDh6^H3"6*\R#
%C\9/M@$<<3#!_FU52B)_.+FL8!=4FIJ=]2r`'Zp1R5)eD3+gXVQV`4\MbFEkPGJoFP&)8aGoKsS(U03.LaM;Bc?>uDMFB#(ALGEB
%3df%$UVRYKYfQY<19XYETGJ`>V91-/#?<LDK)j!0>Y_e]H!>k%R&=fTG#1(Z!$][Q]5rem`!g)r5l?J?]XD[ABnI]!XEn3BL?"#p
%)X4%:QMWj_=9DaQ,g46$r=6u8kGG2HKr!H1h0i>k5P0LRD%:FkQ:N`^M;^sg*ji_J`VeMCA''u5J:%Fo.Ybdo(OQp79q2i6_r*aX
%+#S:@67QUO.2$I&6m1P'GCdY"-l,r@-C/(+=:&McniYp+CV'-^?o%%!;",#.,b&p3QQO[;V!8j>WZ-M^2VI-oMPpMiZ<o/_9Tpgm
%#tMZ@3o\AKk[tA5OI8V-ZqjB;_[eD:P'6uj%<nKj9*b5?&7ter`Ts=3.\_VFP^UQ,A:\@?i)l3)&d^SZD;h;4^'nT$6&1R)`s'^j
%ZGM["b.=D"N1fh7^@q_Ir@2u*E.JVT!Qd30i9mKt'oIpLA7R+DX.kI@c.D+7Dii'Q#p2-/;lI)N#XZgU3l2+.)_!f)O#HRWoHPk=
%S\Q5mZ.5eNdJseNjG24bn`G^:jU=F#@<FUD6qm)a0iT88bTB<HCY&nU('Rlcd:MTE1)K),\ed@S)eV[IF!<C2(h>jX8??#URoLG(
%U+#PV3rbV:OMS&^1Btg"!(%\-E%YsZ:?*P?,!2cDA^3on5t>2+--ap/o6?!WDCQ,GlTN$E\!j[M1UXOk&g?c"%(rIZW)Sl2.dL4M
%7h)J30MVI1H@FX$=SB`I+PKdM;8FU1RHY!t`=1!&;548W3[P-aZqldJ*l(V&6=Gd!OD0%42Rg)NiC:mnh[V0IXl26:RVu/>^9II!
%@o2_k!i//!VsFI4X8i8fV.to<eI41&;Nn8&P8Y@f<(OLE\""bo/sDsZnjP_K)Tp6G7d'sf.YBiqQgaXY>RaSn`bX$499Ub9FJ<0$
%n-FW\171@BWeTm/0\1fG-egr?VBta=9S>d@WI(d=\=WDZrBSJt#e1JM;!s^)YD&GWIP'-TR'.I3Cn)l3LX?s4!<HfUhZ].hm[GdI
%,H#pmSV2m^q@O;&;J"%2TdktGadsG:C^.\<8e<li!4!c?>$Us`4e`D8!a?.2LflC9d+SIt.6Ib!b&s_AZcj=%dVmcZ$Wd?:%qn.)
%A-84ZkXeoOQd_.$`7q09$i;\%kLesqfldZ.j;Z*31/#)[>nX6-c-nMPB$1p,-$H<8n0XuW_)#kC,CE3d#iYb_Or9EAI'2rS76i+%
%im&gOf"nI>gU8R\SK+Q:4GZn:)e`bA+f'[G#Y#m"TiSR:e]\4/=<to*UINLDAVGn&r-6AIqa[/S2(nkT%EuUnLK"7%&?0gQ?@12g
%n\f"*`)I0c#JOp;\PtL)Z;dpD@gmO4)Hc5fH(S&"i""_&coA^I![fI/*>G1ONr+BD4\$s*B%MR/CirS!+Ti93MQ(QJ82>f%$P=?u
%6-`q,nJ52Vf2KVIc>Vi&)FVmh>Xi71,6KGY*eWP\'63)0-'F+$4tt3FTEBJmXC!bH+cRp+*<T/&,KdnN;V=Apa:@6T.+dcmh,)c=
%%*nPRJ[BAVBu_AY-L3sP]n&^Mj4jh)Xd1U(?8=F4ARZ.PBe)1"_NkWMHPhDL7mK6ZZ(86Wp8eh(I5`0Caeqb+<'#t$9LZ4BdsN1i
%-!VT:,oJsB*7?VHWD)1hkRLF+).F1W9d$!rEpd"FHiuL``$S>Z8k)_39\(DK)Nsa@W)&nrk^Zj!:TY.Q=;LT=;D>?VMFj@mWb%uA
%."dHP0N@)/%"N`K/He\CJ>s<15+/=%X<0^NNBT]]e1Z>gdV3))UNd6G"Gi08ObAFY,ISf0-jG^8F(@3m+on3i@P8-fWN!df*i9t/
%,drJk1)L)'$&R&5"D7]W@T81/$R^'1Yn`;.&TIpgIJPXnBlH>_AIo4T&oCrZfsVV8-ftKSSmBgD9*5H/a=4Wt&j8f5PJh*#bjki0
%)FR+n.?f]cKIWM6Sn4Pkid,%dV6?*@7k#r+Z=tDM5p[mlP/1n^q#j5FS.X.\Rt-*s2.4JrB(=rfV;[V),Oo;6d&lY+Af4t0G=b7a
%Xp'A5:3Hf$$d4qNKHsIX0EOpmNj0_h`\eo:_*KD^&g]%4n=7?NbVfe<Jk`sgiY1ZC*Gq<?'T4?6S:pc7kL)ag)0T`Z@?oniZRjb%
%'_]`aFoZ-P@.^u:(-"i7bfr@<i-O#^9m$^L2_rfOXCFEo(T'pG(m*N]TF5au9e2bE4o6fB:LZu,JCsLK@qInB#RqG-W(=V^K?S%j
%OYc*>!,A+_Vsl/ml#'(jTp(gq2P(S=&>([JEs]s-L/;ZKCC+:4UP.m:,R^pj]&94F]GSIfFV55FL6VSZFpdEZ"Q[Q#<C,O95nl;>
%I-=fGI\(k;0o:E>WgZlqB4PU^J:r'pocd@&Le;20@V>1>AF_N".1)%s4lo9Y^`nBs?5`J,l:PP1&r$"Bea*BnW=sOsC"T8]LBUD8
%:uf><?[Wb;9)-h'ar>rMde^u8*g7Jp5duqclB<^=V.`_F"cjP!BEc8Lcn#.7LGjk]GYb)5MTnV_Jp7p?)j<R(6qYTK!cq*.6a1Hf
%E3KlnkI6ia>%h7uH^`n5AU65"4d/Ho@Y-D+`FP.t)C>UM3b[+);l#HW'^-H9RO;t@cP0k_\I%2RYYI1C-odb#=.j9F#(JKR4O3"%
%ltY!#)+*6ir5d;63R'q6?fTdaJ<.*ilG'2>iQ+H*H6fTMD4?95+krZ;+Y9g,Ooa"8B@roe>g8OIM8V>c]:`s\PW2ZW%2q^CM%2=U
%2Q1b:blf5^@c4*I#DReD=d3-P3`O<E'i.Ft>(p$knW&$;F*D,:mB=dJq0<%3HEd*ho7t#eXmOBH'48HP\G#+J?u:*(mYK-^oV]Ok
%^!2W8n+JXE+5aa.%j5Q82E5jEk5AL3^A@j1Iuj`)~>
%AI9_PrivateDataEnd
